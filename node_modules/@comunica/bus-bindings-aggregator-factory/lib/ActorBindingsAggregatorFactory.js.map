{"version":3,"file":"ActorBindingsAggregatorFactory.js","sourceRoot":"","sources":["ActorBindingsAggregatorFactory.ts"],"names":[],"mappings":";;;AAIA,yCAAuC;AAIvC;;;;;;;;;;GAUG;AACH,MAAsB,8BAA+C,SAAQ,YAK5E;IAEC,4BAA4B;IAC5B;;;;OAIG;IACH,2BAA2B;IAC3B,YAAsB,IAA6C;QACjE,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAC,kCAAkC,CAAC;IACpF,CAAC;CACF;AAlBD,wEAkBC","sourcesContent":["import type {\n  MediatorExpressionEvaluatorFactory,\n} from '@comunica/bus-expression-evaluator-factory';\nimport type { IAction, IActorArgs, IActorOutput, IActorTest, Mediate } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type * as RDF from '@rdfjs/types';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica actor for creating Binding-Aggregator-factories.\n *\n * Actor types:\n * * Input:  IActionBindingsAggregatorFactory:      A SPARQL expression and a factory for an expression evaluator.\n * * Test:   <none>\n * * Output: IActorBindingsAggregatorFactoryOutput: An aggregator of RDF bindings.\n *\n * @see IActionBindingsAggregatorFactory\n * @see IActorBindingsAggregatorFactoryOutput\n */\nexport abstract class ActorBindingsAggregatorFactory<TS = undefined> extends Actor<\nIActionBindingsAggregatorFactory,\nIActorTest,\nIActorBindingsAggregatorFactoryOutput,\nTS\n> {\n  protected readonly mediatorExpressionEvaluatorFactory: MediatorExpressionEvaluatorFactory;\n  /* eslint-disable max-len */\n  /**\n   * @param args -\n   *  \\ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   *  \\ @defaultNested {Creation of Aggregator failed: none of the configured actors were able to handle ${action.expr.aggregator}} busFailMessage\n   */\n  /* eslint-enable max-len */\n  protected constructor(args: IActorBindingsAggregatorFactoryArgs<TS>) {\n    super(args);\n    this.mediatorExpressionEvaluatorFactory = args.mediatorExpressionEvaluatorFactory;\n  }\n}\n\nexport interface IActionBindingsAggregatorFactory extends IAction {\n  expr: Algebra.AggregateExpression;\n}\n\n/**\n * Instances of this interface perform a specific aggregation of bindings.\n * You can put bindings and when all bindings have been put, request the result.\n */\nexport interface IBindingsAggregator {\n  /**\n   * Registers bindings to the aggregator. Each binding you put has the ability to change the aggregation result.\n   * @param bindings the bindings to put.\n   */\n  putBindings: (bindings: RDF.Bindings) => Promise<void>;\n\n  /**\n   * Request the result term of aggregating the bindings you have put in the aggregator.\n   */\n  result: () => Promise<RDF.Term | undefined>;\n}\n\nexport interface IActorBindingsAggregatorFactoryOutput extends IActorOutput, IBindingsAggregator {}\n\nexport interface IActorBindingsAggregatorFactoryArgs<TS = undefined> extends IActorArgs<\nIActionBindingsAggregatorFactory,\nIActorTest,\nIActorBindingsAggregatorFactoryOutput,\nTS\n> {\n  mediatorExpressionEvaluatorFactory: MediatorExpressionEvaluatorFactory;\n}\n\nexport type MediatorBindingsAggregatorFactory = Mediate<\nIActionBindingsAggregatorFactory,\nIActorBindingsAggregatorFactoryOutput\n>;\n"]}