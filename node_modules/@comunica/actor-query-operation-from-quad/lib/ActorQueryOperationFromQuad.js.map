{"version":3,"file":"ActorQueryOperationFromQuad.js","sourceRoot":"","sources":["ActorQueryOperationFromQuad.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { ComunicaDataFactory, IActionContext, IQueryOperationResult } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { Algebra, Factory } from 'sparqlalgebrajs';\n\n/**\n * A comunica From Query Operation Actor.\n */\nexport class ActorQueryOperationFromQuad extends ActorQueryOperationTypedMediated<Algebra.From> {\n  private static readonly ALGEBRA_TYPES: string[] = Object.keys(Algebra.types).map(key => (<any> Algebra.types)[key]);\n\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'from');\n  }\n\n  /**\n   * Create a deep copy of the given operation.\n   * @param {Operation} operation An operation.\n   * @param {(subOperation: Operation) => Operation} recursiveCb A callback for recursive operation calls.\n   * @return {Operation} The copied operation.\n   */\n  public static copyOperation(\n    operation: Algebra.Operation,\n    recursiveCb: (subOperation: Algebra.Operation) => Algebra.Operation,\n  ): Algebra.Operation {\n    const copiedOperation: Algebra.Operation = <any> {};\n    for (const key of Object.keys(operation)) {\n      if (Array.isArray(operation[key]) && key !== 'template') {\n        // We exclude the 'template' entry, as we don't want to modify the template value of construct operations\n        if (key === 'variables') {\n          copiedOperation[key] = operation[key];\n        } else {\n          copiedOperation[key] = operation[key].map(recursiveCb);\n        }\n      } else if (ActorQueryOperationFromQuad.ALGEBRA_TYPES.includes(operation[key].type)) {\n        copiedOperation[key] = recursiveCb(operation[key]);\n      } else {\n        copiedOperation[key] = operation[key];\n      }\n    }\n    return copiedOperation;\n  }\n\n  /**\n   * Recursively transform the given operation to use the given graphs as default graph\n   * This will (possibly) create a new operation and not modify the given operation.\n   * @package\n   * @param algebraFactory The algebra factory.\n   * @param {Operation} operation An operation.\n   * @param {RDF.Term[]} defaultGraphs Graph terms.\n   * @return {Operation} A new operation.\n   */\n  public static applyOperationDefaultGraph(\n    algebraFactory: Factory,\n    operation: Algebra.Operation,\n    defaultGraphs: RDF.Term[],\n  ): Algebra.Operation {\n    // If the operation is a BGP or Path, change the graph.\n    if ((operation.type === 'bgp' && operation.patterns.length > 0) ||\n      operation.type === 'path' ||\n      operation.type === 'pattern') {\n      if (operation.type === 'bgp') {\n        return ActorQueryOperationFromQuad\n          .joinOperations(algebraFactory, operation.patterns.map((pattern: Algebra.Pattern) => {\n            if (pattern.graph.termType !== 'DefaultGraph') {\n              return algebraFactory.createBgp([ pattern ]);\n            }\n            const bgps = defaultGraphs.map((graph: RDF.Term) =>\n              algebraFactory.createBgp([ Object.assign(\n                algebraFactory\n                  .createPattern(pattern.subject, pattern.predicate, pattern.object, graph),\n                { metadata: pattern.metadata },\n              ) ]));\n            return ActorQueryOperationFromQuad.unionOperations(algebraFactory, bgps);\n          }));\n      }\n      if (operation.graph.termType !== 'DefaultGraph') {\n        return operation;\n      }\n      const paths = defaultGraphs.map(\n        (graph: RDF.Term) => {\n          if (operation.type === 'path') {\n            return algebraFactory\n              .createPath(operation.subject, operation.predicate, operation.object, graph);\n          }\n          return Object.assign(algebraFactory\n            .createPattern(\n              operation.subject,\n              operation.predicate,\n              operation.object,\n              graph,\n            ), { metadata: operation.metadata });\n        },\n      );\n      return ActorQueryOperationFromQuad.unionOperations(algebraFactory, paths);\n    }\n\n    return ActorQueryOperationFromQuad.copyOperation(\n      operation,\n      (subOperation: Algebra.Operation) => this.applyOperationDefaultGraph(algebraFactory, subOperation, defaultGraphs),\n    );\n  }\n\n  /**\n   * Recursively transform the given operation to use the given graphs as named graph\n   * This will (possibly) create a new operation and not modify the given operation.\n   * @package\n   * @param algebraFactory The algebra factory.\n   * @param {Operation} operation An operation.\n   * @param {RDF.Term[]} namedGraphs Graph terms.\n   * @param {RDF.Term[]} defaultGraphs Default graph terms.\n   * @return {Operation} A new operation.\n   */\n  public static applyOperationNamedGraph(\n    algebraFactory: Factory,\n    operation: Algebra.Operation,\n    namedGraphs: RDF.NamedNode[],\n    defaultGraphs: RDF.Term[],\n  ): Algebra.Operation {\n    // If the operation is a BGP or Path, change the graph.\n    if ((operation.type === 'bgp' && operation.patterns.length > 0) ||\n      operation.type === 'path' ||\n      operation.type === 'pattern') {\n      const patternGraph: RDF.Term = operation.type === 'bgp' ? operation.patterns[0].graph : operation.graph;\n      if (patternGraph.termType === 'DefaultGraph') {\n        // SPARQL spec (8.2) describes that when FROM NAMED's are used without a FROM, the default graph must be empty.\n        // The FROMs are transformed before this step to a named node, so this will not apply to this case anymore.\n        return { type: Algebra.types.BGP, patterns: []};\n      }\n      if (patternGraph.termType === 'Variable') {\n        if (namedGraphs.length === 1) {\n          const graph: RDF.NamedNode = namedGraphs[0];\n          // If the pattern graph is a variable, replace the graph and bind the variable using VALUES\n          const bindings: Record<string, RDF.Literal | RDF.NamedNode> = {};\n          bindings[`?${patternGraph.value}`] = graph;\n          const values: Algebra.Values = algebraFactory\n            .createValues([ patternGraph ], [ bindings ]);\n\n          let pattern: Algebra.Operation;\n          if (operation.type === 'bgp') {\n            pattern = algebraFactory\n              .createBgp(operation.patterns.map((pat: Algebra.Pattern) => algebraFactory\n                .createPattern(pat.subject, pat.predicate, pat.object, graph)));\n          } else if (operation.type === 'path') {\n            pattern = algebraFactory\n              .createPath(operation.subject, operation.predicate, operation.object, graph);\n          } else {\n            pattern = algebraFactory\n              .createPattern(operation.subject, operation.predicate, operation.object, graph);\n          }\n\n          return algebraFactory.createJoin([ values, pattern ]);\n        }\n        // If the pattern graph is a variable, take the union of the pattern applied to each available named graph\n        return ActorQueryOperationFromQuad.unionOperations(algebraFactory, namedGraphs.map(\n          (graph: RDF.NamedNode) => ActorQueryOperationFromQuad.applyOperationNamedGraph(\n            algebraFactory,\n            operation,\n            [ graph ],\n            defaultGraphs,\n          ),\n        ));\n      }\n      // The pattern's graph is defined (including the default graphs)\n      const isNamedGraphAvailable: boolean = [ ...namedGraphs, ...defaultGraphs ].some(\n        (namedGraph: RDF.Term) => namedGraph.equals(patternGraph),\n      );\n      if (isNamedGraphAvailable) {\n        // Return the pattern as-is if the pattern's graph was selected in a FROM NAMED\n        return operation;\n      }\n      // No-op if the pattern's graph was not selected in a FROM NAMED.\n      return { type: Algebra.types.BGP, patterns: []};\n    }\n\n    return ActorQueryOperationFromQuad.copyOperation(\n      operation,\n      (subOperation: Algebra.Operation) => this\n        .applyOperationNamedGraph(algebraFactory, subOperation, namedGraphs, defaultGraphs),\n    );\n  }\n\n  /**\n   * Transform the given array of operations into a join operation.\n   * @package\n   * @param algebraFactory The algebra factory.\n   * @param {Operation[]} operations An array of operations, must contain at least one operation.\n   * @return {Join} A join operation.\n   */\n  public static joinOperations(algebraFactory: Factory, operations: Algebra.Operation[]): Algebra.Operation {\n    if (operations.length === 1) {\n      return operations[0];\n    }\n    if (operations.length > 1) {\n      return algebraFactory.createJoin(operations);\n    }\n    throw new Error('A join can only be applied on at least one operation');\n  }\n\n  /**\n   * Transform the given array of operations into a union operation.\n   * @package\n   * @param algebraFactory The algebra factory.\n   * @param {Operation[]} operations An array of operations, must contain at least one operation.\n   * @return {Union} A union operation.\n   */\n  public static unionOperations(algebraFactory: Factory, operations: Algebra.Operation[]): Algebra.Operation {\n    if (operations.length === 1) {\n      return operations[0];\n    }\n    if (operations.length > 1) {\n      return algebraFactory.createUnion(operations);\n    }\n    throw new Error('A union can only be applied on at least one operation');\n  }\n\n  /**\n   * Transform an operation based on the default and named graphs in the pattern.\n   *\n   * FROM sets the default graph.\n   * If multiple are available, take the union of the operation for all of them at quad-pattern level.\n   *\n   * FROM NAMED indicates which named graphs are available.\n   * This will rewrite the query so that only triples from the given named graphs can be selected.\n   *\n   * @package\n   * @param algebraFactory The algebra factory.\n   * @param {From} pattern A from operation.\n   * @return {Operation} The transformed operation.\n   */\n  public static createOperation(algebraFactory: Factory, pattern: Algebra.From): Algebra.Operation {\n    let operation: Algebra.Operation = pattern.input;\n    if (pattern.default.length > 0) {\n      operation = ActorQueryOperationFromQuad.applyOperationDefaultGraph(algebraFactory, operation, pattern.default);\n    }\n    if (pattern.named.length > 0 || pattern.default.length > 0) {\n      operation = ActorQueryOperationFromQuad\n        .applyOperationNamedGraph(algebraFactory, operation, pattern.named, pattern.default);\n    }\n    return operation;\n  }\n\n  public async testOperation(_operation: Algebra.From, _context: IActionContext): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async runOperation(\n    operationOriginal: Algebra.From,\n    context: IActionContext,\n  ): Promise<IQueryOperationResult> {\n    const dataFactory: ComunicaDataFactory = context.getSafe(KeysInitQuery.dataFactory);\n    const algebraFactory = new Factory(dataFactory);\n\n    const operation: Algebra.Operation = ActorQueryOperationFromQuad.createOperation(algebraFactory, operationOriginal);\n    return this.mediatorQueryOperation.mediate({ operation, context });\n  }\n}\n"]}