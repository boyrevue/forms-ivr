{"version":3,"file":"TermFunctionSubStr.js","sourceRoot":"","sources":["TermFunctionSubStr.ts"],"names":[],"mappings":";;;AAAA,yEAAkE;AAMlE,qFAM8C;AAE9C;;GAEG;AACH,MAAa,kBAAmB,SAAQ,uCAAgB;IACtD;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAE,CAAC,EAAE,CAAC,CAAE;YACf,QAAQ,EAAE,2CAAc,CAAC,MAAM;YAC/B,SAAS,EAAE,IAAA,oCAAO,EAAC,2CAAc,CAAC,MAAM,CAAC;iBACtC,aAAa,CACZ,CAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,WAAW,CAAE,EAC3C,GAAG,EAAE,CAAC,CAAC,MAAc,EAAE,WAAmB,EAAE,EAAE,CAAC,IAAA,mCAAM,EAAC,CAAE,GAAG,MAAM,CAAE,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CACrG;iBACA,QAAQ,CACP,CAAE,oCAAO,CAAC,eAAe,EAAE,oCAAO,CAAC,WAAW,CAAE,EAChD,GAAG,EAAE,CAAC,CAAC,MAAyB,EAAE,WAA2B,EAAE,EAAE;gBAC/D,MAAM,GAAG,GAAG,CAAE,GAAG,MAAM,CAAC,UAAU,CAAE,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAChF,OAAO,IAAA,uCAAU,EAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC1C,CAAC,CACF;iBACA,cAAc,CACb,CAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,WAAW,EAAE,oCAAO,CAAC,WAAW,CAAE,EAChE,GAAG,EAAE,CAAC,CAAC,MAAc,EAAE,WAAmB,EAAE,MAAc,EAAE,EAAE,CAC5D,IAAA,mCAAM,EAAC,CAAE,GAAG,MAAM,CAAE,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,EAAE,MAAM,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAClF;iBACA,SAAS,CACR,CAAE,oCAAO,CAAC,eAAe,EAAE,oCAAO,CAAC,WAAW,EAAE,oCAAO,CAAC,WAAW,CAAE,EACrE,GAAG,EAAE,CAAC,CAAC,MAAyB,EAAE,WAA2B,EAAE,MAAsB,EAAE,EAAE;gBACvF,MAAM,GAAG,GAAG,CAAE,GAAG,MAAM,CAAC,UAAU,CAAE;qBACjC,KAAK,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,EAAE,MAAM,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,GAAG,CAAC,CAAC;qBACjF,IAAI,CAAC,EAAE,CAAC,CAAC;gBACZ,OAAO,IAAA,uCAAU,EAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC1C,CAAC,CACF;iBACA,OAAO,EAAE;SACb,CAAC,CAAC;IACL,CAAC;CACF;AAlCD,gDAkCC","sourcesContent":["import { TermFunctionBase } from '@comunica/bus-function-factory';\nimport type {\n  NumericLiteral,\n\n  LangStringLiteral,\n} from '@comunica/utils-expression-evaluator';\nimport {\n  declare,\n  langString,\n  SparqlOperator,\n  string,\n  TypeURL,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-substr\n */\nexport class TermFunctionSubStr extends TermFunctionBase {\n  public constructor() {\n    super({\n      arity: [ 2, 3 ],\n      operator: SparqlOperator.SUBSTR,\n      overloads: declare(SparqlOperator.SUBSTR)\n        .onBinaryTyped(\n          [ TypeURL.XSD_STRING, TypeURL.XSD_INTEGER ],\n          () => (source: string, startingLoc: number) => string([ ...source ].slice(startingLoc - 1).join('')),\n        )\n        .onBinary(\n          [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_INTEGER ],\n          () => (source: LangStringLiteral, startingLoc: NumericLiteral) => {\n            const sub = [ ...source.typedValue ].slice(startingLoc.typedValue - 1).join('');\n            return langString(sub, source.language);\n          },\n        )\n        .onTernaryTyped(\n          [ TypeURL.XSD_STRING, TypeURL.XSD_INTEGER, TypeURL.XSD_INTEGER ],\n          () => (source: string, startingLoc: number, length: number) =>\n            string([ ...source ].slice(startingLoc - 1, length + startingLoc - 1).join('')),\n        )\n        .onTernary(\n          [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_INTEGER, TypeURL.XSD_INTEGER ],\n          () => (source: LangStringLiteral, startingLoc: NumericLiteral, length: NumericLiteral) => {\n            const sub = [ ...source.typedValue ]\n              .slice(startingLoc.typedValue - 1, length.typedValue + startingLoc.typedValue - 1)\n              .join('');\n            return langString(sub, source.language);\n          },\n        )\n        .collect(),\n    });\n  }\n}\n"]}