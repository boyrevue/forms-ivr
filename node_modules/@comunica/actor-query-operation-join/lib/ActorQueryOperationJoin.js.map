{"version":3,"file":"ActorQueryOperationJoin.js","sourceRoot":"","sources":["ActorQueryOperationJoin.ts"],"names":[],"mappings":";;;AACA,uEAEuC;AAEvC,yDAAsD;AAEtD,yCAA8C;AAE9C,6DAAmE;AACnE,2EAAkE;AAElE,iDAA8C;AAC9C,uDAA+C;AAG/C;;GAEG;AACH,MAAa,uBAAwB,SAAQ,sDAA8C;IAGzF,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAAwB,EAAE,QAAwB;QAC3E,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CACvB,iBAA+B,EAC/B,OAAuB;QAEvB,MAAM,OAAO,GAAiB,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,KAAK;aACrE,GAAG,CAAC,KAAK,EAAC,YAAY,EAAC,EAAE,CAAC,CAAC;YAC1B,MAAM,EAAE,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC;YACvF,SAAS,EAAE,YAAY;SACxB,CAAC,CAAC,CAAC,CAAC;aACJ,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;YAC/B,MAAM,EAAE,IAAA,uCAAe,EAAC,MAAM,CAAC;YAC/B,SAAS;SACV,CAAC,CAAC,CAAC;QAEN,uGAAuG;QACvG,IAAI,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;aACnE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,EAAE,CAAC;YACxF,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE,CAAC;gBAC5B,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;YACtC,CAAC;YACD,OAAO;gBACL,cAAc,EAAE,IAAI,6BAAa,CAAe,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;gBACzE,QAAQ,EAAE,KAAK,IAAG,EAAE,CAAC,CAAC;oBACpB,KAAK,EAAE,IAAI,wCAAuB,EAAE;oBACpC,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE;oBACxC,SAAS,EAAE,2BAAY,CAAC,aAAa,CAAC,IAAI,8BAAW,EAAE,EAAE,MAAM,2BAAY,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;iBACnG,CAAC;gBACF,IAAI,EAAE,UAAU;aACjB,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;IACxE,CAAC;CACF;AA5CD,0DA4CC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { MediatorRdfJoin } from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { IQueryOperationResult, IActionContext, IJoinEntry } from '@comunica/types';\nimport { MetadataValidationState } from '@comunica/utils-metadata';\nimport { getSafeBindings } from '@comunica/utils-query-operation';\nimport type * as RDF from '@rdfjs/types';\nimport { ArrayIterator } from 'asynciterator';\nimport { DataFactory } from 'rdf-data-factory';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Join Query Operation Actor.\n */\nexport class ActorQueryOperationJoin extends ActorQueryOperationTypedMediated<Algebra.Join> {\n  public readonly mediatorJoin: MediatorRdfJoin;\n\n  public constructor(args: IActorQueryOperationJoinArgs) {\n    super(args, 'join');\n  }\n\n  public async testOperation(_operation: Algebra.Join, _context: IActionContext): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async runOperation(\n    operationOriginal: Algebra.Join,\n    context: IActionContext,\n  ): Promise<IQueryOperationResult> {\n    const entries: IJoinEntry[] = (await Promise.all(operationOriginal.input\n      .map(async subOperation => ({\n        output: await this.mediatorQueryOperation.mediate({ operation: subOperation, context }),\n        operation: subOperation,\n      }))))\n      .map(({ output, operation }) => ({\n        output: getSafeBindings(output),\n        operation,\n      }));\n\n    // Return immediately if one of the join entries has cardinality zero, to avoid actor testing overhead.\n    if ((await Promise.all(entries.map(entry => entry.output.metadata())))\n      .some(entry => (entry.cardinality.value === 0 && entry.cardinality.type === 'exact'))) {\n      for (const entry of entries) {\n        entry.output.bindingsStream.close();\n      }\n      return {\n        bindingsStream: new ArrayIterator<RDF.Bindings>([], { autoStart: false }),\n        metadata: async() => ({\n          state: new MetadataValidationState(),\n          cardinality: { type: 'exact', value: 0 },\n          variables: ActorRdfJoin.joinVariables(new DataFactory(), await ActorRdfJoin.getMetadatas(entries)),\n        }),\n        type: 'bindings',\n      };\n    }\n\n    return this.mediatorJoin.mediate({ type: 'inner', entries, context });\n  }\n}\n\nexport interface IActorQueryOperationJoinArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * A mediator for joining Bindings streams\n   */\n  mediatorJoin: MediatorRdfJoin;\n}\n"]}