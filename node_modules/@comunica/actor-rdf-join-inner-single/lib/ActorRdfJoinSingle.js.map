{"version":3,"file":"ActorRdfJoinSingle.js","sourceRoot":"","sources":["ActorRdfJoinSingle.ts"],"names":[],"mappings":";;;AAMA,yDAAsD;AAEtD,yCAAgE;AAGhE;;GAEG;AACH,MAAa,kBAAmB,SAAQ,2BAAY;IAClD,YAAmB,IAAuB;QACxC,KAAK,CAAC,IAAI,EAAE;YACV,WAAW,EAAE,OAAO;YACpB,YAAY,EAAE,QAAQ;YACtB,YAAY,EAAE,CAAC;SAChB,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAEe,KAAK,CAAC,IAAI,CACxB,MAAsB;QAEtB,uCAAuC;QACvC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAChC,OAAO,IAAA,eAAQ,EAAC,SAAS,IAAI,CAAC,IAAI,+BAA+B,CAAC,CAAC;QACrE,CAAC;QACD,OAAO,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,SAAU,CAAC,CAAC;IAC5D,CAAC;IAES,KAAK,CAAC,SAAS,CAAC,MAAsB;QAC9C,OAAO;YACL,MAAM,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM;SACjC,CAAC;IACJ,CAAC;IAES,KAAK,CAAC,mBAAmB,CACjC,MAAsB,EACtB,QAAmC;QAEnC,OAAO,IAAA,2BAAoB,EAAC;YAC1B,UAAU,EAAE,CAAC;YACb,cAAc,EAAE,CAAC;YACjB,aAAa,EAAE,CAAC;YAChB,WAAW,EAAE,CAAC;SACf,EAAE,QAAQ,CAAC,CAAC;IACf,CAAC;CACF;AArCD,gDAqCC","sourcesContent":["import type {\n  IActionRdfJoin,\n  IActorRdfJoinOutputInner,\n  IActorRdfJoinArgs,\n  IActorRdfJoinTestSideData,\n} from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { TestResult } from '@comunica/core';\nimport { passTestWithSideData, failTest } from '@comunica/core';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\n\n/**\n * A comunica Single RDF Join Actor.\n */\nexport class ActorRdfJoinSingle extends ActorRdfJoin {\n  public constructor(args: IActorRdfJoinArgs) {\n    super(args, {\n      logicalType: 'inner',\n      physicalName: 'single',\n      limitEntries: 1,\n    });\n    this.includeInLogs = false;\n  }\n\n  public override async test(\n    action: IActionRdfJoin,\n  ): Promise<TestResult<IMediatorTypeJoinCoefficients, IActorRdfJoinTestSideData>> {\n    // Allow joining of one or zero streams\n    if (action.entries.length !== 1) {\n      return failTest(`Actor ${this.name} can only join a single entry`);\n    }\n    return await this.getJoinCoefficients(action, undefined!);\n  }\n\n  protected async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    return {\n      result: action.entries[0].output,\n    };\n  }\n\n  protected async getJoinCoefficients(\n    action: IActionRdfJoin,\n    sideData: IActorRdfJoinTestSideData,\n  ): Promise<TestResult<IMediatorTypeJoinCoefficients, IActorRdfJoinTestSideData>> {\n    return passTestWithSideData({\n      iterations: 0,\n      persistedItems: 0,\n      blockingItems: 0,\n      requestTime: 0,\n    }, sideData);\n  }\n}\n"]}