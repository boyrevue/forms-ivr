{"version":3,"file":"ActorTermComparatorFactory.js","sourceRoot":"","sources":["ActorTermComparatorFactory.ts"],"names":[],"mappings":";;;AAIA,yCAAuC;AAGvC;;;;;;;;;;GAUG;AACH,MAAsB,0BAA2C,SAC/D,YAAsF;IAKtF;;;;OAIG;IACH,YAAmB,IAAyC;QAC1D,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC;QAC1D,IAAI,CAAC,uBAAuB,GAA6B,IAAI,CAAC,uBAAuB,CAAC;QACtF,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,4BAA4B,CAAC;IACxE,CAAC;CACF;AAjBD,gEAiBC","sourcesContent":["import type { MediatorFunctionFactory, MediatorFunctionFactoryUnsafe } from '@comunica/bus-function-factory';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { MediatorQueryOperation } from '@comunica/bus-query-operation';\nimport type { IAction, IActorArgs, IActorOutput, IActorTest, Mediate } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type * as RDF from '@rdfjs/types';\n\n/**\n * A comunica actor for term-comparator-factory events.\n *\n * Actor types:\n * * Input:  IActionTermComparatorFactory: the Query Operation Mediator and Function Factory Mediator.\n * * Test:   <none>\n * * Output: IActorTermComparatorFactoryOutput: An object that can order RDF terms.\n *\n * @see IActionTermComparatorFactory\n * @see IActorTermComparatorFactoryOutput\n */\nexport abstract class ActorTermComparatorFactory<TS = undefined> extends\n  Actor<IActionTermComparatorFactory, IActorTest, IActorTermComparatorFactoryOutput, TS> {\n  protected readonly mediatorQueryOperation: MediatorQueryOperation;\n  protected readonly mediatorFunctionFactory: MediatorFunctionFactory;\n  protected readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  /**\n   * @param args -\n   *  \\ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   *  \\ @defaultNested {Creation of term comparator failed} busFailMessage\n   */\n  public constructor(args: IActorTermComparatorFactoryArgs<TS>) {\n    super(args);\n    this.mediatorQueryOperation = args.mediatorQueryOperation;\n    this.mediatorFunctionFactory = <MediatorFunctionFactory> args.mediatorFunctionFactory;\n    this.mediatorMergeBindingsContext = args.mediatorMergeBindingsContext;\n  }\n}\n\nexport interface IActionTermComparatorFactory extends IAction {\n\n}\n\nexport interface ITermComparator {\n  /**\n   * Orders two RDF terms according to: https://www.w3.org/TR/sparql11-query/#modOrderBy\n   * @param termA the first term\n   * @param termB the second term\n   */\n  orderTypes: (termA: RDF.Term | undefined, termB: RDF.Term | undefined) => -1 | 0 | 1;\n}\n\nexport interface IActorTermComparatorFactoryOutput extends IActorOutput, ITermComparator {}\n\nexport interface IActorTermComparatorFactoryArgs<TS = undefined> extends IActorArgs<\nIActionTermComparatorFactory,\nIActorTest,\nIActorTermComparatorFactoryOutput,\nTS\n> {\n  mediatorQueryOperation: MediatorQueryOperation;\n  mediatorFunctionFactory: MediatorFunctionFactoryUnsafe;\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n\nexport type MediatorTermComparatorFactory = Mediate<\nIActionTermComparatorFactory,\nIActorTermComparatorFactoryOutput\n>;\n"]}