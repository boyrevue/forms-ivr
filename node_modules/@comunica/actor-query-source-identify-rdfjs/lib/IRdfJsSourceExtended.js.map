{"version":3,"file":"IRdfJsSourceExtended.js","sourceRoot":"","sources":["IRdfJsSourceExtended.ts"],"names":[],"mappings":"","sourcesContent":["// eslint-disable-next-line import/no-nodejs-modules\nimport type { EventEmitter } from 'node:events';\nimport type * as RDF from '@rdfjs/types';\n\nexport interface IRdfJsSourceExtended extends RDF.Source {\n  /**\n   * A record indicating supported features of this source.\n   */\n  features?: {\n    /**\n     * If true, this source supports passing quad patterns with quoted quad patterns in the `match` method.\n     * If false (or if `features` is `undefined`), such quoted quad patterns can not be passed,\n     * and must be replaced by `undefined` and filtered by the caller afterwards.\n     */\n    quotedTripleFiltering?: boolean;\n  };\n\n  /**\n   * Return an estimated count of the number of quads matching the given pattern.\n   *\n   * The better the estimate, the better the query engine will be able to optimize the query.\n   *\n   * @param subject   An optional subject.\n   * @param predicate An optional predicate.\n   * @param object    An optional object.\n   * @param graph     An optional graph.\n   */\n  countQuads?: (\n    subject?: RDF.Term,\n    predicate?: RDF.Term,\n    object?: RDF.Term,\n    graph?: RDF.Term,\n  ) => Promise<number> | number;\n\n  /**\n   * Returns a stream that produces all bindings matching the pattern.\n   * @param bindingsFactory The factory that will be used to create bindings.\n   * @param subject The subject, which can be a variable.\n   * @param predicate The predicate, which can be a variable.\n   * @param object The object, which can be a variable.\n   * @param graph The graph, which can be a variable.\n   */\n  matchBindings?: (\n    bindingsFactory: RDF.BindingsFactory,\n    subject: RDF.Term,\n    predicate: RDF.Term,\n    object: RDF.Term,\n    graph: RDF.Term,\n  ) => EventEmitter;\n}\n"]}