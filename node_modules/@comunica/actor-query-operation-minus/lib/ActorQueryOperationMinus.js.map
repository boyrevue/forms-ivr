{"version":3,"file":"ActorQueryOperationMinus.js","sourceRoot":"","sources":["ActorQueryOperationMinus.ts"],"names":[],"mappings":";;;AACA,uEAEuC;AAGvC,yCAA8C;AAE9C,2EAAkE;AAGlE;;GAEG;AACH,MAAa,wBAAyB,SAAQ,sDAA+C;IAG3F,YAAmB,IAAmC;QACpD,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACvB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAAyB,EAAE,QAAwB;QAC5E,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CACvB,iBAAgC,EAChC,OAAuB;QAEvB,MAAM,OAAO,GAAiB,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,KAAK;aACrE,GAAG,CAAC,KAAK,EAAC,YAAY,EAAC,EAAE,CAAC,CAAC;YAC1B,MAAM,EAAE,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC;YACvF,SAAS,EAAE,YAAY;SACxB,CAAC,CAAC,CAAC,CAAC;aACJ,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;YAC/B,MAAM,EAAE,IAAA,uCAAe,EAAC,MAAM,CAAC;YAC/B,SAAS;SACV,CAAC,CAAC,CAAC;QAEN,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;IACxE,CAAC;CACF;AA3BD,4DA2BC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { MediatorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { IActionContext, IQueryOperationResult, IJoinEntry } from '@comunica/types';\nimport { getSafeBindings } from '@comunica/utils-query-operation';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Minus Query Operation Actor.\n */\nexport class ActorQueryOperationMinus extends ActorQueryOperationTypedMediated<Algebra.Minus> {\n  public readonly mediatorJoin: MediatorRdfJoin;\n\n  public constructor(args: IActorQueryOperationMinusArgs) {\n    super(args, 'minus');\n  }\n\n  public async testOperation(_operation: Algebra.Minus, _context: IActionContext): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async runOperation(\n    operationOriginal: Algebra.Minus,\n    context: IActionContext,\n  ): Promise<IQueryOperationResult> {\n    const entries: IJoinEntry[] = (await Promise.all(operationOriginal.input\n      .map(async subOperation => ({\n        output: await this.mediatorQueryOperation.mediate({ operation: subOperation, context }),\n        operation: subOperation,\n      }))))\n      .map(({ output, operation }) => ({\n        output: getSafeBindings(output),\n        operation,\n      }));\n\n    return this.mediatorJoin.mediate({ type: 'minus', entries, context });\n  }\n}\n\nexport interface IActorQueryOperationMinusArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * A mediator for joining Bindings streams\n   */\n  mediatorJoin: MediatorRdfJoin;\n}\n"]}