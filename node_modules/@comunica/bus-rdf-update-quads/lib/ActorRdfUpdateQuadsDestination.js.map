{"version":3,"file":"ActorRdfUpdateQuadsDestination.js","sourceRoot":"","sources":["ActorRdfUpdateQuadsDestination.ts"],"names":[],"mappings":";;;AAAA,+HAA4F;AAC5F,+DAAuG;AAEvG,yCAA8C;AAK9C,+DAA4D;AAG5D,SAAgB,iBAAiB,CAC/B,WAAgC,EAChC,MAA2C,EAC3C,EAAU;IAGV,OAAO,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAA,iEAAe,EAAC,WAAW,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;AACrE,CAAC;AAPD,8CAOC;AAED,SAAgB,WAAW,CAAC,MAA6B;IACvD,MAAM,WAAW,GAAwB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;IAC3F,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,oCAAkB,CAAC,WAAW,CAAC,CAAC;IACvE,MAAM,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAmB,yCAAuB,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC;IACrG,IAAI,CAAC,EAAE,EAAE,CAAC;QACR,OAAO,MAAM,CAAC;IAChB,CAAC;IACD,OAAO;QACL,GAAG,MAAM;QACT,gBAAgB,EAAE,iBAAiB,CAAC,WAAW,EAAE,MAAM,CAAC,gBAAgB,EAAE,EAAE,CAAC;QAC7E,gBAAgB,EAAE,iBAAiB,CAAC,WAAW,EAAE,MAAM,CAAC,gBAAgB,EAAE,EAAE,CAAC;KAC9E,CAAC;AACJ,CAAC;AAZD,kCAYC;AAED;;;;;GAKG;AACH,MAAsB,8BAA+B,SAAQ,yCAAmB;IACvE,KAAK,CAAC,IAAI,CAAC,OAA8B;QAC9C,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA6B;QAC5C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC9D,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;IAChE,CAAC;IAED;;;;OAIG;IACO,KAAK,CAAC,SAAS,CACvB,WAA6B,EAC7B,MAA6B;QAE7B,MAAM,OAAO,GAAG,KAAK,IAAkB,EAAE;YACvC,MAAM,WAAW,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,gBAAgB,EAAE,MAAM,EAAE,MAAM,CAAC,gBAAgB,EAAE,CAAC,CAAC;YAC/F,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;gBAC1B,WAAW,CAAC,YAAY,CACtB,MAAM,CAAC,YAAY,CAAC,MAAM,EAC1B,MAAM,CAAC,YAAY,CAAC,gBAAgB,EACpC,MAAM,CAAC,YAAY,CAAC,UAAU,CAC/B,CAAC,CAAC;gBACH,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;YACrB,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;gBAC1B,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBAC/F,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACvB,CAAC,CAAC;QACF,OAAO,EAAE,OAAO,EAAE,CAAC;IACrB,CAAC;CAQF;AAzCD,wEAyCC","sourcesContent":["import { deskolemizeQuad } from '@comunica/actor-context-preprocess-query-source-skolemize';\nimport { KeysInitQuery, KeysQuerySourceIdentify, KeysRdfUpdateQuads } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { ComunicaDataFactory, IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport type { IActionRdfUpdateQuads, IActorRdfUpdateQuadsOutput } from './ActorRdfUpdateQuads';\nimport { ActorRdfUpdateQuads } from './ActorRdfUpdateQuads';\nimport type { IQuadDestination } from './IQuadDestination';\n\nexport function deskolemizeStream(\n  dataFactory: ComunicaDataFactory,\n  stream: AsyncIterator<RDF.Quad> | undefined,\n  id: string,\n):\nAsyncIterator<RDF.Quad> | undefined {\n  return stream?.map(quad => deskolemizeQuad(dataFactory, quad, id));\n}\n\nexport function deskolemize(action: IActionRdfUpdateQuads): IActionRdfUpdateQuads {\n  const dataFactory: ComunicaDataFactory = action.context.getSafe(KeysInitQuery.dataFactory);\n  const destination = action.context.get(KeysRdfUpdateQuads.destination);\n  const id = action.context.get<Map<any, string>>(KeysQuerySourceIdentify.sourceIds)?.get(destination);\n  if (!id) {\n    return action;\n  }\n  return {\n    ...action,\n    quadStreamInsert: deskolemizeStream(dataFactory, action.quadStreamInsert, id),\n    quadStreamDelete: deskolemizeStream(dataFactory, action.quadStreamDelete, id),\n  };\n}\n\n/**\n * A base implementation for rdf-update-quads events\n * that wraps around an {@link IQuadDestination}.\n *\n * @see IQuadDestination\n */\nexport abstract class ActorRdfUpdateQuadsDestination extends ActorRdfUpdateQuads {\n  public async test(_action: IActionRdfUpdateQuads): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async run(action: IActionRdfUpdateQuads): Promise<IActorRdfUpdateQuadsOutput> {\n    const destination = await this.getDestination(action.context);\n    return await this.getOutput(destination, deskolemize(action));\n  }\n\n  /**\n   * Get the output of the given action on a destination.\n   * @param {IQuadDestination} destination A quad destination, possibly lazy.\n   * @param {IActionRdfUpdateQuads} action The action.\n   */\n  protected async getOutput(\n    destination: IQuadDestination,\n    action: IActionRdfUpdateQuads,\n  ): Promise<IActorRdfUpdateQuadsOutput> {\n    const execute = async(): Promise<void> => {\n      await destination.update({ insert: action.quadStreamInsert, delete: action.quadStreamDelete });\n      await (action.deleteGraphs ?\n        destination.deleteGraphs(\n          action.deleteGraphs.graphs,\n          action.deleteGraphs.requireExistence,\n          action.deleteGraphs.dropGraphs,\n        ) :\n        Promise.resolve());\n      await (action.createGraphs ?\n        destination.createGraphs(action.createGraphs.graphs, action.createGraphs.requireNonExistence) :\n        Promise.resolve());\n    };\n    return { execute };\n  }\n\n  /**\n   * Get a destination instance for the given context.\n   * @param {ActionContext} context Optional context data.\n   * @return {Promise<IQuadDestination>} A promise that resolves to a destination.\n   */\n  protected abstract getDestination(context: IActionContext): Promise<IQuadDestination>;\n}\n"]}