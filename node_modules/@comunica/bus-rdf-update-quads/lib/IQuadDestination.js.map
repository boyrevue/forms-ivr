{"version":3,"file":"IQuadDestination.js","sourceRoot":"","sources":["IQuadDestination.ts"],"names":[],"mappings":"","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\n\n/**\n * A quad destination.\n */\nexport interface IQuadDestination {\n  /**\n   * Updates destination with quad stream to insert and quad stream to delete.\n   * @param quadStreams The quads to insert and delete.\n   */\n  update: (quadStreams: { insert?: AsyncIterator<RDF.Quad>; delete?: AsyncIterator<RDF.Quad> }) => Promise<void>;\n  /**\n   * Graphs that should be deleted.\n   * @param graphs The graph(s) in which all triples must be removed.\n   * @param requireExistence If true, and any of the graphs does not exist, an error must be emitted.\n   *                         Should only be considered on destinations that record empty graphs.\n   * @param dropGraphs If the graphs themselves should also be dropped.\n   *                   Should not happen on the 'DEFAULT' graph.\n   *                   Should only be considered on destinations that record empty graphs.\n   */\n  deleteGraphs: (\n    graphs: RDF.DefaultGraph | 'NAMED' | 'ALL' | RDF.NamedNode[],\n    requireExistence: boolean,\n    dropGraphs: boolean,\n  ) => Promise<void>;\n  /**\n   * Create the given (empty) graphs.\n   * @param graphs The graph names to create.\n   * @param requireNonExistence If true, an error MUST be thrown when any of the graph already exists.\n   *                            For destinations that do not record empty graphs,\n   *                            this should only throw if at least one quad with the given quad already exists.\n   */\n  createGraphs: (graphs: RDF.NamedNode[], requireNonExistence: boolean) => Promise<void>;\n}\n"]}