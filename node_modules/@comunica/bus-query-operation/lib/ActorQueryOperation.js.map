{"version":3,"file":"ActorQueryOperation.js","sourceRoot":"","sources":["ActorQueryOperation.ts"],"names":[],"mappings":";;;AACA,yCAAuC;AAUvC;;;;;;;;;;GAUG;AACH,MAAsB,mBACpB,SAAQ,YAAmE;IAC3E,4BAA4B;IAC5B;;;;OAIG;IACH,2BAA2B;IAC3B,YAAsB,IAAkC;QACtD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;CACF;AAZD,kDAYC","sourcesContent":["import type { IActorArgs, IActorTest, IAction, Mediate } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type {\n  IQueryOperationResult,\n  Bindings,\n  IActionContext,\n  FunctionArgumentsCache,\n} from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica actor for query-operation events.\n *\n * Actor types:\n * * Input:  IActionQueryOperation:      A SPARQL Algebra operation.\n * * Test:   <none>\n * * Output: IActorQueryOperationOutput: A bindings stream.\n *\n * @see IActionQueryOperation\n * @see IQueryOperationResult\n */\nexport abstract class ActorQueryOperation<TS = undefined>\n  extends Actor<IActionQueryOperation, IActorTest, IQueryOperationResult, TS> {\n  /* eslint-disable max-len */\n  /**\n   * @param args -\n   *   \\ @defaultNested {<default_bus> a <cbqo:components/BusQueryOperation.jsonld#BusQueryOperation>} bus\n   *   \\ @defaultNested {Query operation processing failed: none of the configured actors were able to handle the operation type ${action.operation.type}} busFailMessage\n   */\n  /* eslint-enable max-len */\n  protected constructor(args: IActorQueryOperationArgs<TS>) {\n    super(args);\n  }\n}\n\nexport interface IActionQueryOperation extends IAction {\n  /**\n   * The query operation to handle.\n   */\n  operation: Algebra.Operation;\n}\n\nexport type IActorQueryOperationArgs<TS = undefined> = IActorArgs<\n  IActionQueryOperation,\nIActorTest,\nIQueryOperationResult,\nTS\n>;\n\nexport type MediatorQueryOperation = Mediate<IActionQueryOperation, IQueryOperationResult>;\n\nexport interface IBaseExpressionContext {\n  now?: Date;\n  baseIRI?: string;\n  extensionFunctionCreator?: (functionNamedNode: RDF.NamedNode) =>\n  ((args: RDF.Term[]) => Promise<RDF.Term>) | undefined;\n  functionArgumentsCache?: FunctionArgumentsCache;\n  actionContext: IActionContext;\n}\n\nexport interface ISyncExpressionContext extends IBaseExpressionContext {\n  bnode: (input?: string | undefined) => RDF.BlankNode;\n}\n\nexport interface IAsyncExpressionContext extends IBaseExpressionContext {\n  bnode: (input?: string | undefined) => Promise<RDF.BlankNode>;\n  exists?: (expr: Algebra.ExistenceExpression, bindings: Bindings) => Promise<boolean>;\n}\n\nexport type FragmentSelectorShapeTestFlags = {\n  joinBindings?: boolean;\n  filterBindings?: boolean;\n};\n"]}