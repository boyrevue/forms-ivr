{"version":3,"file":"ActorQueryParseGraphql.js","sourceRoot":"","sources":["ActorQueryParseGraphql.ts"],"names":[],"mappings":";;;AACA,+DAA4D;AAC5D,+DAA0D;AAE1D,yCAAwD;AACxD,yDAA8C;AAE9C;;GAEG;AACH,MAAa,sBAAuB,SAAQ,iCAAe;IAGzD,YAAmB,IAA0B;QAC3C,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,eAAe,GAAG,IAAI,6BAAS,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;IACjE,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAyB;QACzC,IAAI,MAAM,CAAC,WAAW,EAAE,QAAQ,KAAK,SAAS,EAAE,CAAC;YAC/C,OAAO,IAAA,eAAQ,EAAC,2CAA2C,CAAC,CAAC;QAC/D,CAAC;QACD,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAyB;QACxC,MAAM,OAAO,GAAQ,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;QAC3E,MAAM,OAAO,GAAG;YACd,4DAA4D;YAC5D,oBAAoB,EAAQ,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,2BAA2B,CAAC;SAC1F,CAAC;QACF,0BAA0B;QAC1B,OAAO,EAAE,SAAS,EAAE,MAAM,IAAI,CAAC,eAAe,CAAC,sBAAsB,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC;IAC1G,CAAC;CACF;AAxBD,wDAwBC","sourcesContent":["import type { IActionQueryParse, IActorQueryParseArgs, IActorQueryParseOutput } from '@comunica/bus-query-parse';\nimport { ActorQueryParse } from '@comunica/bus-query-parse';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { failTest, passTestVoid } from '@comunica/core';\nimport { Converter } from 'graphql-to-sparql';\n\n/**\n * A comunica GraphQL SPARQL Parse Actor.\n */\nexport class ActorQueryParseGraphql extends ActorQueryParse {\n  private readonly graphqlToSparql: Converter;\n\n  public constructor(args: IActorQueryParseArgs) {\n    super(args);\n    this.graphqlToSparql = new Converter({ requireContext: true });\n  }\n\n  public async test(action: IActionQueryParse): Promise<TestResult<IActorTest>> {\n    if (action.queryFormat?.language !== 'graphql') {\n      return failTest('This actor can only parse GraphQL queries');\n    }\n    return passTestVoid();\n  }\n\n  public async run(action: IActionQueryParse): Promise<IActorQueryParseOutput> {\n    const context: any = action.context.get(KeysInitQuery.jsonLdContext) || {};\n    const options = {\n      // eslint-disable-next-line ts/no-unnecessary-type-assertion\n      singularizeVariables: <any> action.context.get(KeysInitQuery.graphqlSingularizeVariables),\n    };\n    // TODO: pass data factory\n    return { operation: await this.graphqlToSparql.graphqlToSparqlAlgebra(action.query, context, options) };\n  }\n}\n"]}