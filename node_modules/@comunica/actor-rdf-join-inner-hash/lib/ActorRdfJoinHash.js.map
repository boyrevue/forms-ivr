{"version":3,"file":"ActorRdfJoinHash.js","sourceRoot":"","sources":["ActorRdfJoinHash.ts"],"names":[],"mappings":"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","sourcesContent":["import type { MediatorHashBindings } from '@comunica/bus-hash-bindings';\nimport type {\n  IActionRdfJoin,\n  IActorRdfJoinOutputInner,\n  IActorRdfJoinArgs,\n  IActorRdfJoinTestSideData,\n} from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport type { TestResult } from '@comunica/core';\nimport { passTestWithSideData } from '@comunica/core';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport type { Bindings, BindingsStream, IJoinEntry } from '@comunica/types';\nimport type { IBindingsIndex } from '@comunica/utils-bindings-index';\nimport { BindingsIndexUndef } from '@comunica/utils-bindings-index';\nimport { ClosableTransformIterator } from '@comunica/utils-iterator';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { ArrayIterator, MultiTransformIterator } from 'asynciterator';\nimport { HashJoin } from 'asyncjoin';\nimport { termToString } from 'rdf-string';\n\n/**\n * A comunica Hash RDF Join Actor.\n */\nexport class ActorRdfJoinHash extends ActorRdfJoin<IActorRdfJoinHashTestSideData> {\n  public readonly mediatorHashBindings: MediatorHashBindings;\n\n  public constructor(args: IActorRdfJoinHashArgs) {\n    super(args, {\n      logicalType: 'inner',\n      physicalName: `hash-${args.canHandleUndefs ? 'undef' : 'def'}`,\n      limitEntries: 2,\n      requiresVariableOverlap: true,\n      canHandleUndefs: args.canHandleUndefs,\n    });\n  }\n\n  public async getOutput(\n    action: IActionRdfJoin,\n    sideData: IActorRdfJoinHashTestSideData,\n  ): Promise<IActorRdfJoinOutputInner> {\n    const metadatas = sideData.metadatas;\n    let bindingsStream: BindingsStream;\n    const variables = ActorRdfJoin.overlappingVariables(metadatas);\n    if (this.canHandleUndefs) {\n      /* Handle undefined values in bindings */\n\n      const buffer = sideData.entriesSorted[0].output;\n      const output = sideData.entriesSorted[1].output;\n      bindingsStream = new ClosableTransformIterator(async() => {\n        // We index all bindings from the left-hand iterator first in a blocking manner.\n        const index: IBindingsIndex<RDF.Bindings[]> = new BindingsIndexUndef(\n          variables,\n          (term: RDF.Term | undefined) => term && term.termType !== 'Variable' ? termToString(term) : '',\n          true,\n        );\n        await new Promise((resolve) => {\n          buffer.bindingsStream.on('data', (bindings) => {\n            const iterator = index.getFirst(bindings, false) ?? index.put(bindings, []);\n            iterator.push(bindings);\n          });\n          buffer.bindingsStream.on('end', resolve);\n          buffer.bindingsStream.on('error', (error) => {\n            bindingsStream.emit('error', error);\n          });\n        });\n\n        // Start our left-hand iterator and try to join with the index\n        return new MultiTransformIterator(\n          output.bindingsStream,\n          {\n            multiTransform: (bindings: RDF.Bindings): AsyncIterator<RDF.Bindings> => new ArrayIterator<RDF.Bindings>(\n              <RDF.Bindings[]>(index.get(bindings).flat())\n                .map(indexBindings => ActorRdfJoin.joinBindings(bindings, indexBindings))\n                .filter(b => b !== null),\n              { autoStart: false },\n            ),\n            autoStart: false,\n          },\n        );\n      }, {\n        autoStart: false,\n        onClose() {\n          buffer.bindingsStream.destroy();\n          output.bindingsStream.destroy();\n        },\n      });\n    } else {\n      /* Don't handle undefined values in bindings */\n      const { hashFunction } = await this.mediatorHashBindings.mediate({ context: action.context });\n      const variablesRaw = variables.map(v => v.variable);\n      bindingsStream = new HashJoin<Bindings, number, Bindings>(\n        sideData.entriesSorted[0].output.bindingsStream,\n        sideData.entriesSorted[1].output.bindingsStream,\n        entry => hashFunction(entry, variablesRaw),\n        <any> ActorRdfJoin.joinBindings,\n      );\n    }\n    return {\n      result: {\n        type: 'bindings',\n        bindingsStream,\n        metadata: async() => await this.constructResultMetadata(sideData.entriesSorted, metadatas, action.context),\n      },\n    };\n  }\n\n  protected async getJoinCoefficients(\n    action: IActionRdfJoin,\n    sideData: IActorRdfJoinTestSideData,\n  ): Promise<TestResult<IMediatorTypeJoinCoefficients, IActorRdfJoinHashTestSideData>> {\n    // Ensure the left build stream is the smallest\n    let entriesSorted = action.entries;\n    if (sideData.metadatas[1].cardinality.value < sideData.metadatas[0].cardinality.value) {\n      sideData.metadatas = [ sideData.metadatas[1], sideData.metadatas[0] ];\n      entriesSorted = [ action.entries[1], action.entries[0] ];\n    }\n\n    const { metadatas } = sideData;\n    const requestInitialTimes = ActorRdfJoin.getRequestInitialTimes(metadatas);\n    const requestItemTimes = ActorRdfJoin.getRequestItemTimes(metadatas);\n    let iterations = metadatas[0].cardinality.value + metadatas[1].cardinality.value;\n    if (!this.canHandleUndefs) {\n      // Our non-undef implementation is slightly more performant.\n      iterations *= 0.8;\n    }\n    return passTestWithSideData({\n      iterations,\n      persistedItems: metadatas[0].cardinality.value,\n      blockingItems: metadatas[0].cardinality.value,\n      requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] +\n        requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1],\n    }, { ...sideData, entriesSorted });\n  }\n}\n\nexport interface IActorRdfJoinHashArgs extends IActorRdfJoinArgs<IActorRdfJoinHashTestSideData> {\n  /**\n   * The mediator for hashing bindings.\n   */\n  mediatorHashBindings: MediatorHashBindings;\n  /**\n   * If this actor can handle undefined values.\n   * If false, performance will be slightly better.\n   */\n  canHandleUndefs: boolean;\n}\n\nexport interface IActorRdfJoinHashTestSideData extends IActorRdfJoinTestSideData {\n  entriesSorted: IJoinEntry[];\n}\n"]}