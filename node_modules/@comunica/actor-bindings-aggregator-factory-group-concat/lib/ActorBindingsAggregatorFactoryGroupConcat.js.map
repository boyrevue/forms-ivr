{"version":3,"file":"ActorBindingsAggregatorFactoryGroupConcat.js","sourceRoot":"","sources":["ActorBindingsAggregatorFactoryGroupConcat.ts"],"names":[],"mappings":";;;AAKA,+FAA2F;AAC3F,+DAA0D;AAE1D,yCAAwD;AACxD,mEAAgE;AAEhE;;GAEG;AACH,MAAa,yCAA0C,SAAQ,gEAA8B;IAC3F,YAAmB,IAAyC;QAC1D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAwC;QACxD,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,KAAK,cAAc,EAAE,CAAC;YAC9C,OAAO,IAAA,eAAQ,EAAC,2DAA2D,CAAC,CAAC;QAC/E,CAAC;QACD,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,IAAI,EAAoC;QAElE,OAAO,IAAI,6CAAqB,CAC9B,MAAM,IAAI,CAAC,kCAAkC,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC,EAC5F,IAAI,CAAC,QAAQ,EACb,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,EAC1C,IAAI,CAAC,SAAS,CACf,CAAC;IACJ,CAAC;CACF;AArBD,8FAqBC","sourcesContent":["import type {\n  IActionBindingsAggregatorFactory,\n  IActorBindingsAggregatorFactoryArgs,\n  IActorBindingsAggregatorFactoryOutput,\n} from '@comunica/bus-bindings-aggregator-factory';\nimport { ActorBindingsAggregatorFactory } from '@comunica/bus-bindings-aggregator-factory';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { failTest, passTestVoid } from '@comunica/core';\nimport { GroupConcatAggregator } from './GroupConcatAggregator';\n\n/**\n * A comunica Group Concat Expression Evaluator Aggregate Actor.\n */\nexport class ActorBindingsAggregatorFactoryGroupConcat extends ActorBindingsAggregatorFactory {\n  public constructor(args: IActorBindingsAggregatorFactoryArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionBindingsAggregatorFactory): Promise<TestResult<IActorTest>> {\n    if (action.expr.aggregator !== 'group_concat') {\n      return failTest('This actor only supports the \\'group_concat\\' aggregator.');\n    }\n    return passTestVoid();\n  }\n\n  public async run({ context, expr }: IActionBindingsAggregatorFactory):\n  Promise<IActorBindingsAggregatorFactoryOutput> {\n    return new GroupConcatAggregator(\n      await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr.expression, context }),\n      expr.distinct,\n      context.getSafe(KeysInitQuery.dataFactory),\n      expr.separator,\n    );\n  }\n}\n"]}