{"version":3,"file":"ActorOptimizeQueryOperationRewriteAdd.js","sourceRoot":"","sources":["ActorOptimizeQueryOperationRewriteAdd.ts"],"names":[],"mappings":";;;AAKA,yFAAqF;AACrF,+DAA0D;AAE1D,yCAA8C;AAG9C,uDAA+C;AAC/C,qDAAyD;AAEzD,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAgB,CAAC;AAE3C;;GAEG;AACH,MAAa,qCAAsC,SAAQ,0DAA2B;IACpF,YAAmB,IAAsC;QACvD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAAsC;QACtD,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAqC;QACpD,MAAM,WAAW,GAAwB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QAC3F,MAAM,cAAc,GAAG,IAAI,yBAAO,CAAC,WAAW,CAAC,CAAC;QAEhD,MAAM,SAAS,GAAG,sBAAI,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,EAAE;YACpD,CAAC,yBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,iBAAiB,EAAE,OAAO;gBAC5C,4EAA4E;gBAC5E,MAAM,WAAW,GAAG,iBAAiB,CAAC,WAAW,KAAK,SAAS,CAAC,CAAC;oBAC/D,EAAE,CAAC,YAAY,EAAE,CAAC,CAAC;oBACnB,iBAAiB,CAAC,WAAW,CAAC;gBAChC,MAAM,MAAM,GAAG,iBAAiB,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC;gBAErG,MAAM,MAAM,GAAG,OAAO,CAAC,kBAAkB,CAAC,SAAS,EAAE;oBACnD,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC;iBACzF,EAAE,OAAO,CAAC,aAAa,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;gBAExF,OAAO;oBACL,MAAM;oBACN,OAAO,EAAE,KAAK;iBACf,CAAC;YACJ,CAAC;SACF,EAAE,cAAc,CAAC,CAAC;QAEnB,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC;IAChD,CAAC;CACF;AAlCD,sFAkCC","sourcesContent":["import type {\n  IActionOptimizeQueryOperation,\n  IActorOptimizeQueryOperationOutput,\n  IActorOptimizeQueryOperationArgs,\n} from '@comunica/bus-optimize-query-operation';\nimport { ActorOptimizeQueryOperation } from '@comunica/bus-optimize-query-operation';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { ComunicaDataFactory } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport { Algebra, Factory, Util } from 'sparqlalgebrajs';\n\nconst DF = new DataFactory<RDF.BaseQuad>();\n\n/**\n * A comunica Rewrite Add Optimize Query Operation Actor.\n */\nexport class ActorOptimizeQueryOperationRewriteAdd extends ActorOptimizeQueryOperation {\n  public constructor(args: IActorOptimizeQueryOperationArgs) {\n    super(args);\n  }\n\n  public async test(_action: IActionOptimizeQueryOperation): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async run(action: IActionOptimizeQueryOperation): Promise<IActorOptimizeQueryOperationOutput> {\n    const dataFactory: ComunicaDataFactory = action.context.getSafe(KeysInitQuery.dataFactory);\n    const algebraFactory = new Factory(dataFactory);\n\n    const operation = Util.mapOperation(action.operation, {\n      [Algebra.types.ADD](operationOriginal, factory) {\n        // CONSTRUCT all quads from the source, and INSERT them into the destination\n        const destination = operationOriginal.destination === 'DEFAULT' ?\n          DF.defaultGraph() :\n          operationOriginal.destination;\n        const source = operationOriginal.source === 'DEFAULT' ? DF.defaultGraph() : operationOriginal.source;\n\n        const result = factory.createDeleteInsert(undefined, [\n          factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), destination),\n        ], factory.createPattern(DF.variable('s'), DF.variable('p'), DF.variable('o'), source));\n\n        return {\n          result,\n          recurse: false,\n        };\n      },\n    }, algebraFactory);\n\n    return { operation, context: action.context };\n  }\n}\n"]}