{"version":3,"file":"ActorQueryOperationValues.js","sourceRoot":"","sources":["ActorQueryOperationValues.ts"],"names":[],"mappings":";;;AAEA,uEAAyE;AACzE,+DAA0D;AAE1D,yCAA8C;AAS9C,6EAAmE;AACnE,6DAAmE;AACnE,iDAA8C;AAG9C;;GAEG;AACH,MAAa,yBAA0B,SAAQ,8CAAwC;IAGrF,YAAmB,IAAgD;QACjE,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAA0B,EAAE,QAAwB;QAC7E,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAyB,EAAE,OAAuB;QAE1E,MAAM,WAAW,GAAwB,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QACpF,MAAM,eAAe,GAAG,MAAM,wCAAe,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;QAE9G,MAAM,cAAc,GAAmB,IAAI,6BAAa,CAAW,SAAS,CAAC,QAAQ;aAClF,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;aACjD,GAAG,CAAC,CAAC,CAAE,GAAG,EAAE,KAAK,CAAE,EAAE,EAAE,CAAC,CAAE,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/E,MAAM,QAAQ,GAAG,GAA8B,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;YAChE,KAAK,EAAE,IAAI,wCAAuB,EAAE;YACpC,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE;YAChE,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;gBAC9C,QAAQ;gBACR,UAAU,EAAE,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,EAAE,IAAI,QAAQ,CAAC,CAAC;aACrF,CAAC,CAAC;SACJ,CAAC,CAAC;QACH,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAE,CAAC;IACxD,CAAC;CACF;AA7BD,8DA6BC","sourcesContent":["import type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { IActionQueryOperation } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTyped } from '@comunica/bus-query-operation';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorArgs, IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type {\n  IQueryOperationResult,\n  BindingsStream,\n  Bindings,\n  IActionContext,\n  MetadataBindings,\n  ComunicaDataFactory,\n} from '@comunica/types';\nimport { BindingsFactory } from '@comunica/utils-bindings-factory';\nimport { MetadataValidationState } from '@comunica/utils-metadata';\nimport { ArrayIterator } from 'asynciterator';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Values Query Operation Actor.\n */\nexport class ActorQueryOperationValues extends ActorQueryOperationTyped<Algebra.Values> {\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  public constructor(args: IActorQueryOperationUpdateDeleteInsertArgs) {\n    super(args, 'values');\n  }\n\n  public async testOperation(_operation: Algebra.Values, _context: IActionContext): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async runOperation(operation: Algebra.Values, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    const dataFactory: ComunicaDataFactory = context.getSafe(KeysInitQuery.dataFactory);\n    const bindingsFactory = await BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory);\n\n    const bindingsStream: BindingsStream = new ArrayIterator<Bindings>(operation.bindings\n      .map(x => bindingsFactory.bindings(Object.entries(x)\n        .map(([ key, value ]) => [ dataFactory.variable(key.slice(1)), value ]))));\n    const metadata = (): Promise<MetadataBindings> => Promise.resolve({\n      state: new MetadataValidationState(),\n      cardinality: { type: 'exact', value: operation.bindings.length },\n      variables: operation.variables.map(variable => ({\n        variable,\n        canBeUndef: operation.bindings.some(bindings => !(`?${variable.value}` in bindings)),\n      })),\n    });\n    return { type: 'bindings', bindingsStream, metadata };\n  }\n}\n\nexport interface IActorQueryOperationUpdateDeleteInsertArgs extends\n  IActorArgs<IActionQueryOperation, IActorTest, IQueryOperationResult> {\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n"]}