{"version":3,"file":"Context.js","sourceRoot":"","sources":["Context.ts"],"names":[],"mappings":";;;AAAA,+DAAmF;AAGnF,yCAAqC;AACrC,uDAAoD;AAEpD,SAAgB,6BAA6B,CAAC,UAA0B;IACtE,IAAI,OAAO,GAAG,UAAU,CAAC;IAEzB,uDAAuD;IACvD,IAAI,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,wBAAwB,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,kBAAkB,CAAC,EAAE,CAAC;QACzG,MAAM,IAAI,KAAK,CAAC,0FAA0F,CAAC,CAAC;IAC9G,CAAC;IACD,IAAI,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,wBAAwB,CAAC,EAAE,CAAC;QACxD,OAAO,GAAG,OAAO,CAAC,GAAG,CACnB,yCAAuB,CAAC,wBAAwB,EAChD,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,wBAAwB,CAAC,CACpD,CAAC;IACJ,CAAC;SAAM,IAAI,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,kBAAkB,CAAC,EAAE,CAAC;QACzD,MAAM,kBAAkB,GAA2C,OAAO,CAAC,OAAO,CAChF,+BAAa,CAAC,kBAAkB,CACjC,CAAC;QACF,OAAO,GAAG,OAAO,CAAC,GAAG,CACnB,yCAAuB,CAAC,wBAAwB,EAChD,KAAK,EAAC,iBAAgC,EAAE,EAAE,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CACvF,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,wDAAwD;QACxD,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,yCAAuB,CAAC,wBAAwB,EAAE,KAAK,IAAG,EAAE,CAAC,SAAS,CAAC,CAAC;IACvG,CAAC;IAED,OAAO,GAAG,OAAO,CAAC,UAAU,CAC1B,yCAAuB,CAAC,eAAe,EACvC,IAAA,iCAAe,EAAC,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,cAAc,CAAC,CAAC,CAC/D,CAAC;IAEF,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,yCAAuB,CAAC,iBAAiB,EAAE;QACtE,KAAK,EAAE,IAAI,oBAAQ,CAA+B,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;QACjE,UAAU,EAAE,GAAG,EAAE,CAAC,MAAM;KACzB,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC;AApCD,sEAoCC","sourcesContent":["import { KeysExpressionEvaluator, KeysInitQuery } from '@comunica/context-entries';\nimport type { AsyncExtensionFunction, GeneralSuperTypeDict, IActionContext } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { LRUCache } from 'lru-cache';\nimport { extractTimeZone } from './DateTimeHelpers';\n\nexport function prepareEvaluatorActionContext(orgContext: IActionContext): IActionContext {\n  let context = orgContext;\n\n  // Handle two variants of providing extension functions\n  if (context.has(KeysInitQuery.extensionFunctionCreator) && context.has(KeysInitQuery.extensionFunctions)) {\n    throw new Error('Illegal simultaneous usage of extensionFunctionCreator and extensionFunctions in context');\n  }\n  if (context.has(KeysInitQuery.extensionFunctionCreator)) {\n    context = context.set(\n      KeysExpressionEvaluator.extensionFunctionCreator,\n      context.get(KeysInitQuery.extensionFunctionCreator),\n    );\n  } else if (context.has(KeysInitQuery.extensionFunctions)) {\n    const extensionFunctions: Record<string, AsyncExtensionFunction> = context.getSafe(\n      KeysInitQuery.extensionFunctions,\n    );\n    context = context.set(\n      KeysExpressionEvaluator.extensionFunctionCreator,\n      async(functionNamedNode: RDF.NamedNode) => extensionFunctions[functionNamedNode.value],\n    );\n  } else {\n    // eslint-disable-next-line unicorn/no-useless-undefined\n    context = context.setDefault(KeysExpressionEvaluator.extensionFunctionCreator, async() => undefined);\n  }\n\n  context = context.setDefault(\n    KeysExpressionEvaluator.defaultTimeZone,\n    extractTimeZone(context.getSafe(KeysInitQuery.queryTimestamp)),\n  );\n\n  context = context.setDefault(KeysExpressionEvaluator.superTypeProvider, {\n    cache: new LRUCache<string, GeneralSuperTypeDict>({ max: 1_000 }),\n    discoverer: () => 'term',\n  });\n\n  return context;\n}\n"]}