{"version":3,"file":"ActorFunctionFactoryExpressionIn.js","sourceRoot":"","sources":["ActorFunctionFactoryExpressionIn.ts"],"names":[],"mappings":";;;AASA,yEAEwC;AAExC,qFAAsE;AACtE,iEAA8D;AAM9D;;GAEG;AACH,MAAa,gCAAiC,SAAQ,oDAA6B;IAGjF,YAAmB,IAAmD;QACpE,KAAK,CAAC;YACJ,GAAG,IAAI;YACP,aAAa,EAAE,CAAE,2CAAc,CAAC,EAAE,CAAE;YACpC,YAAY,EAAE,KAAK;SACpB,CAAC,CAAC;QACH,IAAI,CAAC,uBAAuB,GAA6B,IAAI,CAAC,uBAAuB,CAAC;IACxF,CAAC;IAEM,KAAK,CAAC,GAAG,CAAmC,IAAO;QAExD,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC;YAClE,YAAY,EAAE,2CAAc,CAAC,KAAK;YAClC,qBAAqB,EAAE,IAAI;YAC3B,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC;QAEH,OAGwB,IAAI,2CAAoB,CAAC,gBAAgB,CAAC,CAAC;IACrE,CAAC;CACF;AA1BD,4EA0BC","sourcesContent":["import type {\n  IActionFunctionFactory,\n  IActorFunctionFactoryArgs,\n  IActorFunctionFactoryOutput,\n  IActorFunctionFactoryOutputTerm,\n  IExpressionFunction,\n  MediatorFunctionFactory,\n  MediatorFunctionFactoryUnsafe,\n} from '@comunica/bus-function-factory';\nimport {\n  ActorFunctionFactoryDedicated,\n} from '@comunica/bus-function-factory';\n\nimport { SparqlOperator } from '@comunica/utils-expression-evaluator';\nimport { ExpressionFunctionIn } from './ExpressionFunctionIn';\n\ninterface IActorFunctionFactoryExpressionFunctionInArgs extends IActorFunctionFactoryArgs {\n  mediatorFunctionFactory: MediatorFunctionFactoryUnsafe;\n}\n\n/**\n * A comunica ExpressionFunctionIn Function Factory Actor.\n */\nexport class ActorFunctionFactoryExpressionIn extends ActorFunctionFactoryDedicated {\n  private readonly mediatorFunctionFactory: MediatorFunctionFactory;\n\n  public constructor(args: IActorFunctionFactoryExpressionFunctionInArgs) {\n    super({\n      ...args,\n      functionNames: [ SparqlOperator.IN ],\n      termFunction: false,\n    });\n    this.mediatorFunctionFactory = <MediatorFunctionFactory> args.mediatorFunctionFactory;\n  }\n\n  public async run<T extends IActionFunctionFactory>(args: T):\n  Promise<T extends { requireTermExpression: true } ? IActorFunctionFactoryOutputTerm : IActorFunctionFactoryOutput> {\n    const equalityFunction = await this.mediatorFunctionFactory.mediate({\n      functionName: SparqlOperator.EQUAL,\n      requireTermExpression: true,\n      context: args.context,\n      arguments: args.arguments,\n    });\n\n    return <T extends { requireTermExpression: true } ?\n      IActorFunctionFactoryOutputTerm :\n      IActorFunctionFactoryOutput>\n      <IExpressionFunction> new ExpressionFunctionIn(equalityFunction);\n  }\n}\n"]}