{"version":3,"file":"ExpressionFunctionIn.js","sourceRoot":"","sources":["ExpressionFunctionIn.ts"],"names":[],"mappings":";;;AACA,yEAAwE;AAKxE,qFAI8C;AAE9C;;;GAGG;AACH,MAAa,oBAAqB,SAAQ,6CAAsB;IAC9D,YAAoC,gBAA+B;QACjE,KAAK,CAAC;YACJ,KAAK,EAAE,MAAM,CAAC,iBAAiB;YAC/B,QAAQ,EAAE,2CAAc,CAAC,EAAE;YAC3B,KAAK,EAAE,KAAK,EAAC,OAAqB,EAA2B,EAAE;gBAC7D,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;gBAC5C,MAAM,CAAE,QAAQ,EAAE,GAAG,SAAS,CAAE,GAAG,IAAI,CAAC;gBACxC,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,6BAA6B,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBAC7E,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,GAAG,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;YAC3E,CAAC;SACF,CAAC,CAAC;QAV+B,qBAAgB,GAAhB,gBAAgB,CAAe;IAWnE,CAAC;IAEe,UAAU,CAAC,IAAkB;QAC3C,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IACzB,CAAC;IAEO,KAAK,CAAC,WAAW,CACvB,MAAsB,EACtB,OAAqB,EACrB,OAA0B;QAE1B,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC;QAC5C,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtB,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;YAC5C,OAAO,QAAQ,CAAC,CAAC,CAAC,IAAA,iCAAI,EAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,oCAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QACvE,CAAC;QAED,IAAI,CAAC;YACH,wEAAwE;YACxE,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,EAAG,CAAC;YACrC,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,6BAA6B,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;YACnF,IAAsB,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAE,MAAM,EAAE,IAAI,CAAE,EAAE,QAAQ,CAAE,CAAC,UAAU,EAAE,CAAC;gBACjG,OAAO,IAAA,iCAAI,EAAC,IAAI,CAAC,CAAC;YACpB,CAAC;YACD,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,EAAE,CAAE,GAAG,OAAO,EAAE,KAAK,CAAE,CAAC,CAAC;QAClE,CAAC;QAAC,OAAO,KAAc,EAAE,CAAC;YACxB,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,EAAE,CAAE,GAAG,OAAO,EAAU,KAAK,CAAE,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;CACF;AAzCD,oDAyCC","sourcesContent":["import type { ITermFunction } from '@comunica/bus-function-factory';\nimport { ExpressionFunctionBase } from '@comunica/bus-function-factory';\nimport type { Expression, IEvalContext, TermExpression } from '@comunica/types';\nimport type {\n  BooleanLiteral,\n} from '@comunica/utils-expression-evaluator';\nimport {\n  bool,\n  InError,\n  SparqlOperator,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-in\n * This function doesn't require type promotion or subtype-substitution, everything works on TermExpression\n */\nexport class ExpressionFunctionIn extends ExpressionFunctionBase {\n  public constructor(private readonly equalityFunction: ITermFunction) {\n    super({\n      arity: Number.POSITIVE_INFINITY,\n      operator: SparqlOperator.IN,\n      apply: async(context: IEvalContext): Promise<TermExpression> => {\n        const { args, mapping, exprEval } = context;\n        const [ leftExpr, ...remaining ] = args;\n        const left = await exprEval.evaluatorExpressionEvaluation(leftExpr, mapping);\n        return await this.inRecursive(left, { ...context, args: remaining }, []);\n      },\n    });\n  }\n\n  public override checkArity(args: Expression[]): boolean {\n    return args.length > 0;\n  }\n\n  private async inRecursive(\n    needle: TermExpression,\n    context: IEvalContext,\n    results: (Error | false)[],\n  ): Promise<TermExpression> {\n    const { args, mapping, exprEval } = context;\n    if (args.length === 0) {\n      const noErrors = results.every(val => !val);\n      return noErrors ? bool(false) : Promise.reject(new InError(results));\n    }\n\n    try {\n      // We know this will not be undefined because we check args.length === 0\n      const nextExpression = args.shift()!;\n      const next = await exprEval.evaluatorExpressionEvaluation(nextExpression, mapping);\n      if ((<BooleanLiteral> this.equalityFunction.applyOnTerms([ needle, next ], exprEval)).typedValue) {\n        return bool(true);\n      }\n      return this.inRecursive(needle, context, [ ...results, false ]);\n    } catch (error: unknown) {\n      return this.inRecursive(needle, context, [ ...results, <Error> error ]);\n    }\n  }\n}\n"]}