{"version":3,"file":"ActorRdfUpdateHypermediaPatchSparqlUpdate.js","sourceRoot":"","sources":["ActorRdfUpdateHypermediaPatchSparqlUpdate.ts"],"names":[],"mappings":";;;AAMA,mFAA+E;AAE/E,yCAAwD;AACxD,yFAAsF;AAEtF;;GAEG;AACH,MAAa,yCAA0C,SAAQ,oDAAwB;IAGrF,YAAmB,IAAoD;QACrE,KAAK,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,MAAkC;QAC1D,IAAI,CAAC,MAAM,CAAC,oBAAoB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC;YACvE,OAAO,IAAA,eAAQ,EAAC,SAAS,IAAI,CAAC,IAAI,4FAA4F,CAAC,CAAC;QAClI,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,oBAAoB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACnD,OAAO,IAAA,eAAQ,EAAC,SAAS,IAAI,CAAC,IAAI,oDAAoD,CAAC,CAAC;QAC1F,CAAC;QACD,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAkC;QACjD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,gDAAgD,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QAC3F,OAAO;YACL,WAAW,EAAE,IAAI,mEAAgC,CAC/C,MAAM,CAAC,GAAG,EACV,MAAM,CAAC,OAAO,EACd,IAAI,CAAC,YAAY,CAClB;SACF,CAAC;IACJ,CAAC;CACF;AA3BD,8FA2BC","sourcesContent":["import type { MediatorHttp } from '@comunica/bus-http';\nimport type {\n  IActionRdfUpdateHypermedia,\n  IActorRdfUpdateHypermediaArgs,\n  IActorRdfUpdateHypermediaOutput,\n} from '@comunica/bus-rdf-update-hypermedia';\nimport { ActorRdfUpdateHypermedia } from '@comunica/bus-rdf-update-hypermedia';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { failTest, passTestVoid } from '@comunica/core';\nimport { QuadDestinationPatchSparqlUpdate } from './QuadDestinationPatchSparqlUpdate';\n\n/**\n * A comunica Patch SPARQL Update RDF Update Hypermedia Actor.\n */\nexport class ActorRdfUpdateHypermediaPatchSparqlUpdate extends ActorRdfUpdateHypermedia {\n  public readonly mediatorHttp: MediatorHttp;\n\n  public constructor(args: IActorRdfUpdateHypermediaPatchSparqlUpdateArgs) {\n    super(args, 'patchSparqlUpdate');\n  }\n\n  public async testMetadata(action: IActionRdfUpdateHypermedia): Promise<TestResult<IActorTest>> {\n    if (!action.forceDestinationType && !action.metadata.patchSparqlUpdate) {\n      return failTest(`Actor ${this.name} could not detect a destination with 'application/sparql-update' as 'Accept-Patch' header.`);\n    }\n    if (!action.forceDestinationType && !action.exists) {\n      return failTest(`Actor ${this.name} can only patch a destination that already exists.`);\n    }\n    return passTestVoid();\n  }\n\n  public async run(action: IActionRdfUpdateHypermedia): Promise<IActorRdfUpdateHypermediaOutput> {\n    this.logInfo(action.context, `Identified as patchSparqlUpdate destination: ${action.url}`);\n    return {\n      destination: new QuadDestinationPatchSparqlUpdate(\n        action.url,\n        action.context,\n        this.mediatorHttp,\n      ),\n    };\n  }\n}\n\nexport interface IActorRdfUpdateHypermediaPatchSparqlUpdateArgs extends IActorRdfUpdateHypermediaArgs {\n  /**\n   * The HTTP mediator\n   */\n  mediatorHttp: MediatorHttp;\n}\n"]}