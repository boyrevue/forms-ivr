{"version":3,"file":"Runner.js","sourceRoot":"","sources":["Runner.ts"],"names":[],"mappings":";;;AAGA;;;;;;;GAOG;AACH,MAAa,MAAM;IACjB,4BAA4B;IAC5B;;;OAGG;IACH,YACkB,OAAmG,EACnG,MAAuD;QADvD,YAAO,GAAP,OAAO,CAA4F;QACnG,WAAM,GAAN,MAAM,CAAiD;QAEvE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;QAClE,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IACD,2BAA2B;IAE3B;;;;;OAKG;IACI,KAAK,CAAC,GAAG,CAAC,MAAmB;QAClC,MAAM,OAAO,GACX,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QAClD,wDAAwD;QACxD,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;IACzF,CAAC;IAED;;;;;;;;;;;;;OAaG;IACI,aAAa,CAAC,gBAAwC;QAE3D,MAAM,MAAM,GAAkE,EAAE,CAAC;QAEjF,8BAA8B;QAC9B,KAAK,MAAM,GAAG,IAAI,gBAAgB,EAAE,CAAC;YACnC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBAChC,IAAI,KAAK,CAAC,IAAI,KAAK,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC;oBACzC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBACtB,CAAC;YACH,CAAC;QACH,CAAC;QAED,iCAAiC;QACjC,KAAK,MAAM,GAAG,IAAI,gBAAgB,EAAE,CAAC;YACnC,IAAI,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC;gBACrB,MAAM,IAAI,KAAK,CAAC,oBAAoB,GAAG,sBAAsB,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACzF,CAAC;QACH,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AApED,wBAoEC","sourcesContent":["import type { ActorInit, IActionInit, IActorOutputInit } from '@comunica/bus-init';\nimport type { Actor, Bus, IAction, IActorOutput, IActorReply, IActorTest } from '@comunica/core';\n\n/**\n * A Runner is used to instantiate a comunica workflow.\n *\n * It is instantiated dynamically using a Components.js config file.\n * A bus and a list of actors are injected into this runner dynamically.\n *\n * The {@link Runner#run} function must be called to instantiate the workflow.\n */\nexport class Runner {\n  /* eslint-disable max-len */\n  /**\n   * @param busInit - The 'init' event bus. @default {<npmd:@comunica/bus-init/^4.0.0/components/ActorInit.jsonld#ActorInit_default_bus>}\n   * @param actors - The list of all actors that are part of the comunica workflow.\n   */\n  public constructor(\n    public readonly busInit: Bus<Actor<IAction, IActorTest, IActorOutput, any>, IAction, IActorTest, IActorOutput, any>,\n    public readonly actors: Actor<IAction, IActorTest, IActorOutput, any>[],\n  ) {\n    if (!this.busInit) {\n      throw new Error('A valid \"busInit\" argument must be provided.');\n    }\n    if (!this.actors) {\n      throw new Error('A valid \"actors\" argument must be provided.');\n    }\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Run a comunica workflow.\n   *\n   * @param {IActionInit} action An 'init' action.\n   * @return {Promise<void>}     A promise that resolves when the init actors are triggered.\n   */\n  public async run(action: IActionInit): Promise<IActorOutputInit[]> {\n    const replies: IActorReply<ActorInit, IActionInit, IActorTest, IActorOutputInit, any>[] =\n      await Promise.all(this.busInit.publish(action));\n    // eslint-disable-next-line unicorn/no-useless-undefined\n    return Promise.all(replies.map(reply => reply.actor.runObservable(action, undefined)));\n  }\n\n  /**\n   * Collect the given actors that are available in this runner.\n   *\n   * Example:\n   * <pre>\n   *   const { engine } = runner.collectActors({ engine: 'urn:comunica:default:init/actors#query' };\n   *   // engine is an actor instance\n   * </pre>\n   *\n   * An error will be thrown if any of the actors could not be found in the runner.\n   *\n   * @param actorIdentifiers A mapping of keys to actor identifiers.\n   * @return A mapping of keys to actor instances.\n   */\n  public collectActors(actorIdentifiers: Record<string, string>):\n  Record<string, Actor<IAction, IActorTest, IActorOutput, any>> {\n    const actors: Record<string, Actor<IAction, IActorTest, IActorOutput, any>> = {};\n\n    // Collect all required actors\n    for (const key in actorIdentifiers) {\n      for (const actor of this.actors) {\n        if (actor.name === actorIdentifiers[key]) {\n          actors[key] = actor;\n        }\n      }\n    }\n\n    // Error if we are missing actors\n    for (const key in actorIdentifiers) {\n      if (!(key in actors)) {\n        throw new Error(`No actor for key ${key} was found for IRI ${actorIdentifiers[key]}.`);\n      }\n    }\n\n    return actors;\n  }\n}\n"]}