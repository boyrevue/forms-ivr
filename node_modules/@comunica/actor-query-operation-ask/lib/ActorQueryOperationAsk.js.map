{"version":3,"file":"ActorQueryOperationAsk.js","sourceRoot":"","sources":["ActorQueryOperationAsk.ts"],"names":[],"mappings":";;;AACA,uEAAiF;AAEjF,yCAA8C;AAM9C,2EAAkE;AAGlE;;GAEG;AACH,MAAa,sBAAuB,SAAQ,sDAA6C;IACvF,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAAuB,EAAE,QAAwB;QAC1E,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAsB,EAAE,OAAuB;QACvE,yCAAyC;QACzC,MAAM,MAAM,GAA0B,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAC7E,EAAE,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,CACxC,CAAC;QACF,MAAM,EAAE,cAAc,EAAE,GAAkC,IAAA,uCAAe,EAAC,MAAM,CAAC,CAAC;QAClF,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,KAAK,IAAG,EAAE,CAAC,CAAC,MAAM,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;IACxG,CAAC;CACF;AAjBD,wDAiBC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type {\n  IActionContext,\n  IQueryOperationResult,\n  IQueryOperationResultBindings,\n} from '@comunica/types';\nimport { getSafeBindings } from '@comunica/utils-query-operation';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Ask Query Operation Actor.\n */\nexport class ActorQueryOperationAsk extends ActorQueryOperationTypedMediated<Algebra.Ask> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'ask');\n  }\n\n  public async testOperation(_operation: Algebra.Ask, _context: IActionContext): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async runOperation(operation: Algebra.Ask, context: IActionContext): Promise<IQueryOperationResult> {\n    // Call other query operations like this:\n    const output: IQueryOperationResult = await this.mediatorQueryOperation.mediate(\n      { operation: operation.input, context },\n    );\n    const { bindingsStream }: IQueryOperationResultBindings = getSafeBindings(output);\n    return { type: 'boolean', execute: async() => (await bindingsStream.take(1).toArray()).length === 1 };\n  }\n}\n"]}