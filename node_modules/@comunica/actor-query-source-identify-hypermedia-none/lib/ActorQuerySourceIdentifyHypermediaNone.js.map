{"version":3,"file":"ActorQuerySourceIdentifyHypermediaNone.js","sourceRoot":"","sources":["ActorQuerySourceIdentifyHypermediaNone.ts"],"names":[],"mappings":";;;AAAA,mGAA+E;AAQ/E,yGAAoG;AACpG,+DAA0D;AAE1D,yCAA0C;AAE1C,6EAAmE;AACnE,uDAA+C;AAE/C;;GAEG;AACH,MAAa,sCAAuC,SAAQ,yEAAkC;IAG5F,YAAmB,IAAiD;QAClE,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,YAAY,CACvB,OAA6C;QAE7C,OAAO,IAAA,eAAQ,EAAC,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAA4C;QAC3D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,8BAA8B,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QACzE,MAAM,WAAW,GAAwB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QAC3F,MAAM,MAAM,GAAG,IAAI,oDAAgB,CACjC,MAAM,IAAA,8BAAW,EAAC,MAAM,CAAC,KAAK,CAAC,EAC/B,WAAW,EACX,MAAM,wCAAe,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,CAC7F,CAAC;QACF,MAAM,CAAC,QAAQ,GAAG,GAAG,EAAE,CAAC,oBAAoB,MAAM,CAAC,GAAG,GAAG,CAAC;QAC1D,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,GAAG,CAAC;QACnC,OAAO,EAAE,MAAM,EAAE,CAAC;IACpB,CAAC;CACF;AAzBD,wFAyBC","sourcesContent":["import { QuerySourceRdfJs } from '@comunica/actor-query-source-identify-rdfjs';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type {\n  IActionQuerySourceIdentifyHypermedia,\n  IActorQuerySourceIdentifyHypermediaOutput,\n  IActorQuerySourceIdentifyHypermediaArgs,\n  IActorQuerySourceIdentifyHypermediaTest,\n} from '@comunica/bus-query-source-identify-hypermedia';\nimport { ActorQuerySourceIdentifyHypermedia } from '@comunica/bus-query-source-identify-hypermedia';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { TestResult } from '@comunica/core';\nimport { passTest } from '@comunica/core';\nimport type { ComunicaDataFactory } from '@comunica/types';\nimport { BindingsFactory } from '@comunica/utils-bindings-factory';\nimport { storeStream } from 'rdf-store-stream';\n\n/**\n * A comunica None Query Source Identify Hypermedia Actor.\n */\nexport class ActorQuerySourceIdentifyHypermediaNone extends ActorQuerySourceIdentifyHypermedia {\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  public constructor(args: IActorQuerySourceIdentifyHypermediaNoneArgs) {\n    super(args, 'file');\n  }\n\n  public async testMetadata(\n    _action: IActionQuerySourceIdentifyHypermedia,\n  ): Promise<TestResult<IActorQuerySourceIdentifyHypermediaTest>> {\n    return passTest({ filterFactor: 0 });\n  }\n\n  public async run(action: IActionQuerySourceIdentifyHypermedia): Promise<IActorQuerySourceIdentifyHypermediaOutput> {\n    this.logInfo(action.context, `Identified as file source: ${action.url}`);\n    const dataFactory: ComunicaDataFactory = action.context.getSafe(KeysInitQuery.dataFactory);\n    const source = new QuerySourceRdfJs(\n      await storeStream(action.quads),\n      dataFactory,\n      await BindingsFactory.create(this.mediatorMergeBindingsContext, action.context, dataFactory),\n    );\n    source.toString = () => `QuerySourceRdfJs(${action.url})`;\n    source.referenceValue = action.url;\n    return { source };\n  }\n}\n\nexport interface IActorQuerySourceIdentifyHypermediaNoneArgs extends IActorQuerySourceIdentifyHypermediaArgs {\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n"]}