{"version":3,"file":"ActorRdfUpdateHypermediaSparql.js","sourceRoot":"","sources":["ActorRdfUpdateHypermediaSparql.ts"],"names":[],"mappings":";;;AAMA,mFAA+E;AAC/E,+DAA0D;AAE1D,yCAAwD;AAExD,mEAAgE;AAEhE;;GAEG;AACH,MAAa,8BAA+B,SAAQ,oDAAwB;IAK1E,YAAmB,IAAyC;QAC1D,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,MAAkC;QAC1D,IAAI,CAAC,MAAM,CAAC,oBAAoB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa;YAChE,CAAC,CAAC,IAAI,CAAC,oBAAoB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;YACnG,CAAC,CAAC,IAAI,CAAC,oBAAoB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;YACtG,OAAO,IAAA,eAAQ,EAAC,SAAS,IAAI,CAAC,IAAI,qFAAqF,CAAC,CAAC;QAC3H,CAAC;QACD,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAkC;QACjD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,qCAAqC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QAEhF,MAAM,WAAW,GAAwB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QAC3F,OAAO;YACL,WAAW,EAAE,IAAI,6CAAqB,CACpC,MAAM,CAAC,QAAQ,CAAC,aAAa,IAAI,MAAM,CAAC,GAAG,EAC3C,MAAM,CAAC,OAAO,EACd,IAAI,CAAC,YAAY,EACjB,WAAW,CACZ;SACF,CAAC;IACJ,CAAC;CACF;AA/BD,wEA+BC","sourcesContent":["import type { MediatorHttp } from '@comunica/bus-http';\nimport type {\n  IActionRdfUpdateHypermedia,\n  IActorRdfUpdateHypermediaOutput,\n  IActorRdfUpdateHypermediaArgs,\n} from '@comunica/bus-rdf-update-hypermedia';\nimport { ActorRdfUpdateHypermedia } from '@comunica/bus-rdf-update-hypermedia';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { failTest, passTestVoid } from '@comunica/core';\nimport type { ComunicaDataFactory } from '@comunica/types';\nimport { QuadDestinationSparql } from './QuadDestinationSparql';\n\n/**\n * A comunica SPARQL RDF Update Hypermedia Actor.\n */\nexport class ActorRdfUpdateHypermediaSparql extends ActorRdfUpdateHypermedia {\n  public readonly mediatorHttp: MediatorHttp;\n  public readonly checkUrlSuffixSparql: boolean;\n  public readonly checkUrlSuffixUpdate: boolean;\n\n  public constructor(args: IActorRdfUpdateHypermediaSparqlArgs) {\n    super(args, 'sparql');\n  }\n\n  public async testMetadata(action: IActionRdfUpdateHypermedia): Promise<TestResult<IActorTest>> {\n    if (!action.forceDestinationType && !action.metadata.sparqlService &&\n      !(this.checkUrlSuffixSparql && (action.url.endsWith('/sparql') || action.url.endsWith('/sparql/'))) &&\n      !(this.checkUrlSuffixUpdate && (action.url.endsWith('/update') || action.url.endsWith('/update/')))) {\n      return failTest(`Actor ${this.name} could not detect a SPARQL service description or URL ending on /sparql or /update.`);\n    }\n    return passTestVoid();\n  }\n\n  public async run(action: IActionRdfUpdateHypermedia): Promise<IActorRdfUpdateHypermediaOutput> {\n    this.logInfo(action.context, `Identified as sparql destination: ${action.url}`);\n\n    const dataFactory: ComunicaDataFactory = action.context.getSafe(KeysInitQuery.dataFactory);\n    return {\n      destination: new QuadDestinationSparql(\n        action.metadata.sparqlService || action.url,\n        action.context,\n        this.mediatorHttp,\n        dataFactory,\n      ),\n    };\n  }\n}\n\nexport interface IActorRdfUpdateHypermediaSparqlArgs extends IActorRdfUpdateHypermediaArgs {\n  /**\n   * The HTTP mediator\n   */\n  mediatorHttp: MediatorHttp;\n  /**\n   * If URLs ending with '/sparql' should also be considered SPARQL endpoints.\n   * @default {true}\n   */\n  checkUrlSuffixSparql: boolean;\n  /**\n   * If URLs ending with '/update' should also be considered SPARQL endpoints.\n   * @default {true}\n   */\n  checkUrlSuffixUpdate: boolean;\n}\n"]}