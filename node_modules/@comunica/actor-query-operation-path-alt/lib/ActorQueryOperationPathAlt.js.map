{"version":3,"file":"ActorQueryOperationPathAlt.js","sourceRoot":"","sources":["ActorQueryOperationPathAlt.ts"],"names":[],"mappings":";;;AAAA,uEAAkE;AAClE,uFAAiF;AAGjF,+DAA0D;AAQ1D,2EAAkE;AAClE,iDAA8C;AAC9C,qDAAmD;AAEnD;;GAEG;AACH,MAAa,0BAA2B,SAAQ,uCAAiB;IAG/D,YAAmB,IAAqC;QACtD,KAAK,CAAC,IAAI,EAAE,yBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAuB,EAAE,OAAuB;QACxE,MAAM,WAAW,GAAwB,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QACpF,MAAM,cAAc,GAAG,IAAI,yBAAO,CAAC,WAAW,CAAC,CAAC;QAEhD,MAAM,SAAS,GAAiB,SAAS,CAAC,SAAS,CAAC;QAEpD,MAAM,aAAa,GAAoC,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,KAAK;aACtF,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;YACvD,OAAO;YACP,SAAS,EAAE,cAAc,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC;SACzG,CAAC,CAAC,CAAC,CAAC;aACJ,GAAG,CAAC,uCAAe,CAAC,CAAC;QAExB,MAAM,cAAc,GAAG,IAAI,6BAAa,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,cAAc,CAAC,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAC3G,MAAM,QAAQ,GAAsC,GAAG,EAAE,CACvD,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;aACxD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,sDAAwB;aACtC,aAAa,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC;QAElF,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,QAAQ;SACT,CAAC;IACJ,CAAC;CACF;AAhCD,gEAgCC","sourcesContent":["import { ActorAbstractPath } from '@comunica/actor-abstract-path';\nimport { ActorQueryOperationUnion } from '@comunica/actor-query-operation-union';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport type { MediatorRdfMetadataAccumulate } from '@comunica/bus-rdf-metadata-accumulate';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type {\n  IQueryOperationResultBindings,\n  IQueryOperationResult,\n  IActionContext,\n  MetadataBindings,\n  ComunicaDataFactory,\n} from '@comunica/types';\nimport { getSafeBindings } from '@comunica/utils-query-operation';\nimport { UnionIterator } from 'asynciterator';\nimport { Algebra, Factory } from 'sparqlalgebrajs';\n\n/**\n * A comunica Path Alt Query Operation Actor.\n */\nexport class ActorQueryOperationPathAlt extends ActorAbstractPath {\n  public readonly mediatorRdfMetadataAccumulate: MediatorRdfMetadataAccumulate;\n\n  public constructor(args: IActorQueryOperationPathAltArgs) {\n    super(args, Algebra.types.ALT);\n  }\n\n  public async runOperation(operation: Algebra.Path, context: IActionContext): Promise<IQueryOperationResult> {\n    const dataFactory: ComunicaDataFactory = context.getSafe(KeysInitQuery.dataFactory);\n    const algebraFactory = new Factory(dataFactory);\n\n    const predicate = <Algebra.Alt> operation.predicate;\n\n    const subOperations: IQueryOperationResultBindings[] = (await Promise.all(predicate.input\n      .map(subPredicate => this.mediatorQueryOperation.mediate({\n        context,\n        operation: algebraFactory.createPath(operation.subject, subPredicate, operation.object, operation.graph),\n      }))))\n      .map(getSafeBindings);\n\n    const bindingsStream = new UnionIterator(subOperations.map(op => op.bindingsStream), { autoStart: false });\n    const metadata: (() => Promise<MetadataBindings>) = () =>\n      Promise.all(subOperations.map(output => output.metadata()))\n        .then(subMeta => ActorQueryOperationUnion\n          .unionMetadata(subMeta, true, context, this.mediatorRdfMetadataAccumulate));\n\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata,\n    };\n  }\n}\n\nexport interface IActorQueryOperationPathAltArgs extends IActorQueryOperationTypedMediatedArgs {\n  mediatorRdfMetadataAccumulate: MediatorRdfMetadataAccumulate;\n}\n"]}