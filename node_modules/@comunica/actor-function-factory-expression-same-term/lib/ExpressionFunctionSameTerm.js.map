{"version":3,"file":"ExpressionFunctionSameTerm.js","sourceRoot":"","sources":["ExpressionFunctionSameTerm.ts"],"names":[],"mappings":";;;AAAA,yEAAwE;AACxE,+DAA0D;AAE1D,qFAG8C;AAE9C;;;GAGG;AACH,MAAa,0BAA2B,SAAQ,6CAAsB;IACpE;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,2CAAc,CAAC,SAAS;YAClC,KAAK,EAAE,KAAK,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAgB,EAA2B,EAAE;gBACjF,MAAM,WAAW,GAAwB,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;gBAC7F,MAAM,CAAE,QAAQ,EAAE,SAAS,CAAE,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,6BAA6B,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;gBACtG,MAAM,CAAE,IAAI,EAAE,KAAK,CAAE,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAE,QAAQ,EAAE,SAAS,CAAE,CAAC,CAAC;gBACnE,OAAO,IAAA,iCAAI,EAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACxE,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AAbD,gEAaC","sourcesContent":["import { ExpressionFunctionBase } from '@comunica/bus-function-factory';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { ComunicaDataFactory, IEvalContext, TermExpression } from '@comunica/types';\nimport {\n  bool,\n  SparqlOperator,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-sameTerm\n * This function doesn't require type promotion or subtype-substitution, everything works on TermExpression\n */\nexport class ExpressionFunctionSameTerm extends ExpressionFunctionBase {\n  public constructor() {\n    super({\n      arity: 2,\n      operator: SparqlOperator.SAME_TERM,\n      apply: async({ args, mapping, exprEval }: IEvalContext): Promise<TermExpression> => {\n        const dataFactory: ComunicaDataFactory = exprEval.context.getSafe(KeysInitQuery.dataFactory);\n        const [ leftExpr, rightExpr ] = args.map(arg => exprEval.evaluatorExpressionEvaluation(arg, mapping));\n        const [ left, right ] = await Promise.all([ leftExpr, rightExpr ]);\n        return bool(left.toRDF(dataFactory).equals(right.toRDF(dataFactory)));\n      },\n    });\n  }\n}\n"]}