{"version":3,"file":"TermFunctionXsdToInteger.js","sourceRoot":"","sources":["TermFunctionXsdToInteger.ts"],"names":[],"mappings":";;;AAAA,yEAAkE;AAClE,qFAM8C;AAM9C,MAAa,wBAAyB,SAAQ,uCAAgB;IAC5D;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,oCAAO,CAAC,WAAW;YAC7B,SAAS,EAAE,IAAA,oCAAO,EAAC,oCAAO,CAAC,WAAW,CAAC;iBACpC,eAAe,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAA,oCAAO,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClD,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,GAAmB,EAAE,EAAE;gBACxC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;oBACrC,MAAM,IAAI,sCAAS,CAAC,GAAG,EAAE,oCAAO,CAAC,WAAW,CAAC,CAAC;gBAChD,CAAC;gBACD,OAAO,IAAA,oCAAO,EAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;YAC7C,CAAC,CAAC;iBACD,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,GAAS,EAAE,EAAE;gBAC7B,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;gBACtB,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBACzE,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;oBACzB,MAAM,IAAI,sCAAS,CAAC,GAAG,EAAE,oCAAO,CAAC,WAAW,CAAC,CAAC;gBAChD,CAAC;gBACD,OAAO,IAAA,oCAAO,EAAC,MAAM,CAAC,CAAC;YACzB,CAAC,CAAC;iBACD,OAAO,EAAE;SACb,CAAC,CAAC;IACL,CAAC;CACF;AAxBD,4DAwBC","sourcesContent":["import { TermFunctionBase } from '@comunica/bus-function-factory';\nimport {\n\n  CastError,\n  declare,\n  integer,\n  TypeURL,\n} from '@comunica/utils-expression-evaluator';\nimport type {\n  NumericLiteral,\n  Term,\n} from '@comunica/utils-expression-evaluator';\n\nexport class TermFunctionXsdToInteger extends TermFunctionBase {\n  public constructor() {\n    super({\n      arity: 1,\n      operator: TypeURL.XSD_INTEGER,\n      overloads: declare(TypeURL.XSD_INTEGER)\n        .onBoolean1Typed(() => val => integer(val ? 1 : 0))\n        .onNumeric1(() => (val: NumericLiteral) => {\n          if (!Number.isFinite(val.typedValue)) {\n            throw new CastError(val, TypeURL.XSD_INTEGER);\n          }\n          return integer(Math.trunc(val.typedValue));\n        })\n        .onString1(() => (val: Term) => {\n          const str = val.str();\n          const result = /^\\d+$/u.test(str) ? Number.parseInt(str, 10) : undefined;\n          if (result === undefined) {\n            throw new CastError(val, TypeURL.XSD_INTEGER);\n          }\n          return integer(result);\n        })\n        .collect(),\n    });\n  }\n}\n"]}