{"version":3,"file":"WildcardCountAggregator.js","sourceRoot":"","sources":["WildcardCountAggregator.ts"],"names":[],"mappings":";;;AACA,+FAA+E;AAE/E,qFAA6E;AAE7E,wCAAwC;AAExC,MAAa,uBAAwB,SAAQ,oDAAkB;IAI7D,YAAmB,SAA+B,EAAE,QAAiB,EAAE,UAAoB;QACzF,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAJxB,kBAAa,GAA6B,IAAI,GAAG,EAAE,CAAC;QAC7D,UAAK,GAAuB,SAAS,CAAC;IAI9C,CAAC;IAEM,OAAO,CAAC,KAAe;QAC5B,yBAAyB;IAC3B,CAAC;IAEe,KAAK,CAAC,WAAW,CAAC,QAAsB;QACtD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnC,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;gBAC7B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACjB,CAAC;YACD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;IAEe,cAAc;QAC5B,OAAO,IAAA,yCAAY,EAAC,GAAG,EAAE,oCAAO,CAAC,WAAW,CAAC,CAAC;IAChD,CAAC;IAEM,UAAU;QACf,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;QAC3B,CAAC;QACD,OAAO,IAAA,yCAAY,EAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,oCAAO,CAAC,WAAW,CAAC,CAAC;IAC/D,CAAC;IAED;;;;OAIG;IACK,cAAc,CAAC,QAAsB;QAC3C,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,MAAM,WAAW,GAA+B,CAAE,GAAG,QAAQ,CAAE,CAAC;YAChE,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7E,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAE,QAAQ,CAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC9E,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAE,AAAD,EAAG,IAAI,CAAE,EAAE,EAAE,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEtF,MAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAC9C,MAAM,MAAM,GAAG,GAAG,KAAK,SAAS,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAEnD,kBAAkB;YAClB,IAAI,CAAC,GAAG,EAAE,CAAC;gBACT,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;YAC/C,CAAC;YACD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,SAAS,CAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAE9C,OAAO,MAAM,CAAC;QAChB,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAzDD,0DAyDC","sourcesContent":["import type { IBindingsAggregator } from '@comunica/bus-bindings-aggregator-factory';\nimport { AggregateEvaluator } from '@comunica/bus-bindings-aggregator-factory';\nimport type { IExpressionEvaluator } from '@comunica/types';\nimport { typedLiteral, TypeURL } from '@comunica/utils-expression-evaluator';\nimport type * as RDF from '@rdfjs/types';\nimport * as RdfString from 'rdf-string';\n\nexport class WildcardCountAggregator extends AggregateEvaluator implements IBindingsAggregator {\n  private readonly bindingValues: Map<string, Set<string>> = new Map();\n  private state: number | undefined = undefined;\n\n  public constructor(evaluator: IExpressionEvaluator, distinct: boolean, throwError?: boolean) {\n    super(evaluator, distinct, throwError);\n  }\n\n  public putTerm(_term: RDF.Term): void {\n    // Do nothing, not needed\n  }\n\n  public override async putBindings(bindings: RDF.Bindings): Promise<void> {\n    if (!this.handleDistinct(bindings)) {\n      if (this.state === undefined) {\n        this.state = 0;\n      }\n      this.state += 1;\n    }\n  }\n\n  public override emptyValueTerm(): RDF.Term {\n    return typedLiteral('0', TypeURL.XSD_INTEGER);\n  }\n\n  public termResult(): RDF.Term | undefined {\n    if (this.state === undefined) {\n      return this.emptyValue();\n    }\n    return typedLiteral(String(this.state), TypeURL.XSD_INTEGER);\n  }\n\n  /**\n   * Returns true if the given bindings should be skipped.\n   * @param bindings\n   * @private\n   */\n  private handleDistinct(bindings: RDF.Bindings): boolean {\n    if (this.distinct) {\n      const bindingList: [RDF.Variable, RDF.Term][] = [ ...bindings ];\n      bindingList.sort((first, snd) => first[0].value.localeCompare(snd[0].value));\n      const variables = bindingList.map(([ variable ]) => variable.value).join(',');\n      const terms = bindingList.map(([ , term ]) => RdfString.termToString(term)).join(',');\n\n      const set = this.bindingValues.get(variables);\n      const result = set !== undefined && set.has(terms);\n\n      // Add to the set:\n      if (!set) {\n        this.bindingValues.set(variables, new Set());\n      }\n      this.bindingValues.get(variables)!.add(terms);\n\n      return result;\n    }\n    return false;\n  }\n}\n"]}