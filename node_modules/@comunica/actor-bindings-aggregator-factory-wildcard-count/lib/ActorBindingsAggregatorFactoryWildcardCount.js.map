{"version":3,"file":"ActorBindingsAggregatorFactoryWildcardCount.js","sourceRoot":"","sources":["ActorBindingsAggregatorFactoryWildcardCount.ts"],"names":[],"mappings":";;;AAKA,+FAEmD;AAEnD,yCAAwD;AACxD,uEAAoE;AAEpE;;GAEG;AACH,MAAa,2CAA4C,SAAQ,gEAA8B;IAC7F,YAAmB,IAAyC;QAC1D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAwC;QACxD,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,KAAK,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,KAAK,UAAU,EAAE,CAAC;YAC/F,OAAO,IAAA,eAAQ,EAAC,kEAAkE,CAAC,CAAC;QACtF,CAAC;QACD,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,IAAI,EAAoC;QAElE,OAAO,IAAI,iDAAuB,CAChC,MAAM,IAAI,CAAC,kCAAkC,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC,EAC5F,IAAI,CAAC,QAAQ,CACd,CAAC;IACJ,CAAC;CACF;AAnBD,kGAmBC","sourcesContent":["import type {\n  IActionBindingsAggregatorFactory,\n  IActorBindingsAggregatorFactoryArgs,\n  IActorBindingsAggregatorFactoryOutput,\n} from '@comunica/bus-bindings-aggregator-factory';\nimport {\n  ActorBindingsAggregatorFactory,\n} from '@comunica/bus-bindings-aggregator-factory';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { failTest, passTestVoid } from '@comunica/core';\nimport { WildcardCountAggregator } from './WildcardCountAggregator';\n\n/**\n * A comunica Wildcard Count Expression Evaluator Aggregate Actor.\n */\nexport class ActorBindingsAggregatorFactoryWildcardCount extends ActorBindingsAggregatorFactory {\n  public constructor(args: IActorBindingsAggregatorFactoryArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionBindingsAggregatorFactory): Promise<TestResult<IActorTest>> {\n    if (action.expr.aggregator !== 'count' || action.expr.expression.expressionType !== 'wildcard') {\n      return failTest('This actor only supports the \\'count\\' aggregator with wildcard.');\n    }\n    return passTestVoid();\n  }\n\n  public async run({ context, expr }: IActionBindingsAggregatorFactory):\n  Promise<IActorBindingsAggregatorFactoryOutput> {\n    return new WildcardCountAggregator(\n      await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr.expression, context }),\n      expr.distinct,\n    );\n  }\n}\n"]}