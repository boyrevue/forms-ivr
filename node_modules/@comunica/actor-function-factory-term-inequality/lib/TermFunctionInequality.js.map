{"version":3,"file":"TermFunctionInequality.js","sourceRoot":"","sources":["TermFunctionInequality.ts"],"names":[],"mappings":";;;AACA,yEAAkE;AAIlE,qFAI8C;AAE9C,MAAa,sBAAuB,SAAQ,uCAAgB;IAC1D,YAAoC,gBAA+B;QACjE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,2CAAc,CAAC,SAAS;YAClC,SAAS,EAAE,IAAA,oCAAO,EAAC,2CAAc,CAAC,SAAS,CAAC;iBACzC,GAAG,CAAC,CAAE,MAAM,EAAE,MAAM,CAAE,EAAE,mBAAmB,CAAC,EAAE,CAC7C,CAAC,CAAE,KAAK,EAAE,MAAM,CAAE,EAAE,EAAE,CACpB,IAAA,iCAAI,EAAC,CAAmB,IAAI,CAAC,gBAAgB;iBAC1C,YAAY,CAAC,CAAE,KAAK,EAAE,MAAM,CAAE,EAAE,mBAAmB,CAAE,CAAC,UAAU,CAAC,CAAC;iBACxE,OAAO,EAAE;SACb,CAAC,CAAC;QAV+B,qBAAgB,GAAhB,gBAAgB,CAAe;IAWnE,CAAC;CACF;AAbD,wDAaC","sourcesContent":["import type { ITermFunction } from '@comunica/bus-function-factory';\nimport { TermFunctionBase } from '@comunica/bus-function-factory';\nimport type {\n  BooleanLiteral,\n} from '@comunica/utils-expression-evaluator';\nimport {\n  bool,\n  declare,\n  SparqlOperator,\n} from '@comunica/utils-expression-evaluator';\n\nexport class TermFunctionInequality extends TermFunctionBase {\n  public constructor(private readonly equalityFunction: ITermFunction) {\n    super({\n      arity: 2,\n      operator: SparqlOperator.NOT_EQUAL,\n      overloads: declare(SparqlOperator.NOT_EQUAL)\n        .set([ 'term', 'term' ], expressionEvaluator =>\n          ([ first, second ]) =>\n            bool(!(<BooleanLiteral> this.equalityFunction\n              .applyOnTerms([ first, second ], expressionEvaluator)).typedValue))\n        .collect(),\n    });\n  }\n}\n"]}