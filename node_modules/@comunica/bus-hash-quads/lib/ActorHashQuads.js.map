{"version":3,"file":"ActorHashQuads.js","sourceRoot":"","sources":["ActorHashQuads.ts"],"names":[],"mappings":";;;AAAA,yCAAuC;AAIvC;;;;;;;;;;GAUG;AACH,MAAsB,cACpB,SAAQ,YAA8D;IACtE;;;;OAIG;IACH,YAAmB,IAA6B;QAC9C,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;CACF;AAVD,wCAUC","sourcesContent":["import { Actor } from '@comunica/core';\nimport type { IAction, IActorArgs, IActorOutput, IActorTest, Mediate } from '@comunica/core';\nimport type { Quad } from 'rdf-data-factory';\n\n/**\n * A comunica actor for hash-quads events.\n *\n * Actor types:\n * * Input:  IActionHashQuads:      Metadata for selecting a hash function.\n * * Test:   <none>\n * * Output: IActorHashQuadsOutput: The resulting hash function.\n *\n * @see IActionHashQuads\n * @see IActorHashQuadsOutput\n */\nexport abstract class ActorHashQuads<TS = undefined>\n  extends Actor<IActionHashQuads, IActorTest, IActorHashQuadsOutput, TS> {\n  /**\n   * @param args -\n   *   \\ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   *   \\ @defaultNested {Failed to obtaining hash functions for quads} busFailMessage\n   */\n  public constructor(args: IActorHashQuadsArgs<TS>) {\n    super(args);\n  }\n}\n\nexport interface IActionHashQuads extends IAction {\n}\n\nexport interface IActorHashQuadsOutput extends IActorOutput {\n  /**\n   * A number-based hash factory of the given object.\n   * It is recommended to always return 32-bit numbers to enable SMI optimization.\n   *\n   * Hash functions could produce collisions for non-equal quads.\n   *\n   * @param {RDF.Quad} quads The quads to hash.\n   * @return {string} The object's hash.\n   */\n  hashFunction: HashFunction;\n}\n\nexport type HashFunction = (quad: Quad) => number;\n\nexport type IActorHashQuadsArgs<TS = undefined> = IActorArgs<\nIActionHashQuads,\nIActorTest,\nIActorHashQuadsOutput,\nTS\n>;\n\nexport type MediatorHashQuads = Mediate<IActionHashQuads, IActorHashQuadsOutput>;\n"]}