{"version":3,"file":"ActorRdfJoinOptionalBind.js","sourceRoot":"","sources":["ActorRdfJoinOptionalBind.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BindOrder } from '@comunica/actor-rdf-join-inner-multi-bind';\nimport { ActorRdfJoinMultiBind } from '@comunica/actor-rdf-join-inner-multi-bind';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { MediatorQueryOperation } from '@comunica/bus-query-operation';\nimport type {\n  IActionRdfJoin,\n  IActorRdfJoinOutputInner,\n  IActorRdfJoinArgs,\n  IActorRdfJoinTestSideData,\n} from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport { KeysInitQuery, KeysQueryOperation } from '@comunica/context-entries';\nimport type { TestResult } from '@comunica/core';\nimport { passTestWithSideData, failTest } from '@comunica/core';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport type { Bindings, BindingsStream, ComunicaDataFactory } from '@comunica/types';\nimport { BindingsFactory } from '@comunica/utils-bindings-factory';\nimport { getSafeBindings } from '@comunica/utils-query-operation';\nimport { Algebra, Factory } from 'sparqlalgebrajs';\n\n/**\n * A comunica Optional Bind RDF Join Actor.\n */\nexport class ActorRdfJoinOptionalBind extends ActorRdfJoin {\n  public readonly bindOrder: BindOrder;\n  public readonly selectivityModifier: number;\n  public readonly mediatorQueryOperation: MediatorQueryOperation;\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  public constructor(args: IActorRdfJoinOptionalBindArgs) {\n    super(args, {\n      logicalType: 'optional',\n      physicalName: 'bind',\n      limitEntries: 2,\n      canHandleUndefs: true,\n      isLeaf: false,\n      requiresVariableOverlap: true,\n    });\n  }\n\n  protected async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    const dataFactory: ComunicaDataFactory = action.context.getSafe(KeysInitQuery.dataFactory);\n    const algebraFactory = new Factory(dataFactory);\n    const bindingsFactory = await BindingsFactory.create(\n      this.mediatorMergeBindingsContext,\n      action.context,\n      dataFactory,\n    );\n    // Close the right stream, since we don't need that one\n    action.entries[1].output.bindingsStream.close();\n\n    // Bind the right pattern for each binding in the stream\n    const subContext = action.context\n      .set(KeysQueryOperation.joinLeftMetadata, await action.entries[0].output.metadata())\n      .set(KeysQueryOperation.joinRightMetadatas, [ await action.entries[1].output.metadata() ]);\n    const bindingsStream: BindingsStream = ActorRdfJoinMultiBind.createBindStream(\n      this.bindOrder,\n      action.entries[0].output.bindingsStream,\n      [ action.entries[1].operation ],\n      async(operations: Algebra.Operation[], operationBindings: Bindings) => {\n        // Send the materialized patterns to the mediator for recursive join evaluation.\n        // Length of operations will always be 1\n        const operation = operations[0];\n        const output = getSafeBindings(await this.mediatorQueryOperation.mediate(\n          { operation, context: subContext?.set(KeysQueryOperation.joinBindings, operationBindings) },\n        ));\n        return output.bindingsStream;\n      },\n      true,\n      algebraFactory,\n      bindingsFactory,\n    );\n\n    return {\n      result: {\n        type: 'bindings',\n        bindingsStream,\n        metadata: async() => await this.constructResultMetadata(\n          action.entries,\n          await ActorRdfJoin.getMetadatas(action.entries),\n          action.context,\n          {},\n          true,\n        ),\n      },\n    };\n  }\n\n  public async getJoinCoefficients(\n    action: IActionRdfJoin,\n    sideData: IActorRdfJoinTestSideData,\n  ): Promise<TestResult<IMediatorTypeJoinCoefficients, IActorRdfJoinTestSideData>> {\n    const { metadatas } = sideData;\n\n    const requestInitialTimes = ActorRdfJoin.getRequestInitialTimes(metadatas);\n    const requestItemTimes = ActorRdfJoin.getRequestItemTimes(metadatas);\n\n    // Reject binding on some operation types\n    if (action.entries[1].operation.type === Algebra.types.EXTEND ||\n      action.entries[1].operation.type === Algebra.types.GROUP) {\n      return failTest(`Actor ${this.name} can not bind on Extend and Group operations`);\n    }\n\n    // Determine selectivity of join\n    const selectivity = (await this.mediatorJoinSelectivity.mediate({\n      entries: action.entries,\n      context: action.context,\n    })).selectivity * this.selectivityModifier;\n\n    return passTestWithSideData({\n      iterations: metadatas[0].cardinality.value * metadatas[1].cardinality.value * selectivity,\n      persistedItems: 0,\n      blockingItems: 0,\n      requestTime: requestInitialTimes[0] +\n        metadatas[0].cardinality.value * (\n          requestItemTimes[0] +\n          requestInitialTimes[1] +\n          selectivity * metadatas[1].cardinality.value * requestItemTimes[1]\n        ),\n    }, sideData);\n  }\n}\n\nexport interface IActorRdfJoinOptionalBindArgs extends IActorRdfJoinArgs {\n  /**\n   * The order in which elements should be bound\n   * @default {depth-first}\n   */\n  bindOrder: BindOrder;\n  /**\n   * Multiplier for selectivity values\n   * @range {double}\n   * @default {0.000001}\n   */\n  selectivityModifier: number;\n  /**\n   * The query operation mediator\n   */\n  mediatorQueryOperation: MediatorQueryOperation;\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n}\n"]}