{"version":3,"file":"TermFunctionRegex.js","sourceRoot":"","sources":["TermFunctionRegex.ts"],"names":[],"mappings":"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","sourcesContent":["import { TermFunctionBase } from '@comunica/bus-function-factory';\nimport type {\n  BooleanLiteral,\n} from '@comunica/utils-expression-evaluator';\nimport {\n  bool,\n  declare,\n  SparqlOperator,\n  TypeAlias,\n  TypeURL,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-regex\n */\nexport class TermFunctionRegex extends TermFunctionBase {\n  public constructor() {\n    super({\n      arity: [ 2, 3 ],\n      operator: SparqlOperator.REGEX,\n      overloads: declare(SparqlOperator.REGEX)\n        .onBinaryTyped([ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING ], TermFunctionRegex.regex2)\n        .onTernaryTyped([ TypeAlias.SPARQL_STRINGLY, TypeURL.XSD_STRING, TypeURL.XSD_STRING ], TermFunctionRegex.regex3)\n        .collect(),\n    });\n  }\n\n  private static regex2(): (text: string, pattern: string) => BooleanLiteral {\n    return (text: string, pattern: string) => bool(TermFunctionRegex.matches(text, pattern));\n  }\n\n  private static regex3(): (text: string, pattern: string, flags: string) => BooleanLiteral {\n    return (text: string, pattern: string, flags: string) => bool(TermFunctionRegex.matches(text, pattern, flags));\n  }\n\n  // https://www.w3.org/TR/xpath-functions/#func-matches\n  // https://www.w3.org/TR/xpath-functions/#flags\n  private static matches(text: string, pattern: string, flags = ''): boolean {\n    // Flags:\n    //   i: case-insensitive: same as the 'i' flag in JavaScript\n    //   m: multi-line mode: same as the 'm' flag in JavaScript\n    //   s: dot-all mode: matches 's' flag in JavaScript very well.\n    //   x: whitespace characters (#x9, #xA, #xD and #x20)\n    //      in the regular expression are removed prior to matching with one exception:\n    //        whitespace characters within character class expressions.\n    //   q: regex-no-metacharacters:\n    //      all characters in the regular expression are treated as representing themselves, not as metacharacters\n    //      If it is used together with the m, s, or x flag, that flag has no effect.\n    flags = TermFunctionRegex.cleanFlags(flags);\n    if (flags.includes('x')) {\n      pattern = TermFunctionRegex.flagX(pattern);\n    }\n    if (flags.includes('q')) {\n      pattern = TermFunctionRegex.flagQ(pattern);\n    }\n    const reg = new RegExp(pattern, flags.replaceAll(/[qx]/gu, ''));\n    return reg.test(text);\n  }\n\n  public static cleanFlags(flags: string): string {\n    // Check flag validity\n    if (!/^[imsxq]*$/u.test(flags)) {\n      throw new Error('Invalid flags');\n    }\n    const duplicateFlag = [ ...flags ]\n      .find((value, index, self) => self.indexOf(value) !== index);\n    if (duplicateFlag) {\n      throw new Error(`Duplicate flag: ${duplicateFlag}`);\n    }\n    // If the 'q' flag is used, the 'm', 's', and 'x' flags have no effect\n    if (flags?.includes('q')) {\n      flags = flags.replaceAll(/[msx]/gu, '');\n    }\n    // Add the JS 'u' flag to the flags to allow for safer regex execution.\n    // See reasons given by [ESLint](https://eslint.org/docs/latest/rules/require-unicode-regexp).\n    // Disable [Annex B](https://262.ecma-international.org/6.0/#sec-regular-expressions-patterns)\n    return `${flags}u`;\n  }\n\n  public static flagX(pattern: string): string {\n    if (!pattern) {\n      return pattern;\n    }\n    // Remove all spaces in the pattern, excluding those in character classes\n    let prev = pattern[0];\n    while ([ '\\u0009', '\\u000A', '\\u000D', '\\u0020' ].includes(prev)) {\n      pattern = pattern.slice(1);\n      prev = pattern[0];\n    }\n    let inClass = prev === '[';\n    for (let i = 1; i < pattern.length; i++) {\n      const c = pattern[i];\n      if ([ '\\u0009', '\\u000A', '\\u000D', '\\u0020' ].includes(c) && !inClass) {\n        pattern = pattern.slice(0, i) + pattern.slice(i + 1);\n        i--;\n      } else if (c === '[' && prev !== '\\\\') {\n        inClass = true;\n      } else if (c === ']' && prev !== '\\\\') {\n        inClass = false;\n      }\n      prev = c;\n    }\n    return pattern;\n  }\n\n  public static flagQ(pattern: string): string {\n    // Escape all metacharacters in the pattern\n    return pattern\n      .replaceAll(/([?+*.{}()[\\]\\\\|])/gu, '\\\\$1')\n      .replaceAll(/^\\^/gu, '\\\\^')\n      .replaceAll(/\\$$/gu, '\\\\$');\n  }\n}\n"]}