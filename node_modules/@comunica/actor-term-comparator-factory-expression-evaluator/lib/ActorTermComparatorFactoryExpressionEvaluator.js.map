{"version":3,"file":"ActorTermComparatorFactoryExpressionEvaluator.js","sourceRoot":"","sources":["ActorTermComparatorFactoryExpressionEvaluator.ts"],"names":[],"mappings":";;;AAAA,kHAA+G;AAK/G,uFAAmF;AACnF,+DAA0D;AAE1D,yCAA8C;AAC9C,6EAAmE;AACnE,6DAA6D;AAC7D,2FAAwF;AAExF;;GAEG;AACH,MAAa,6CAA8C,SAAQ,wDAA0B;IACpF,KAAK,CAAC,IAAI,CAAC,OAAqC;QACrD,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,GAAG,CAAC,EAAE,OAAO,EAAgC;QACxD,OAAO,GAAG,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC;QACtD,OAAO,IAAI,qEAAiC,CAC1C,IAAI,qCAAiB,CACnB,OAAO,EACP,IAAI,CAAC,uBAAuB,EAC5B,IAAI,CAAC,sBAAsB,EAC3B,MAAM,wCAAe,CAAC,MAAM,CAC1B,IAAI,CAAC,4BAA4B,EACjC,OAAO,EACP,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAC3C,CACF,EACD,MAAM,IAAI,CAAC,uBAAuB;aAC/B,OAAO,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC,EAC7F,MAAM,IAAI,CAAC,uBAAuB;aAC/B,OAAO,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,OAAO,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC,CAC3F,CAAC;IACJ,CAAC;CACF;AA7BD,sGA6BC","sourcesContent":["import { InternalEvaluator } from '@comunica/actor-expression-evaluator-factory-default/lib/InternalEvaluator';\nimport type {\n  IActionTermComparatorFactory,\n  IActorTermComparatorFactoryOutput,\n} from '@comunica/bus-term-comparator-factory';\nimport { ActorTermComparatorFactory } from '@comunica/bus-term-comparator-factory';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport { BindingsFactory } from '@comunica/utils-bindings-factory';\nimport * as Eval from '@comunica/utils-expression-evaluator';\nimport { TermComparatorExpressionEvaluator } from './TermComparatorExpressionEvaluator';\n\n/**\n * A comunica Expression Evaluator Based Term Comparator Factory Actor.\n */\nexport class ActorTermComparatorFactoryExpressionEvaluator extends ActorTermComparatorFactory {\n  public async test(_action: IActionTermComparatorFactory): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  /**\n   * Context item superTypeProvider can be expected here\n   * @param context IActionTermComparatorFactory\n   * @param context.context IActionContext\n   */\n  public async run({ context }: IActionTermComparatorFactory): Promise<IActorTermComparatorFactoryOutput> {\n    context = Eval.prepareEvaluatorActionContext(context);\n    return new TermComparatorExpressionEvaluator(\n      new InternalEvaluator(\n        context,\n        this.mediatorFunctionFactory,\n        this.mediatorQueryOperation,\n        await BindingsFactory.create(\n          this.mediatorMergeBindingsContext,\n          context,\n          context.getSafe(KeysInitQuery.dataFactory),\n        ),\n      ),\n      await this.mediatorFunctionFactory\n        .mediate({ functionName: Eval.SparqlOperator.EQUAL, context, requireTermExpression: true }),\n      await this.mediatorFunctionFactory\n        .mediate({ functionName: Eval.SparqlOperator.LT, context, requireTermExpression: true }),\n    );\n  }\n}\n"]}