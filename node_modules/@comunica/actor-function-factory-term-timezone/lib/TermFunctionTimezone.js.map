{"version":3,"file":"TermFunctionTimezone.js","sourceRoot":"","sources":["TermFunctionTimezone.ts"],"names":[],"mappings":";;;AAAA,yEAAkE;AAGlE,qFAM8C;AAE9C;;GAEG;AACH,MAAa,oBAAqB,SAAQ,uCAAgB;IACxD;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,2CAAc,CAAC,QAAQ;YACjC,SAAS,EAAE,IAAA,oCAAO,EAAC,2CAAc,CAAC,QAAQ,CAAC;iBACxC,WAAW,CACV,GAAG,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE;gBACb,MAAM,QAAQ,GAA4C;oBACxD,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS;oBAChC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW;iBACrC,CAAC;gBACF,IAAI,QAAQ,CAAC,KAAK,KAAK,SAAS,IAAI,QAAQ,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;oBACnE,MAAM,IAAI,gDAAmB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC5C,CAAC;gBACD,OAAO,IAAI,mDAAsB,CAAC,QAAQ,CAAC,CAAC;YAC9C,CAAC,CACF;iBACA,IAAI,CAAC,EAAE,IAAI,EAAE,CAAE,oCAAO,CAAC,aAAa,CAAE,EAAE,EAAE,EAAE,CAAE,oCAAO,CAAC,QAAQ,CAAE,EAAC,CAAC;iBAClE,IAAI,CAAC,EAAE,IAAI,EAAE,CAAE,oCAAO,CAAC,aAAa,CAAE,EAAE,EAAE,EAAE,CAAE,oCAAO,CAAC,QAAQ,CAAE,EAAC,CAAC;iBAClE,OAAO,EAAE;SACb,CAAC,CAAC;IACL,CAAC;CACF;AAvBD,oDAuBC","sourcesContent":["import { TermFunctionBase } from '@comunica/bus-function-factory';\n\nimport type { IDayTimeDurationRepresentation } from '@comunica/types';\nimport {\n  DayTimeDurationLiteral,\n  declare,\n  InvalidTimezoneCall,\n  SparqlOperator,\n  TypeURL,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-timezone\n */\nexport class TermFunctionTimezone extends TermFunctionBase {\n  public constructor() {\n    super({\n      arity: 1,\n      operator: SparqlOperator.TIMEZONE,\n      overloads: declare(SparqlOperator.TIMEZONE)\n        .onDateTime1(\n          () => (date) => {\n            const duration: Partial<IDayTimeDurationRepresentation> = {\n              hours: date.typedValue.zoneHours,\n              minutes: date.typedValue.zoneMinutes,\n            };\n            if (duration.hours === undefined && duration.minutes === undefined) {\n              throw new InvalidTimezoneCall(date.str());\n            }\n            return new DayTimeDurationLiteral(duration);\n          },\n        )\n        .copy({ from: [ TypeURL.XSD_DATE_TIME ], to: [ TypeURL.XSD_DATE ]})\n        .copy({ from: [ TypeURL.XSD_DATE_TIME ], to: [ TypeURL.XSD_TIME ]})\n        .collect(),\n    });\n  }\n}\n"]}