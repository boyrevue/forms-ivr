{"version":3,"file":"TermFunctionLesserThanEqual.js","sourceRoot":"","sources":["TermFunctionLesserThanEqual.ts"],"names":[],"mappings":";;;AACA,yEAAkE;AAIlE,qFAI8C;AAE9C,MAAa,2BAA4B,SAAQ,uCAAgB;IAC/D,YACmB,gBAA+B,EAC/B,gBAA+B;QAEhD,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,2CAAc,CAAC,GAAG;YAC5B,SAAS,EAAE,IAAA,oCAAO,EAAC,2CAAc,CAAC,GAAG,CAAC;iBACnC,GAAG,CAAC,CAAE,MAAM,EAAE,MAAM,CAAE,EAAE,QAAQ,CAAC,EAAE,CAClC,CAAC,CAAE,KAAK,EAAE,MAAM,CAAE,EAAE,EAAE;YACpB,2BAA2B;YAC3B,oFAAoF;YACpF,gDAAgD;YAChD,kEAAkE;YAClE,IAAA,iCAAI,EACgB,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAE,KAAK,EAAE,MAAM,CAAE,EAAE,QAAQ,CAAE;iBAC/E,UAAU;gBACK,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAE,KAAK,EAAE,MAAM,CAAE,EAAE,QAAQ,CAAE;qBAC/E,UAAU,CACd,CAAC;iBACL,OAAO,EAAE;SACb,CAAC,CAAC;QApBc,qBAAgB,GAAhB,gBAAgB,CAAe;QAC/B,qBAAgB,GAAhB,gBAAgB,CAAe;IAoBlD,CAAC;CACF;AAxBD,kEAwBC","sourcesContent":["import type { ITermFunction } from '@comunica/bus-function-factory';\nimport { TermFunctionBase } from '@comunica/bus-function-factory';\nimport type {\n  BooleanLiteral,\n} from '@comunica/utils-expression-evaluator';\nimport {\n  bool,\n  declare,\n  SparqlOperator,\n} from '@comunica/utils-expression-evaluator';\n\nexport class TermFunctionLesserThanEqual extends TermFunctionBase {\n  public constructor(\n    private readonly equalityFunction: ITermFunction,\n    private readonly lessThanFunction: ITermFunction,\n  ) {\n    super({\n      arity: 2,\n      operator: SparqlOperator.LTE,\n      overloads: declare(SparqlOperator.LTE)\n        .set([ 'term', 'term' ], exprEval =>\n          ([ first, second ]) =>\n            // X <= Y -> X < Y || X = Y\n            // First check if the first is lesser than the second, then check if they are equal.\n            // Doing this, the correct error will be thrown,\n            // each type that has a lesserThanEqual has a matching lesserThan.\n            bool(\n              (<BooleanLiteral> this.lessThanFunction.applyOnTerms([ first, second ], exprEval))\n                .typedValue ||\n              (<BooleanLiteral> this.equalityFunction.applyOnTerms([ first, second ], exprEval))\n                .typedValue,\n            ))\n        .collect(),\n    });\n  }\n}\n"]}