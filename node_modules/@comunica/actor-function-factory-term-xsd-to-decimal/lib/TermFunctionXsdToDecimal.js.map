{"version":3,"file":"TermFunctionXsdToDecimal.js","sourceRoot":"","sources":["TermFunctionXsdToDecimal.ts"],"names":[],"mappings":";;;AAAA,yEAAkE;AAIlE,qFAM8C;AAE9C,MAAa,wBAAyB,SAAQ,uCAAgB;IAC5D;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,oCAAO,CAAC,WAAW;YAC7B,SAAS,EAAE,IAAA,oCAAO,EAAC,oCAAO,CAAC,WAAW,CAAC;iBACpC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,GAAS,EAAE,EAAE;gBAC9B,MAAM,MAAM,GAAG,IAAA,4CAAe,EAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;gBAC1C,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;oBACzB,MAAM,IAAI,sCAAS,CAAC,GAAG,EAAE,oCAAO,CAAC,WAAW,CAAC,CAAC;gBAChD,CAAC;gBACD,OAAO,IAAA,oCAAO,EAAC,MAAM,CAAC,CAAC;YACzB,CAAC,CAAC;iBACD,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC,GAAS,EAAE,EAAE;gBAC7B,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;gBACtB,MAAM,MAAM,GAAG,yBAAyB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAA,4CAAe,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBACtF,IAAI,MAAM,KAAK,SAAS,EAAE,CAAC;oBACzB,MAAM,IAAI,sCAAS,CAAC,GAAG,EAAE,oCAAO,CAAC,WAAW,CAAC,CAAC;gBAChD,CAAC;gBACD,OAAO,IAAA,oCAAO,EAAC,MAAM,CAAC,CAAC;YACzB,CAAC,EAAE,KAAK,CAAC;iBACR,eAAe,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,IAAA,oCAAO,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClD,OAAO,EAAE;SACb,CAAC,CAAC;IACL,CAAC;CACF;AAzBD,4DAyBC","sourcesContent":["import { TermFunctionBase } from '@comunica/bus-function-factory';\nimport type {\n  Term,\n} from '@comunica/utils-expression-evaluator';\nimport {\n  CastError,\n  decimal,\n  declare,\n  parseXSDDecimal,\n  TypeURL,\n} from '@comunica/utils-expression-evaluator';\n\nexport class TermFunctionXsdToDecimal extends TermFunctionBase {\n  public constructor() {\n    super({\n      arity: 1,\n      operator: TypeURL.XSD_DECIMAL,\n      overloads: declare(TypeURL.XSD_DECIMAL)\n        .onNumeric1(() => (val: Term) => {\n          const result = parseXSDDecimal(val.str());\n          if (result === undefined) {\n            throw new CastError(val, TypeURL.XSD_DECIMAL);\n          }\n          return decimal(result);\n        })\n        .onString1(() => (val: Term) => {\n          const str = val.str();\n          const result = /^([+-])?(\\d+(\\.\\d+)?)$/u.test(str) ? parseXSDDecimal(str) : undefined;\n          if (result === undefined) {\n            throw new CastError(val, TypeURL.XSD_DECIMAL);\n          }\n          return decimal(result);\n        }, false)\n        .onBoolean1Typed(() => val => decimal(val ? 1 : 0))\n        .collect(),\n    });\n  }\n}\n"]}