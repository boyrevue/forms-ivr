{"version":3,"file":"NamedExtension.js","sourceRoot":"","sources":["NamedExtension.ts"],"names":[],"mappings":";;;AAAA,iFAAgG;AAChG,+DAAmF;AAEnF,qFAA+F;AAO/F,MAAa,cAAe,SAAQ,6BAAsB;IACxD,YAAmB,EAAE,QAAQ,EAAE,kBAAkB,EAAsB;QACrE,KAAK,CAAC;YACJ,KAAK,EAAE,MAAM,CAAC,iBAAiB;YAC/B,QAAQ;YACR,KAAK,EAAE,KAAK,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAgB,EAA2B,EAAE;gBACjF,MAAM,aAAa,GAAqB,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CACvE,QAAQ,CAAC,6BAA6B,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;gBACzD,IAAI,CAAC;oBACH,OAAO,IAAI,4CAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,yCAAuB,CAAC,iBAAiB,CAAC,CAAC;yBAC5F,sBAAsB,CACrB,MAAM,kBAAkB,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAChD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CACpE,CAAC;gBACN,CAAC;gBAAC,OAAO,KAAc,EAAE,CAAC;oBACxB,MAAM,IAAI,mDAAsB,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gBACzD,CAAC;YACH,CAAC;SAEF,CAAC,CAAC;IACL,CAAC;CACF;AArBD,wCAqBC","sourcesContent":["import { ExpressionFunctionBase } from '@comunica/bus-function-factory/lib/implementation/Core';\nimport { KeysExpressionEvaluator, KeysInitQuery } from '@comunica/context-entries';\nimport type { AsyncExtensionFunction, IEvalContext, TermExpression } from '@comunica/types';\nimport { ExtensionFunctionError, TermTransformer } from '@comunica/utils-expression-evaluator';\n\ninterface NamedExtensionArgs {\n  operator: string;\n  functionDefinition: AsyncExtensionFunction;\n}\n\nexport class NamedExtension extends ExpressionFunctionBase {\n  public constructor({ operator, functionDefinition }: NamedExtensionArgs) {\n    super({\n      arity: Number.POSITIVE_INFINITY,\n      operator,\n      apply: async({ args, exprEval, mapping }: IEvalContext): Promise<TermExpression> => {\n        const evaluatedArgs: TermExpression[] = await Promise.all(args.map(arg =>\n          exprEval.evaluatorExpressionEvaluation(arg, mapping)));\n        try {\n          return new TermTransformer(exprEval.context.getSafe(KeysExpressionEvaluator.superTypeProvider))\n            .transformRDFTermUnsafe(\n              await functionDefinition(evaluatedArgs.map(term =>\n                term.toRDF(exprEval.context.getSafe(KeysInitQuery.dataFactory)))),\n            );\n        } catch (error: unknown) {\n          throw new ExtensionFunctionError(this.operator, error);\n        }\n      }\n      ,\n    });\n  }\n}\n"]}