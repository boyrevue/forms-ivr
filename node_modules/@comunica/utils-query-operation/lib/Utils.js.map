{"version":3,"file":"Utils.js","sourceRoot":"","sources":["Utils.ts"],"names":[],"mappings":";;;AAAA,+DAA+D;AAE/D,yCAAwD;AAYxD;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,MAA6B;IAC3D,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACxC,OAAuC,MAAM,CAAC;AAChD,CAAC;AAHD,0CAGC;AAED;;;;;GAKG;AACH,SAAgB,YAAY,CAAC,MAA6B;IACxD,mBAAmB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACrC,OAAoC,MAAM,CAAC;AAC7C,CAAC;AAHD,oCAGC;AAED;;;;;GAKG;AACH,SAAgB,cAAc,CAAC,MAA6B;IAC1D,mBAAmB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IACvC,OAAsC,MAAM,CAAC;AAC/C,CAAC;AAHD,wCAGC;AAED;;;;;GAKG;AACH,SAAgB,WAAW,CAAC,MAA6B;IACvD,mBAAmB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACpC,OAAmC,MAAM,CAAC;AAC5C,CAAC;AAHD,kCAGC;AAED;;;;GAIG;AACH,SAAgB,mBAAmB,CAAC,MAA6B,EAAE,YAA2C;IAC5G,IAAI,MAAM,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;QACjC,MAAM,IAAI,KAAK,CAAC,wCAAwC,YAAY,cAAc,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC;IACpG,CAAC;AACH,CAAC;AAJD,kDAIC;AAED;;;GAGG;AACH,SAAgB,YAAY,CAAC,OAAuB;IAClD,IAAI,OAAO,CAAC,GAAG,CAAC,oCAAkB,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC7C,OAAO,IAAA,eAAQ,EAAC,+CAA+C,CAAC,CAAC;IACnE,CAAC;IACD,OAAO,IAAA,mBAAY,GAAE,CAAC;AACxB,CAAC;AALD,oCAKC;AAED;;;GAGG;AACH,SAAgB,kBAAkB,CAAC,SAA4B;IAC7D,OAA6B,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC;AAChE,CAAC;AAFD,gDAEC;AAED;;;;;GAKG;AACH,SAAgB,qBAAqB,CAA8B,SAAY,EAAE,MAA2B;IAC1G,SAAS,GAAG,EAAE,GAAG,SAAS,EAAE,CAAC;IAC7B,SAAS,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACzE,SAAS,CAAC,QAAQ,CAAC,YAAY,GAAG,MAAM,CAAC;IACzC,OAAO,SAAS,CAAC;AACnB,CAAC;AALD,sDAKC;AAED;;;;GAIG;AACH,SAAgB,qBAAqB,CAAC,SAA4B;IAChE,OAAO,SAAS,CAAC,QAAQ,EAAE,YAAY,CAAC;IACxC,IAAI,SAAS,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvE,OAAO,SAAS,CAAC,QAAQ,CAAC;IAC5B,CAAC;AACH,CAAC;AALD,sDAKC","sourcesContent":["import { KeysQueryOperation } from '@comunica/context-entries';\nimport type { TestResult } from '@comunica/core';\nimport { failTest, passTestVoid } from '@comunica/core';\nimport type {\n  IActionContext,\n  IQueryOperationResult,\n  IQueryOperationResultBindings,\n  IQueryOperationResultBoolean,\n  IQueryOperationResultQuads,\n  IQueryOperationResultVoid,\n  IQuerySourceWrapper,\n} from '@comunica/types';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * Safely cast a query operation output to a bindings output.\n * This will throw a runtime error if the output is of the incorrect type.\n * @param {IQueryOperationResult} output A query operation output.\n * @return {IQueryOperationResultBindings} A bindings query operation output.\n */\nexport function getSafeBindings(output: IQueryOperationResult): IQueryOperationResultBindings {\n  validateQueryOutput(output, 'bindings');\n  return <IQueryOperationResultBindings> output;\n}\n\n/**\n * Safely cast a query operation output to a quads output.\n * This will throw a runtime error if the output is of the incorrect type.\n * @param {IQueryOperationResult} output A query operation output.\n * @return {IQueryOperationResultQuads} A quads query operation output.\n */\nexport function getSafeQuads(output: IQueryOperationResult): IQueryOperationResultQuads {\n  validateQueryOutput(output, 'quads');\n  return <IQueryOperationResultQuads> output;\n}\n\n/**\n * Safely cast a query operation output to a boolean output.\n * This will throw a runtime error if the output is of the incorrect type.\n * @param {IQueryOperationResult} output A query operation output.\n * @return {IQueryOperationResultBoolean} A boolean query operation output.\n */\nexport function getSafeBoolean(output: IQueryOperationResult): IQueryOperationResultBoolean {\n  validateQueryOutput(output, 'boolean');\n  return <IQueryOperationResultBoolean> output;\n}\n\n/**\n * Safely cast a query operation output to a void output.\n * This will throw a runtime error if the output is of the incorrect type.\n * @param {IQueryOperationResult} output A query operation output.\n * @return {IQueryOperationResultVoid} A void query operation output.\n */\nexport function getSafeVoid(output: IQueryOperationResult): IQueryOperationResultVoid {\n  validateQueryOutput(output, 'void');\n  return <IQueryOperationResultVoid> output;\n}\n\n/**\n * Throw an error if the output type does not match the expected type.\n * @param {IQueryOperationResult} output A query operation output.\n * @param {string} expectedType The expected output type.\n */\nexport function validateQueryOutput(output: IQueryOperationResult, expectedType: IQueryOperationResult['type']): void {\n  if (output.type !== expectedType) {\n    throw new Error(`Invalid query output type: Expected '${expectedType}' but got '${output.type}'`);\n  }\n}\n\n/**\n * Test if the context contains the readOnly flag.\n * @param context An action context.\n */\nexport function testReadOnly(context: IActionContext): TestResult<any> {\n  if (context.get(KeysQueryOperation.readOnly)) {\n    return failTest(`Attempted a write operation in read-only mode`);\n  }\n  return passTestVoid();\n}\n\n/**\n * Obtain the query source attached to the given operation.\n * @param operation An algebra operation.\n */\nexport function getOperationSource(operation: Algebra.Operation): IQuerySourceWrapper | undefined {\n  return <IQuerySourceWrapper> operation.metadata?.scopedSource;\n}\n\n/**\n * Assign a source wrapper to the given operation.\n * The operation is copied and returned.\n * @param operation An operation.\n * @param source A source wrapper.\n */\nexport function assignOperationSource<O extends Algebra.Operation>(operation: O, source: IQuerySourceWrapper): O {\n  operation = { ...operation };\n  operation.metadata = operation.metadata ? { ...operation.metadata } : {};\n  operation.metadata.scopedSource = source;\n  return operation;\n}\n\n/**\n * Remove the source wrapper from the given operation.\n * The operation is mutated.\n * @param operation An operation.\n */\nexport function removeOperationSource(operation: Algebra.Operation): void {\n  delete operation.metadata?.scopedSource;\n  if (operation.metadata && Object.keys(operation.metadata).length === 0) {\n    delete operation.metadata;\n  }\n}\n"]}