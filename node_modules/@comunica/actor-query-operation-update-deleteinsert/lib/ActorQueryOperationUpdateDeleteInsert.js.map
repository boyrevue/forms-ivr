{"version":3,"file":"ActorQueryOperationUpdateDeleteInsert.js","sourceRoot":"","sources":["ActorQueryOperationUpdateDeleteInsert.ts"],"names":[],"mappings":";;;AAAA,+FAAoF;AAGpF,uEAEuC;AAEvC,+DAA0D;AAG1D,6EAAmE;AACnE,2EAAgF;AAGhF,iDAA8C;AAG9C;;GAEG;AACH,MAAa,qCAAsC,SAAQ,sDAAsD;IAM/G,YAAmB,IAAgD;QACjE,KAAK,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAHpB,qBAAgB,GAAG,CAAC,CAAC;IAI/B,CAAC;IAEM,KAAK,CAAC,aAAa,CACxB,SAA+B,EAC/B,OAAuB;QAEvB,OAAO,IAAA,oCAAY,EAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAA+B,EAAE,OAAuB;QAEhF,MAAM,WAAW,GAAwB,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QACpF,MAAM,eAAe,GAAG,MAAM,wCAAe,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;QAC9G,4BAA4B;QAC5B,MAAM,aAAa,GAAmB,SAAS,CAAC,KAAK,CAAC,CAAC;YACrD,IAAA,uCAAe,EAAC,MAAM,IAAI,CAAC,sBAAsB;iBAC9C,OAAO,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC;YACrE,IAAI,6BAAa,CAAe,CAAE,eAAe,CAAC,QAAQ,EAAE,CAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAExF,2DAA2D;QAC3D,IAAI,gBAAqD,CAAC;QAC1D,IAAI,gBAAqD,CAAC;QAC1D,IAAI,SAAS,CAAC,MAAM,EAAE,CAAC;YACrB,yFAAyF;YACzF,gBAAgB,GAAG,IAAI,yDAAuB,CAC5C,WAAW,EACX,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,yDAAuB,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,EACzG,aAAa,CAAC,KAAK,EAAE,CACtB,CAAC;YACF,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC;QACD,IAAI,SAAS,CAAC,MAAM,EAAE,CAAC;YACrB,yFAAyF;YACzF,gBAAgB,GAAG,IAAI,yDAAuB,CAC5C,WAAW,EACX,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,yDAAuB,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,EACzG,aAAa,CAAC,KAAK,EAAE,CACtB,CAAC;YACF,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC;QAED,sCAAsC;QACtC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;YACzD,gBAAgB;YAChB,gBAAgB;YAChB,OAAO;SACR,CAAC,CAAC;QAEH,OAAO;YACL,IAAI,EAAE,MAAM;YACZ,OAAO;SACR,CAAC;IACJ,CAAC;CACF;AA7DD,sFA6DC","sourcesContent":["import { BindingsToQuadsIterator } from '@comunica/actor-query-operation-construct';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport {\n  ActorQueryOperationTypedMediated,\n} from '@comunica/bus-query-operation';\nimport type { MediatorRdfUpdateQuads } from '@comunica/bus-rdf-update-quads';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport type { IQueryOperationResult, BindingsStream, IActionContext, ComunicaDataFactory } from '@comunica/types';\nimport { BindingsFactory } from '@comunica/utils-bindings-factory';\nimport { getSafeBindings, testReadOnly } from '@comunica/utils-query-operation';\nimport type * as RDF from '@rdfjs/types';\nimport type { AsyncIterator } from 'asynciterator';\nimport { ArrayIterator } from 'asynciterator';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Update DeleteInsert Query Operation Actor.\n */\nexport class ActorQueryOperationUpdateDeleteInsert extends ActorQueryOperationTypedMediated<Algebra.DeleteInsert> {\n  public readonly mediatorUpdateQuads: MediatorRdfUpdateQuads;\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  protected blankNodeCounter = 0;\n\n  public constructor(args: IActorQueryOperationUpdateDeleteInsertArgs) {\n    super(args, 'deleteinsert');\n  }\n\n  public async testOperation(\n    operation: Algebra.DeleteInsert,\n    context: IActionContext,\n  ): Promise<TestResult<IActorTest>> {\n    return testReadOnly(context);\n  }\n\n  public async runOperation(operation: Algebra.DeleteInsert, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    const dataFactory: ComunicaDataFactory = context.getSafe(KeysInitQuery.dataFactory);\n    const bindingsFactory = await BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory);\n    // Evaluate the where clause\n    const whereBindings: BindingsStream = operation.where ?\n      getSafeBindings(await this.mediatorQueryOperation\n        .mediate({ operation: operation.where, context })).bindingsStream :\n      new ArrayIterator<RDF.Bindings>([ bindingsFactory.bindings() ], { autoStart: false });\n\n    // Construct triples using the result based on the pattern.\n    let quadStreamInsert: AsyncIterator<RDF.Quad> | undefined;\n    let quadStreamDelete: AsyncIterator<RDF.Quad> | undefined;\n    if (operation.insert) {\n      // Localize blank nodes in pattern, to avoid clashes across different INSERT/DELETE calls\n      quadStreamInsert = new BindingsToQuadsIterator(\n        dataFactory,\n        operation.insert.map(BindingsToQuadsIterator.localizeQuad.bind(null, dataFactory, this.blankNodeCounter)),\n        whereBindings.clone(),\n      );\n      this.blankNodeCounter++;\n    }\n    if (operation.delete) {\n      // Localize blank nodes in pattern, to avoid clashes across different INSERT/DELETE calls\n      quadStreamDelete = new BindingsToQuadsIterator(\n        dataFactory,\n        operation.delete.map(BindingsToQuadsIterator.localizeQuad.bind(null, dataFactory, this.blankNodeCounter)),\n        whereBindings.clone(),\n      );\n      this.blankNodeCounter++;\n    }\n\n    // Evaluate the required modifications\n    const { execute } = await this.mediatorUpdateQuads.mediate({\n      quadStreamInsert,\n      quadStreamDelete,\n      context,\n    });\n\n    return {\n      type: 'void',\n      execute,\n    };\n  }\n}\n\nexport interface IActorQueryOperationUpdateDeleteInsertArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * The RDF Update Quads mediator\n   */\n  mediatorUpdateQuads: MediatorRdfUpdateQuads;\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n}\n"]}