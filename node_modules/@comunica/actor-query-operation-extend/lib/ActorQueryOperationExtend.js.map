{"version":3,"file":"ActorQueryOperationExtend.js","sourceRoot":"","sources":["ActorQueryOperationExtend.ts"],"names":[],"mappings":";;;AAEA,uEAAiF;AAEjF,yCAA8C;AAE9C,6EAAoE;AAEpE,qFAAyE;AACzE,2EAAkE;AAGlE;;;;GAIG;AACH,MAAa,yBAA0B,SAAQ,sDAAgD;IAG7F,YAAmB,IAAoC;QACrD,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACtB,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAC,kCAAkC,CAAC;IACpF,CAAC;IAEM,KAAK,CAAC,aAAa;QACxB,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAyB,EAAE,OAAuB;QAE1E,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,SAAS,CAAC;QAElD,MAAM,MAAM,GAAkC,IAAA,uCAAe,EAC3D,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CACzE,CAAC;QAEF,+CAA+C;QAC/C,IAAI,CAAC,MAAM,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;YACvG,MAAM,IAAI,KAAK,CAAC,gCAAgC,QAAQ,CAAC,KAAK,+BAA+B,CAAC,CAAC;QACjG,CAAC;QAED,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kCAAkC;aAC5D,OAAO,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,CAAC;QAE7C,6EAA6E;QAC7E,MAAM,SAAS,GAAG,KAAK,EAAC,QAAkB,EAAE,IAAS,EAAE,IAAsC,EAAiB,EAAE;YAC9G,IAAI,CAAC;gBACH,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAClD,4DAA4D;gBAC5D,4BAA4B;gBAC5B,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;gBAChD,IAAI,CAAC,QAAQ,CAAC,CAAC;YACjB,CAAC;YAAC,OAAO,KAAc,EAAE,CAAC;gBACxB,IAAI,IAAA,8CAAiB,EAAS,KAAK,CAAC,EAAE,CAAC;oBACrC,8DAA8D;oBAC9D,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACf,wBAAwB;oBACxB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,0CAA6D,KAAM,CAAC,OAAO,GAAG;wBAClG,kBAAkB,IAAA,yCAAgB,EAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACrD,CAAC;qBAAM,CAAC;oBACN,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACtC,CAAC;YACH,CAAC;YACD,IAAI,EAAE,CAAC;QACT,CAAC,CAAC;QAEF,kDAAkD;QAClD,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,SAAS,CAAW,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;QAClG,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,KAAK,CAAC,QAAQ;gBACZ,MAAM,cAAc,GAAG,MAAM,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAC/C,OAAO,EAAE,GAAG,cAAc,EAAE,SAAS,EAAE,CAAE,GAAG,cAAc,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,EAAC,CAAC;YAC1G,CAAC;SACF,CAAC;IACJ,CAAC;CACF;AA7DD,8DA6DC","sourcesContent":["import type { MediatorExpressionEvaluatorFactory } from '@comunica/bus-expression-evaluator-factory';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { Bindings, IActionContext, IQueryOperationResult, IQueryOperationResultBindings } from '@comunica/types';\nimport { bindingsToString } from '@comunica/utils-bindings-factory';\nimport type { ExpressionError } from '@comunica/utils-expression-evaluator';\nimport { isExpressionError } from '@comunica/utils-expression-evaluator';\nimport { getSafeBindings } from '@comunica/utils-query-operation';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Extend Query Operation Actor.\n *\n * See https://www.w3.org/TR/sparql11-query/#sparqlAlgebra;\n */\nexport class ActorQueryOperationExtend extends ActorQueryOperationTypedMediated<Algebra.Extend> {\n  private readonly mediatorExpressionEvaluatorFactory: MediatorExpressionEvaluatorFactory;\n\n  public constructor(args: IActorQueryOperationExtendArgs) {\n    super(args, 'extend');\n    this.mediatorExpressionEvaluatorFactory = args.mediatorExpressionEvaluatorFactory;\n  }\n\n  public async testOperation(): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async runOperation(operation: Algebra.Extend, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    const { expression, input, variable } = operation;\n\n    const output: IQueryOperationResultBindings = getSafeBindings(\n      await this.mediatorQueryOperation.mediate({ operation: input, context }),\n    );\n\n    // Throw if the variable has already been bound\n    if ((await output.metadata()).variables.some(innerVariable => innerVariable.variable.equals(variable))) {\n      throw new Error(`Illegal binding to variable '${variable.value}' that has already been bound`);\n    }\n\n    const evaluator = await this.mediatorExpressionEvaluatorFactory\n      .mediate({ algExpr: expression, context });\n\n    // Transform the stream by extending each Bindings with the expression result\n    const transform = async(bindings: Bindings, next: any, push: (pusbBindings: Bindings) => void): Promise<void> => {\n      try {\n        const result = await evaluator.evaluate(bindings);\n        // Extend operation is undefined when the key already exists\n        // We just override it here.\n        const extended = bindings.set(variable, result);\n        push(extended);\n      } catch (error: unknown) {\n        if (isExpressionError(<Error> error)) {\n          // Errors silently don't actually extend according to the spec\n          push(bindings);\n          // But let's warn anyway\n          this.logWarn(context, `Expression error for extend operation (${(<ExpressionError> error).message})` +\n            `with bindings '${bindingsToString(bindings)}'`);\n        } else {\n          bindingsStream.emit('error', error);\n        }\n      }\n      next();\n    };\n\n    // eslint-disable-next-line ts/no-misused-promises\n    const bindingsStream = output.bindingsStream.transform<Bindings>({ autoStart: false, transform });\n    return {\n      type: 'bindings',\n      bindingsStream,\n      async metadata() {\n        const outputMetadata = await output.metadata();\n        return { ...outputMetadata, variables: [ ...outputMetadata.variables, { variable, canBeUndef: false }]};\n      },\n    };\n  }\n}\n\nexport interface IActorQueryOperationExtendArgs extends IActorQueryOperationTypedMediatedArgs {\n  mediatorExpressionEvaluatorFactory: MediatorExpressionEvaluatorFactory;\n}\n"]}