{"version":3,"file":"TermFunctionStrAfter.js","sourceRoot":"","sources":["TermFunctionStrAfter.ts"],"names":[],"mappings":";;;AAAA,yEAAkE;AAMlE,qFAO8C;AAE9C;;GAEG;AACH,MAAa,oBAAqB,SAAQ,uCAAgB;IACxD;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,2CAAc,CAAC,QAAQ;YACjC,SAAS,EAAE,IAAA,oCAAO,EAAC,2CAAc,CAAC,QAAQ,CAAC;iBACxC,aAAa,CACZ,CAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,UAAU,CAAE,EAC1C,GAAG,EAAE,CAAC,CAAC,IAAY,EAAE,IAAY,EAAE,EAAE,CAAC,IAAA,mCAAM,EAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAChG;iBACA,QAAQ,CACP,CAAE,oCAAO,CAAC,eAAe,EAAE,oCAAO,CAAC,UAAU,CAAE,EAC/C,GAAG,EAAE,CAAC,CAAC,IAAuB,EAAE,IAAmB,EAAE,EAAE;gBACrD,MAAM,CAAE,EAAE,EAAE,EAAE,CAAE,GAAG,CAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAE,CAAC;gBACxD,MAAM,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;gBACtD,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAA,uCAAU,EAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAA,mCAAM,EAAC,GAAG,CAAC,CAAC;YACnE,CAAC,CACF;iBACA,QAAQ,CACP,CAAE,oCAAO,CAAC,eAAe,EAAE,oCAAO,CAAC,eAAe,CAAE,EACpD,GAAG,EAAE,CAAC,CAAC,IAAuB,EAAE,IAAuB,EAAE,EAAE;gBACzD,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACpC,MAAM,IAAI,0DAA6B,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACtD,CAAC;gBACD,MAAM,CAAE,EAAE,EAAE,EAAE,CAAE,GAAG,CAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAE,CAAC;gBACxD,MAAM,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;gBACtD,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAA,uCAAU,EAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAA,mCAAM,EAAC,GAAG,CAAC,CAAC;YACnE,CAAC,CACF;iBACA,OAAO,EAAE;SACb,CAAC,CAAC;IACL,CAAC;CACF;AAhCD,oDAgCC","sourcesContent":["import { TermFunctionBase } from '@comunica/bus-function-factory';\nimport type {\n  StringLiteral,\n\n  LangStringLiteral,\n} from '@comunica/utils-expression-evaluator';\nimport {\n  declare,\n  IncompatibleLanguageOperation,\n  langString,\n  SparqlOperator,\n  string,\n  TypeURL,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strafter\n */\nexport class TermFunctionStrAfter extends TermFunctionBase {\n  public constructor() {\n    super({\n      arity: 2,\n      operator: SparqlOperator.STRAFTER,\n      overloads: declare(SparqlOperator.STRAFTER)\n        .onBinaryTyped(\n          [ TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n          () => (arg1: string, arg2: string) => string(arg1.slice(arg1.indexOf(arg2)).slice(arg2.length)),\n        )\n        .onBinary(\n          [ TypeURL.RDF_LANG_STRING, TypeURL.XSD_STRING ],\n          () => (arg1: LangStringLiteral, arg2: StringLiteral) => {\n            const [ a1, a2 ] = [ arg1.typedValue, arg2.typedValue ];\n            const sub = a1.slice(a1.indexOf(a2)).slice(a2.length);\n            return sub || !a2 ? langString(sub, arg1.language) : string(sub);\n          },\n        )\n        .onBinary(\n          [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n          () => (arg1: LangStringLiteral, arg2: LangStringLiteral) => {\n            if (arg1.language !== arg2.language) {\n              throw new IncompatibleLanguageOperation(arg1, arg2);\n            }\n            const [ a1, a2 ] = [ arg1.typedValue, arg2.typedValue ];\n            const sub = a1.slice(a1.indexOf(a2)).slice(a2.length);\n            return sub || !a2 ? langString(sub, arg1.language) : string(sub);\n          },\n        )\n        .collect(),\n    });\n  }\n}\n"]}