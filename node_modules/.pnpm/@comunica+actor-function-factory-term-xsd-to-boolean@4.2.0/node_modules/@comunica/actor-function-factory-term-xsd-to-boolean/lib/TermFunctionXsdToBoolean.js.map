{"version":3,"file":"TermFunctionXsdToBoolean.js","sourceRoot":"","sources":["TermFunctionXsdToBoolean.ts"],"names":[],"mappings":";;;AAAA,yEAAkE;AAKlE,qFAK8C;AAE9C,MAAa,wBAAyB,SAAQ,uCAAgB;IAC5D;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,oCAAO,CAAC,WAAW;YAC7B,SAAS,EAAE,IAAA,oCAAO,EAAC,oCAAO,CAAC,WAAW,CAAC;iBACpC,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,GAAmB,EAAE,EAAE,CAAC,IAAA,iCAAI,EAAC,GAAG,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC;iBACtE,OAAO,CAAC,oCAAO,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC,GAAmB,EAAE,EAAE,CAAC,IAAA,iCAAI,EAAC,GAAG,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,CAAC;iBACxF,OAAO,CAAC,oCAAO,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,GAAmB,EAAE,EAAE;gBACzD,QAAQ,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC;oBAClB,KAAK,MAAM;wBACT,OAAO,IAAA,iCAAI,EAAC,IAAI,CAAC,CAAC;oBACpB,KAAK,OAAO;wBACV,OAAO,IAAA,iCAAI,EAAC,KAAK,CAAC,CAAC;oBACrB,KAAK,GAAG;wBACN,OAAO,IAAA,iCAAI,EAAC,IAAI,CAAC,CAAC;oBACpB,KAAK,GAAG;wBACN,OAAO,IAAA,iCAAI,EAAC,KAAK,CAAC,CAAC;oBACrB;wBACE,MAAM,IAAI,sCAAS,CAAC,GAAG,EAAE,oCAAO,CAAC,WAAW,CAAC,CAAC;gBAClD,CAAC;YACH,CAAC,EAAE,KAAK,CAAC;iBACR,OAAO,EAAE;SACb,CAAC,CAAC;IACL,CAAC;CACF;AAzBD,4DAyBC","sourcesContent":["import { TermFunctionBase } from '@comunica/bus-function-factory';\nimport type { TermExpression } from '@comunica/types';\nimport type {\n  NumericLiteral,\n} from '@comunica/utils-expression-evaluator';\nimport {\n  bool,\n  CastError,\n  declare,\n  TypeURL,\n} from '@comunica/utils-expression-evaluator';\n\nexport class TermFunctionXsdToBoolean extends TermFunctionBase {\n  public constructor() {\n    super({\n      arity: 1,\n      operator: TypeURL.XSD_BOOLEAN,\n      overloads: declare(TypeURL.XSD_BOOLEAN)\n        .onNumeric1(() => (val: NumericLiteral) => bool(val.coerceEBV()), true)\n        .onUnary(TypeURL.XSD_BOOLEAN, () => (val: TermExpression) => bool(val.coerceEBV()), true)\n        .onUnary(TypeURL.XSD_STRING, () => (val: TermExpression) => {\n          switch (val.str()) {\n            case 'true':\n              return bool(true);\n            case 'false':\n              return bool(false);\n            case '1':\n              return bool(true);\n            case '0':\n              return bool(false);\n            default:\n              throw new CastError(val, TypeURL.XSD_BOOLEAN);\n          }\n        }, false)\n        .collect(),\n    });\n  }\n}\n"]}