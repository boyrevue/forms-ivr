{"version":3,"file":"ActorFunctionFactoryDedicated.js","sourceRoot":"","sources":["ActorFunctionFactoryDedicated.ts"],"names":[],"mappings":";;;AACA,yCAAwD;AAExD,iEAA8D;AAI9D;;GAEG;AACH,MAAsB,6BAA8B,SAAQ,2CAAoB;IAI9E,YAAsB,IAAwC;QAC5D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAA8B;QAC9C,iHAAiH;QACjH,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,EAAE,CAAC;YAC7G,OAAO,IAAA,mBAAY,GAAE,CAAC;QACxB,CAAC;QACD,OAAO,IAAA,eAAQ,EAAC,SAAS,IAAI,CAAC,IAAI,wCAAwC,MAAM,CAAC,YAAY,eAAe,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,qBAAqB,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACpM,CAAC;CACF;AAfD,sEAeC","sourcesContent":["import type { IActorTest, TestResult } from '@comunica/core';\nimport { failTest, passTestVoid } from '@comunica/core';\nimport type { IActionFunctionFactory, IActorFunctionFactoryArgs } from './ActorFunctionFactory';\nimport { ActorFunctionFactory } from './ActorFunctionFactory';\n\ntype StringArray = [ string, ...string[]];\n\n/**\n * A base implementation for function factory actors for a dedicated operator.\n */\nexport abstract class ActorFunctionFactoryDedicated extends ActorFunctionFactory {\n  public readonly functionNames: StringArray;\n  public readonly termFunction: boolean;\n\n  protected constructor(args: IActorFunctionFactoryDedicatedArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionFunctionFactory): Promise<TestResult<IActorTest>> {\n    // Name must match, if this is a term function, all is fine, if not, look whether term-function is not requested.\n    if (this.functionNames.includes(action.functionName) && (this.termFunction || !action.requireTermExpression)) {\n      return passTestVoid();\n    }\n    return failTest(`Actor ${this.name} can not provide implementation for \"${action.functionName}\", only for ${this.termFunction ? '' : 'non-termExpression '}${this.functionNames.join(' and ')}.`);\n  }\n}\n\nexport interface IActorFunctionFactoryDedicatedArgs extends IActorFunctionFactoryArgs {\n  functionNames: StringArray;\n  termFunction: boolean;\n}\n"]}