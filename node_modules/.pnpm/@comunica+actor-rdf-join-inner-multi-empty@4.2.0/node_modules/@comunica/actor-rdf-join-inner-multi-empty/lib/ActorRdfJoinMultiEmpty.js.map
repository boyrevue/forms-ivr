{"version":3,"file":"ActorRdfJoinMultiEmpty.js","sourceRoot":"","sources":["ActorRdfJoinMultiEmpty.ts"],"names":[],"mappings":";;;AAMA,yDAAsD;AACtD,+DAA0D;AAE1D,yCAAgE;AAGhE,6DAAmE;AAEnE,iDAA8C;AAE9C;;GAEG;AACH,MAAa,sBAAuB,SAAQ,2BAAY;IACtD,YAAmB,IAAuB;QACxC,KAAK,CAAC,IAAI,EAAE;YACV,WAAW,EAAE,OAAO;YACpB,YAAY,EAAE,aAAa;YAC3B,eAAe,EAAE,IAAI;SACtB,CAAC,CAAC;IACL,CAAC;IAEe,KAAK,CAAC,IAAI,CACxB,MAAsB;QAEtB,IAAI,CAAC,MAAM,2BAAY,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;aAClD,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,2BAAY,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;YACtE,OAAO,IAAA,eAAQ,EAAC,SAAS,IAAI,CAAC,IAAI,oDAAoD,CAAC,CAAC;QAC1F,CAAC;QACD,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAEkB,KAAK,CAAC,SAAS,CAAC,MAAsB;QACvD,oBAAoB;QACpB,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;YACnC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;QACtC,CAAC;QAED,MAAM,WAAW,GAAwB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QAC3F,OAAO;YACL,MAAM,EAAE;gBACN,cAAc,EAAE,IAAI,6BAAa,CAAe,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;gBACzE,QAAQ,EAAE,KAAK,IAAG,EAAE,CAAC,CAAC;oBACpB,KAAK,EAAE,IAAI,wCAAuB,EAAE;oBACpC,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE;oBACxC,SAAS,EAAE,2BAAY,CAAC,aAAa,CAAC,WAAW,EAAE,MAAM,2BAAY,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBACpG,CAAC;gBACF,IAAI,EAAE,UAAU;aACjB;SACF,CAAC;IACJ,CAAC;IAES,KAAK,CAAC,mBAAmB,CACjC,MAAsB,EACtB,QAAmC;QAEnC,OAAO,IAAA,2BAAoB,EAAC;YAC1B,UAAU,EAAE,CAAC;YACb,cAAc,EAAE,CAAC;YACjB,aAAa,EAAE,CAAC;YAChB,WAAW,EAAE,CAAC;SACf,EAAE,QAAQ,CAAC,CAAC;IACf,CAAC;CACF;AAlDD,wDAkDC","sourcesContent":["import type {\n  IActionRdfJoin,\n  IActorRdfJoinOutputInner,\n  IActorRdfJoinArgs,\n  IActorRdfJoinTestSideData,\n} from '@comunica/bus-rdf-join';\nimport { ActorRdfJoin } from '@comunica/bus-rdf-join';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { TestResult } from '@comunica/core';\nimport { passTestWithSideData, failTest } from '@comunica/core';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport type { ComunicaDataFactory } from '@comunica/types';\nimport { MetadataValidationState } from '@comunica/utils-metadata';\nimport type * as RDF from '@rdfjs/types';\nimport { ArrayIterator } from 'asynciterator';\n\n/**\n * A comunica Multi Empty RDF Join Actor.\n */\nexport class ActorRdfJoinMultiEmpty extends ActorRdfJoin {\n  public constructor(args: IActorRdfJoinArgs) {\n    super(args, {\n      logicalType: 'inner',\n      physicalName: 'multi-empty',\n      canHandleUndefs: true,\n    });\n  }\n\n  public override async test(\n    action: IActionRdfJoin,\n  ): Promise<TestResult<IMediatorTypeJoinCoefficients, IActorRdfJoinTestSideData>> {\n    if ((await ActorRdfJoin.getMetadatas(action.entries))\n      .every(metadata => ActorRdfJoin.getCardinality(metadata).value > 0)) {\n      return failTest(`Actor ${this.name} can only join entries where at least one is empty`);\n    }\n    return super.test(action);\n  }\n\n  protected override async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    // Close all entries\n    for (const entry of action.entries) {\n      entry.output.bindingsStream.close();\n    }\n\n    const dataFactory: ComunicaDataFactory = action.context.getSafe(KeysInitQuery.dataFactory);\n    return {\n      result: {\n        bindingsStream: new ArrayIterator<RDF.Bindings>([], { autoStart: false }),\n        metadata: async() => ({\n          state: new MetadataValidationState(),\n          cardinality: { type: 'exact', value: 0 },\n          variables: ActorRdfJoin.joinVariables(dataFactory, await ActorRdfJoin.getMetadatas(action.entries)),\n        }),\n        type: 'bindings',\n      },\n    };\n  }\n\n  protected async getJoinCoefficients(\n    action: IActionRdfJoin,\n    sideData: IActorRdfJoinTestSideData,\n  ): Promise<TestResult<IMediatorTypeJoinCoefficients, IActorRdfJoinTestSideData>> {\n    return passTestWithSideData({\n      iterations: 0,\n      persistedItems: 0,\n      blockingItems: 0,\n      requestTime: 0,\n    }, sideData);\n  }\n}\n"]}