{"version":3,"file":"ExpressionFunctionNotIn.js","sourceRoot":"","sources":["ExpressionFunctionNotIn.ts"],"names":[],"mappings":";;;AACA,yEAAwE;AAKxE,qFAG8C;AAE9C;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,6CAAsB;IACjE,YAAoC,UAA+B;QACjE,KAAK,CAAC;YACJ,KAAK,EAAE,MAAM,CAAC,iBAAiB;YAC/B,QAAQ,EAAE,2CAAc,CAAC,MAAM;YAC/B,KAAK,EAAE,KAAK,EAAC,OAAqB,EAA2B,EAAE;gBAC7D,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAClD,OAAO,IAAA,iCAAI,EAAC,CAAmB,IAAK,CAAC,UAAU,CAAC,CAAC;YACnD,CAAC;SACF,CAAC,CAAC;QAR+B,eAAU,GAAV,UAAU,CAAqB;IASnE,CAAC;IAEe,UAAU,CAAC,IAAkB;QAC3C,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IACzB,CAAC;CACF;AAfD,0DAeC","sourcesContent":["import type { IExpressionFunction } from '@comunica/bus-function-factory';\nimport { ExpressionFunctionBase } from '@comunica/bus-function-factory';\nimport type { Expression, IEvalContext, TermExpression } from '@comunica/types';\nimport type {\n  BooleanLiteral,\n} from '@comunica/utils-expression-evaluator';\nimport {\n  bool,\n  SparqlOperator,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-not-in\n * This function doesn't require type promotion or subtype-substitution, everything works on TermExpression\n */\nexport class ExpressionFunctionNotIn extends ExpressionFunctionBase {\n  public constructor(private readonly inFunction: IExpressionFunction) {\n    super({\n      arity: Number.POSITIVE_INFINITY,\n      operator: SparqlOperator.NOT_IN,\n      apply: async(context: IEvalContext): Promise<TermExpression> => {\n        const isIn = await this.inFunction.apply(context);\n        return bool(!(<BooleanLiteral> isIn).typedValue);\n      },\n    });\n  }\n\n  public override checkArity(args: Expression[]): boolean {\n    return args.length > 0;\n  }\n}\n"]}