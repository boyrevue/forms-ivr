{"version":3,"file":"TermFunctionGreaterThanEqual.js","sourceRoot":"","sources":["TermFunctionGreaterThanEqual.ts"],"names":[],"mappings":";;;AACA,yEAAkE;AAElE,qFAG8C;AAE9C,MAAa,4BAA6B,SAAQ,uCAAgB;IAChE,YAAoC,qBAAoC;QACtE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,2CAAc,CAAC,GAAG;YAC5B,SAAS,EAAE,IAAA,oCAAO,EAAC,2CAAc,CAAC,GAAG,CAAC;iBACnC,GAAG,CAAC,CAAE,MAAM,EAAE,MAAM,CAAE,EAAE,QAAQ,CAAC,EAAE,CAClC,CAAC,CAAE,KAAK,EAAE,MAAM,CAAE,EAAE,EAAE;YACpB,mBAAmB;YACnB,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAE,MAAM,EAAE,KAAK,CAAE,EAAE,QAAQ,CAAC,CAAC;iBACxE,OAAO,EAAE;SACb,CAAC,CAAC;QAV+B,0BAAqB,GAArB,qBAAqB,CAAe;IAWxE,CAAC;CACF;AAbD,oEAaC","sourcesContent":["import type { ITermFunction } from '@comunica/bus-function-factory';\nimport { TermFunctionBase } from '@comunica/bus-function-factory';\n\nimport {\n  declare,\n  SparqlOperator,\n} from '@comunica/utils-expression-evaluator';\n\nexport class TermFunctionGreaterThanEqual extends TermFunctionBase {\n  public constructor(private readonly lessThanEqualFunction: ITermFunction) {\n    super({\n      arity: 2,\n      operator: SparqlOperator.GTE,\n      overloads: declare(SparqlOperator.GTE)\n        .set([ 'term', 'term' ], exprEval =>\n          ([ first, second ]) =>\n            // X >= Y -> Y <= X\n            this.lessThanEqualFunction.applyOnTerms([ second, first ], exprEval))\n        .collect(),\n    });\n  }\n}\n"]}