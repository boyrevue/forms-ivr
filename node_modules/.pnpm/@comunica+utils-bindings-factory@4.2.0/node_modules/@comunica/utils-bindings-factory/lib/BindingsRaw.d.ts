import type { IBindingsContextMergeHandler } from '@comunica/bus-merge-bindings-context';
import type { ComunicaDataFactory, IActionContext, IActionContextKey } from '@comunica/types';
import type * as RDF from '@rdfjs/types';
/**
 * An immutable.js-based BindingsRaw object.
 */
export declare class BindingsRaw implements RDF.Bindings {
    readonly type = "bindings";
    private readonly dataFactory;
    private readonly entries;
    private readonly contextHolder;
    constructor(dataFactory: ComunicaDataFactory, entries: Record<string, RDF.Term>, contextHolder?: IContextHolder);
    has(key: RDF.Variable | string): boolean;
    get(key: RDF.Variable | string): RDF.Term | undefined;
    set(key: RDF.Variable | string, value: RDF.Term): BindingsRaw;
    delete(key: RDF.Variable | string): BindingsRaw;
    keys(): Iterable<RDF.Variable>;
    values(): Iterable<RDF.Term>;
    forEach(fn: (value: RDF.Term, key: RDF.Variable) => any): void;
    get size(): number;
    [Symbol.iterator](): Iterator<[RDF.Variable, RDF.Term]>;
    equals(other: RDF.Bindings | null | undefined): boolean;
    filter(fn: (value: RDF.Term, key: RDF.Variable) => boolean): BindingsRaw;
    map(fn: (value: RDF.Term, key: RDF.Variable) => RDF.Term): BindingsRaw;
    merge(other: RDF.Bindings | BindingsRaw): BindingsRaw | undefined;
    mergeWith(merger: (self: RDF.Term, other: RDF.Term, key: RDF.Variable) => RDF.Term, other: RDF.Bindings | BindingsRaw): BindingsRaw;
    protected createBindingsWithContexts(entries: Record<string, RDF.Term>, other: RDF.Bindings | BindingsRaw): BindingsRaw;
    private static mergeContext;
    setContextEntry<V>(key: IActionContextKey<V>, value: any): BindingsRaw;
    setContextEntryRaw<V>(key: IActionContextKey<V>, value: any): BindingsRaw;
    deleteContextEntry<V>(key: IActionContextKey<V>): BindingsRaw;
    deleteContextEntryRaw<V>(key: IActionContextKey<V>): BindingsRaw;
    getContext(): IActionContext | undefined;
    getContextEntry<V>(key: IActionContextKey<V>): V | undefined;
    toString(): string;
    protected mapIterable<T, U>(iterable: Iterable<T>, callback: (value: T) => U): Iterable<U>;
    protected iteratorToIterable<T>(iterator: Iterator<T>): Iterable<T>;
}
export interface IContextHolder {
    contextMergeHandlers: Record<string, IBindingsContextMergeHandler<any>>;
    context?: IActionContext;
}
