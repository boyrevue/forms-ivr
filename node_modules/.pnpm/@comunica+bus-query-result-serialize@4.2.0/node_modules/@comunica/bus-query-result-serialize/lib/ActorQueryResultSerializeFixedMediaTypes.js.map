{"version":3,"file":"ActorQueryResultSerializeFixedMediaTypes.js","sourceRoot":"","sources":["ActorQueryResultSerializeFixedMediaTypes.ts"],"names":[],"mappings":";;;AACA,mFAAmF;AAEnF,yCAA8C;AAQ9C;;;;;;;;;GASG;AACH,MAAsB,wCAAyC,SAAQ,wDAItE;IAEC,4BAA4B;IAC5B;;;;;OAKG;IACH,YAAmB,IAAmD;QACpE,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IACD,2BAA2B;IAEpB,KAAK,CAAC,iBAAiB,CAC5B,OAA+B,EAC/B,QAAwB;QAExB,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;CACF;AAxBD,4FAwBC","sourcesContent":["import type { IActorArgsMediaTypedFixed } from '@comunica/actor-abstract-mediatyped';\nimport { ActorAbstractMediaTypedFixed } from '@comunica/actor-abstract-mediatyped';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { IActionContext } from '@comunica/types';\nimport type {\n  IActionSparqlSerialize,\n  IActorQueryResultSerializeOutput,\n  ActorQueryResultSerialize,\n} from './ActorQueryResultSerialize';\n\n/**\n * A base actor for listening to SPARQL serialize events that has fixed media types.\n *\n * Actor types:\n * * Input:  IActionSparqlSerializeOrMediaType:      A serialize input or a media type input.\n * * Test:   <none>\n * * Output: IActorQueryResultSerializeOutputOrMediaType: The serialized quads.\n *\n * @see IActionInit\n */\nexport abstract class ActorQueryResultSerializeFixedMediaTypes extends ActorAbstractMediaTypedFixed<\nIActionSparqlSerialize,\nIActorTest,\nIActorQueryResultSerializeOutput\n>\n  implements IActorQueryResultSerializeFixedMediaTypesArgs, ActorQueryResultSerialize {\n  /* eslint-disable max-len */\n  /**\n   * TODO: rm this (and eslint-disable) once we remove the abstract media typed actor\n   * @param args -\n   *   \\ @defaultNested {<cbqrs:components/ActorQueryResultSerialize.jsonld#ActorQueryResultSerialize_default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   *   \\ @defaultNested {Query result serialization failed: none of the configured actors were able to serialize for type ${action.handle.type}} busFailMessage\n   */\n  public constructor(args: IActorQueryResultSerializeFixedMediaTypesArgs) {\n    super(args);\n  }\n  /* eslint-enable max-len */\n\n  public async testHandleChecked(\n    _action: IActionSparqlSerialize,\n    _context: IActionContext,\n  ): Promise<TestResult<boolean>> {\n    return passTestVoid();\n  }\n}\n\nexport interface IActorQueryResultSerializeFixedMediaTypesArgs\n  extends IActorArgsMediaTypedFixed<IActionSparqlSerialize, IActorTest, IActorQueryResultSerializeOutput> {}\n"]}