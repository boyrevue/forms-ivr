import type { IDataset, QueryResultCardinality } from '@comunica/types';
import { Algebra } from 'sparqlalgebrajs';
/**
 * Estimate the cardinality of the provided operation using the specified dataset metadata.
 * This is the primary function that should be called to perform cardinality estimation.
 */
export declare function estimateCardinality(operation: Algebra.Operation, dataset: IDataset): QueryResultCardinality;
/**
 * Estimate the cardinality of a minus, by taking into account the input cardinalities.
 */
export declare function estimateMinusCardinality(minus: Algebra.Minus, dataset: IDataset): QueryResultCardinality;
/**
 * Estimate the cardinality of a slice operation, taking into account the input cardinality and the slice range.
 */
export declare function estimateSliceCardinality(slice: Algebra.Slice, dataset: IDataset): QueryResultCardinality;
/**
 * Estimate the cardinality of a union, using a sum of the individual input cardinalities.
 */
export declare function estimateUnionCardinality(input: Algebra.Operation[], dataset: IDataset): QueryResultCardinality;
/**
 * Estimate the cardinality of a join. This estimation is done by:
 *  1. Grouping operations together based on variables.
 *  2. Selecting the minimum op cardinality in each group as the cardinality of that group.
 *  3. Multiplying cardinalities of these (detached) groups.
 *
 * This should provide a good balance between selective groups of operations,
 * as well as cartesian joins between groups that do not overlap.
 */
export declare function estimateJoinCardinality(operations: Algebra.Operation[], dataset: IDataset): QueryResultCardinality;
/**
 * Estimate the cardinality of a negated property set, by subtracting the non-inversed
 * estimate from the total number of triples.
 */
export declare function estimateNpsCardinality(nps: Algebra.Nps, dataset: IDataset): QueryResultCardinality;
