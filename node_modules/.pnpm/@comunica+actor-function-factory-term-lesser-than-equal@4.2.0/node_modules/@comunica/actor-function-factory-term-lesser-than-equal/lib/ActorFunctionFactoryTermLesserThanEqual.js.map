{"version":3,"file":"ActorFunctionFactoryTermLesserThanEqual.js","sourceRoot":"","sources":["ActorFunctionFactoryTermLesserThanEqual.ts"],"names":[],"mappings":";;;AAQA,yEAEwC;AAExC,qFAAsE;AACtE,+EAA4E;AAM5E;;GAEG;AACH,MAAa,uCAAwC,SAAQ,oDAA6B;IAGxF,YAAmB,IAA0D;QAC3E,KAAK,CAAC;YACJ,GAAG,IAAI;YACP,aAAa,EAAE,CAAE,2CAAc,CAAC,GAAG,CAAE;YACrC,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;QACH,IAAI,CAAC,uBAAuB,GAA6B,IAAI,CAAC,uBAAuB,CAAC;IACxF,CAAC;IAEM,KAAK,CAAC,GAAG,CAAmC,IAAO;QAExD,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC;YAClE,YAAY,EAAE,2CAAc,CAAC,KAAK;YAClC,qBAAqB,EAAE,IAAI;YAC3B,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC;QACH,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC;YAClE,YAAY,EAAE,2CAAc,CAAC,EAAE;YAC/B,qBAAqB,EAAE,IAAI;YAC3B,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC,CAAC;QACH,OAAO,IAAI,yDAA2B,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;IAC7E,CAAC;CACF;AA5BD,0FA4BC","sourcesContent":["import type {\n  IActionFunctionFactory,\n  IActorFunctionFactoryArgs,\n  IActorFunctionFactoryOutput,\n  IActorFunctionFactoryOutputTerm,\n  MediatorFunctionFactory,\n  MediatorFunctionFactoryUnsafe,\n} from '@comunica/bus-function-factory';\nimport {\n  ActorFunctionFactoryDedicated,\n} from '@comunica/bus-function-factory';\n\nimport { SparqlOperator } from '@comunica/utils-expression-evaluator';\nimport { TermFunctionLesserThanEqual } from './TermFunctionLesserThanEqual';\n\ninterface IActorFunctionFactoryTermFunctionLesserThanEqualArgs extends IActorFunctionFactoryArgs {\n  mediatorFunctionFactory: MediatorFunctionFactoryUnsafe;\n}\n\n/**\n * A comunica TermFunctionLesserThanEqual Function Factory Actor.\n */\nexport class ActorFunctionFactoryTermLesserThanEqual extends ActorFunctionFactoryDedicated {\n  private readonly mediatorFunctionFactory: MediatorFunctionFactory;\n\n  public constructor(args: IActorFunctionFactoryTermFunctionLesserThanEqualArgs) {\n    super({\n      ...args,\n      functionNames: [ SparqlOperator.LTE ],\n      termFunction: true,\n    });\n    this.mediatorFunctionFactory = <MediatorFunctionFactory> args.mediatorFunctionFactory;\n  }\n\n  public async run<T extends IActionFunctionFactory>(args: T):\n  Promise<T extends { requireTermExpression: true } ? IActorFunctionFactoryOutputTerm : IActorFunctionFactoryOutput> {\n    const equalityFunction = await this.mediatorFunctionFactory.mediate({\n      functionName: SparqlOperator.EQUAL,\n      requireTermExpression: true,\n      context: args.context,\n      arguments: args.arguments,\n    });\n    const lessThanFunction = await this.mediatorFunctionFactory.mediate({\n      functionName: SparqlOperator.LT,\n      requireTermExpression: true,\n      context: args.context,\n      arguments: args.arguments,\n    });\n    return new TermFunctionLesserThanEqual(equalityFunction, lessThanFunction);\n  }\n}\n"]}