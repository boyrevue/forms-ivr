{"version":3,"file":"SampleAggregator.js","sourceRoot":"","sources":["SampleAggregator.ts"],"names":[],"mappings":";;;AACA,+FAA+E;AAI/E,MAAa,gBAAiB,SAAQ,oDAAkB;IAGtD,YAAmB,SAA+B,EAAE,QAAiB,EAAE,UAAoB;QACzF,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAHjC,UAAK,GAAyB,SAAS,CAAC;IAIhD,CAAC;IAEM,OAAO,CAAC,IAAc;QAC3B,4BAA4B;QAC5B,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;IACH,CAAC;IAEM,UAAU;QACf,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;QAC3B,CAAC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;AApBD,4CAoBC","sourcesContent":["import type { IBindingsAggregator } from '@comunica/bus-bindings-aggregator-factory';\nimport { AggregateEvaluator } from '@comunica/bus-bindings-aggregator-factory';\nimport type { IExpressionEvaluator } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\n\nexport class SampleAggregator extends AggregateEvaluator implements IBindingsAggregator {\n  private state: RDF.Term | undefined = undefined;\n\n  public constructor(evaluator: IExpressionEvaluator, distinct: boolean, throwError?: boolean) {\n    super(evaluator, distinct, throwError);\n  }\n\n  public putTerm(term: RDF.Term): void {\n    // First value is our sample\n    if (this.state === undefined) {\n      this.state = term;\n    }\n  }\n\n  public termResult(): RDF.Term | undefined {\n    if (this.state === undefined) {\n      return this.emptyValue();\n    }\n    return this.state;\n  }\n}\n"]}