{"version":3,"file":"ActorMergeBindingsContext.js","sourceRoot":"","sources":["ActorMergeBindingsContext.ts"],"names":[],"mappings":";;;AACA,yCAAuC;AAGvC;;;;;;;;;;GAUG;AAEH,MAAsB,yBACpB,SAAQ,YAAoF;IAC5F,4BAA4B;IAC5B;;;;OAIG;IACH,2BAA2B;IAC3B,YAAmB,IAAwC;QACzD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;CACF;AAZD,8DAYC","sourcesContent":["import type { IAction, IActorArgs, IActorOutput, IActorTest, Mediate } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type { IActionContext } from '@comunica/types';\n\n/**\n * A comunica actor for the creation of merge handlers for binding context keys.\n *\n * Actor types:\n * * Input:  IActionMergeBindingFactory: The query actionContext\n * * Test:   <none>\n * * Output: IActorMergeBindingFactoryOutput: Returns a function that merges context entries.\n *   the function only runs on contextKeys equal to the key of the returned record.\n * @see IActionMergeBindingsContext\n * @see IActorMergeBindingsContextOutput\n */\n\nexport abstract class ActorMergeBindingsContext<TS = undefined>\n  extends Actor<IActionMergeBindingsContext, IActorTest, IActorMergeBindingsContextOutput, TS> {\n  /* eslint-disable max-len */\n  /**\n   * @param args -\n   *   \\ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   *   \\ @defaultNested {Merging of bindings contexts failed: none of the configured actors were able to handle the merging} busFailMessage\n   */\n  /* eslint-enable max-len */\n  public constructor(args: IActorMergeBindingsContextArgs<TS>) {\n    super(args);\n  }\n}\n\nexport interface IActionMergeBindingsContext extends IAction {\n  context: IActionContext;\n}\n\nexport interface IActorMergeBindingsContextOutput extends IActorOutput {\n  /**\n   * Merge handler function created by the actor. Here the record key is the context key\n   * the merge handler works on, and the value contains the constructed merge handler function\n   * interface\n   */\n  mergeHandlers: Record<string, IBindingsContextMergeHandler<any>>;\n}\n\nexport type IActorMergeBindingsContextArgs<TS = undefined> = IActorArgs<\nIActionMergeBindingsContext,\nIActorTest,\nIActorMergeBindingsContextOutput,\nTS\n>;\n\nexport type MediatorMergeBindingsContext = Mediate<\nIActionMergeBindingsContext,\nIActorMergeBindingsContextOutput\n>;\n\n/**\n * The interface for a binding context merge handler. A merge handler is a function that accepts\n * context entries (from different binding contexts) associated with the same key and\n * merges these values. The merging strategy is dependent on the implementation of the\n * interface.\n * @V denotes the type associated with the context key the merge handler operates on.\n */\nexport interface IBindingsContextMergeHandler<V> {\n  run: (...args: V[]) => V;\n}\n"]}