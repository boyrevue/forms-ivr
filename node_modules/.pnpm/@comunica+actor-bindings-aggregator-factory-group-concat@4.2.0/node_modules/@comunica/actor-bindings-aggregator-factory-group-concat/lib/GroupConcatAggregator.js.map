{"version":3,"file":"GroupConcatAggregator.js","sourceRoot":"","sources":["GroupConcatAggregator.ts"],"names":[],"mappings":";;;AACA,+FAA+E;AAE/E,6DAA6D;AAG7D,MAAa,qBAAsB,SAAQ,oDAAkB;IAM3D,YACE,SAA+B,EAC/B,QAAiB,EACA,WAAgC,EACjD,SAAkB,EAClB,UAAoB;QAEpB,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAJtB,gBAAW,GAAX,WAAW,CAAqB;QAR3C,UAAK,GAAuB,SAAS,CAAC;QACtC,sBAAiB,GAAG,IAAI,CAAC;QACzB,iBAAY,GAAuB,SAAS,CAAC;QAWnD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,GAAG,CAAC;IACpC,CAAC;IAEe,cAAc;QAC5B,OAAO,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC;IAEM,OAAO,CAAC,IAAc;QAC3B,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACxB,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;gBAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;YACpC,CAAC;QACH,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;YAC1C,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACjG,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;gBAC/B,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;YAChC,CAAC;QACH,CAAC;IACH,CAAC;IAEM,UAAU;QACf,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;QAC3B,CAAC;QACD,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YAChD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAChF,CAAC;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IAChE,CAAC;CACF;AA7CD,sDA6CC","sourcesContent":["import type { IBindingsAggregator } from '@comunica/bus-bindings-aggregator-factory';\nimport { AggregateEvaluator } from '@comunica/bus-bindings-aggregator-factory';\nimport type { ComunicaDataFactory, IExpressionEvaluator } from '@comunica/types';\nimport * as Eval from '@comunica/utils-expression-evaluator';\nimport type * as RDF from '@rdfjs/types';\n\nexport class GroupConcatAggregator extends AggregateEvaluator implements IBindingsAggregator {\n  private state: string | undefined = undefined;\n  private lastLanguageValid = true;\n  private lastLanguage: string | undefined = undefined;\n  private readonly separator: string;\n\n  public constructor(\n    evaluator: IExpressionEvaluator,\n    distinct: boolean,\n    private readonly dataFactory: ComunicaDataFactory,\n    separator?: string,\n    throwError?: boolean,\n  ) {\n    super(evaluator, distinct, throwError);\n    this.separator = separator ?? ' ';\n  }\n\n  public override emptyValueTerm(): RDF.Term {\n    return Eval.typedLiteral('', Eval.TypeURL.XSD_STRING);\n  }\n\n  public putTerm(term: RDF.Term): void {\n    if (this.state === undefined) {\n      this.state = term.value;\n      if (term.termType === 'Literal') {\n        this.lastLanguage = term.language;\n      }\n    } else {\n      this.state += this.separator + term.value;\n      if (this.lastLanguageValid && term.termType === 'Literal' && this.lastLanguage !== term.language) {\n        this.lastLanguageValid = false;\n        this.lastLanguage = undefined;\n      }\n    }\n  }\n\n  public termResult(): RDF.Term | undefined {\n    if (this.state === undefined) {\n      return this.emptyValue();\n    }\n    if (this.lastLanguageValid && this.lastLanguage) {\n      return Eval.langString(this.state, this.lastLanguage).toRDF(this.dataFactory);\n    }\n    return Eval.typedLiteral(this.state, Eval.TypeURL.XSD_STRING);\n  }\n}\n"]}