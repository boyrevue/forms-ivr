{"version":3,"file":"ActorQuerySourceIdentifyHypermediaQpf.js","sourceRoot":"","sources":["ActorQuerySourceIdentifyHypermediaQpf.ts"],"names":[],"mappings":";;;AAQA,yGAEwD;AAGxD,+DAA0D;AAE1D,yCAAoD;AAEpD,6EAAmE;AAEnE,qDAA0C;AAC1C,qDAAkD;AAElD;;GAEG;AACH,MAAa,qCAAsC,SAAQ,yEAAkC;IAU3F,YAAmB,IAAgD;QACjE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrB,CAAC;IAEe,KAAK,CAAC,IAAI,CACxB,MAA4C;QAE5C,IAAI,MAAM,CAAC,eAAe,IAAI,CAAC,MAAM,CAAC,eAAe,KAAK,KAAK,IAAI,MAAM,CAAC,eAAe,KAAK,OAAO,CAAC,EAAE,CAAC;YACvG,OAAO,IAAA,eAAQ,EAAC,SAAS,IAAI,CAAC,IAAI,sCAAsC,MAAM,CAAC,eAAe,GAAG,CAAC,CAAC;QACrG,CAAC;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,YAAY,CACvB,MAA4C;QAE5C,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,CAC5C,MAAM,CAAC,GAAG,EACV,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,OAAO,EACd,MAAM,CAAC,eAAe,KAAK,OAAO,CACnC,CAAC;QACF,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO,IAAA,eAAQ,EAAC,kEAAkE,CAAC,CAAC;QACtF,CAAC;QACD,IAAI,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;YACzE,OAAO,IAAA,eAAQ,EAAC,SAAS,IAAI,CAAC,IAAI,2DAA2D,CAAC,CAAC;QACjG,CAAC;QACD,OAAO,IAAA,eAAQ,EAAC,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,GAAG,CAAC,MAA4C;QAC3D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,6BAA6B,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC;QACxE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CACpC,MAAM,CAAC,GAAG,EACV,MAAM,CAAC,QAAQ,EACf,MAAM,CAAC,OAAO,EACd,MAAM,CAAC,eAAe,KAAK,OAAO,EAClC,MAAM,CAAC,KAAK,CACb,CAAC;QACF,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IACxD,CAAC;IAES,KAAK,CAAC,YAAY,CAC1B,GAAW,EACX,QAA6B,EAC7B,OAAuB,EACvB,kBAA2B,EAC3B,KAAkB;QAElB,MAAM,WAAW,GAAwB,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QACpF,MAAM,cAAc,GAAG,IAAI,yBAAO,CAAC,WAAW,CAAC,CAAC;QAChD,OAAO,IAAI,+BAAc,CACvB,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,uBAAuB,EAC5B,IAAI,CAAC,sBAAsB,EAC3B,WAAW,EACX,cAAc,EACd,MAAM,wCAAe,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,EAAE,OAAO,EAAE,WAAW,CAAC,EACrF,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,EACb,GAAG,EACH,QAAQ,EACR,kBAAkB,EAClB,KAAK,CACN,CAAC;IACJ,CAAC;CACF;AApFD,sFAoFC","sourcesContent":["import type { MediatorDereferenceRdf } from '@comunica/bus-dereference-rdf';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type {\n  IActionQuerySourceIdentifyHypermedia,\n  IActorQuerySourceIdentifyHypermediaOutput,\n  IActorQuerySourceIdentifyHypermediaArgs,\n  IActorQuerySourceIdentifyHypermediaTest,\n} from '@comunica/bus-query-source-identify-hypermedia';\nimport {\n  ActorQuerySourceIdentifyHypermedia,\n} from '@comunica/bus-query-source-identify-hypermedia';\nimport type { MediatorRdfMetadata } from '@comunica/bus-rdf-metadata';\nimport type { MediatorRdfMetadataExtract } from '@comunica/bus-rdf-metadata-extract';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { TestResult } from '@comunica/core';\nimport { failTest, passTest } from '@comunica/core';\nimport type { ComunicaDataFactory, IActionContext } from '@comunica/types';\nimport { BindingsFactory } from '@comunica/utils-bindings-factory';\nimport type * as RDF from '@rdfjs/types';\nimport { Factory } from 'sparqlalgebrajs';\nimport { QuerySourceQpf } from './QuerySourceQpf';\n\n/**\n * A comunica QPF Query Source Identify Hypermedia Actor.\n */\nexport class ActorQuerySourceIdentifyHypermediaQpf extends ActorQuerySourceIdentifyHypermedia\n  implements IActorQuerySourceIdentifyHypermediaQpfArgs {\n  public readonly mediatorMetadata: MediatorRdfMetadata;\n  public readonly mediatorMetadataExtract: MediatorRdfMetadataExtract;\n  public readonly mediatorDereferenceRdf: MediatorDereferenceRdf;\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n  public readonly subjectUri: string;\n  public readonly predicateUri: string;\n  public readonly objectUri: string;\n  public readonly graphUri?: string;\n  public constructor(args: IActorQuerySourceIdentifyHypermediaQpfArgs) {\n    super(args, 'qpf');\n  }\n\n  public override async test(\n    action: IActionQuerySourceIdentifyHypermedia,\n  ): Promise<TestResult<IActorQuerySourceIdentifyHypermediaTest>> {\n    if (action.forceSourceType && (action.forceSourceType !== 'qpf' && action.forceSourceType !== 'brtpf')) {\n      return failTest(`Actor ${this.name} is not able to handle source type ${action.forceSourceType}.`);\n    }\n    return this.testMetadata(action);\n  }\n\n  public async testMetadata(\n    action: IActionQuerySourceIdentifyHypermedia,\n  ): Promise<TestResult<IActorQuerySourceIdentifyHypermediaTest>> {\n    const { searchForm } = await this.createSource(\n      action.url,\n      action.metadata,\n      action.context,\n      action.forceSourceType === 'brtpf',\n    );\n    if (!searchForm) {\n      return failTest('Illegal state: found no TPF/QPF search form anymore in metadata.');\n    }\n    if (action.handledDatasets && action.handledDatasets[searchForm.dataset]) {\n      return failTest(`Actor ${this.name} can only be applied for the first page of a QPF dataset.`);\n    }\n    return passTest({ filterFactor: 1 });\n  }\n\n  /**\n   * Look for the search form\n   * @param {IActionRdfResolveHypermedia} action the metadata to look for the form.\n   * @return {Promise<IActorRdfResolveHypermediaOutput>} A promise resolving to a hypermedia form.\n   */\n  public async run(action: IActionQuerySourceIdentifyHypermedia): Promise<IActorQuerySourceIdentifyHypermediaOutput> {\n    this.logInfo(action.context, `Identified as qpf source: ${action.url}`);\n    const source = await this.createSource(\n      action.url,\n      action.metadata,\n      action.context,\n      action.forceSourceType === 'brtpf',\n      action.quads,\n    );\n    return { source, dataset: source.searchForm.dataset };\n  }\n\n  protected async createSource(\n    url: string,\n    metadata: Record<string, any>,\n    context: IActionContext,\n    bindingsRestricted: boolean,\n    quads?: RDF.Stream,\n  ): Promise<QuerySourceQpf> {\n    const dataFactory: ComunicaDataFactory = context.getSafe(KeysInitQuery.dataFactory);\n    const algebraFactory = new Factory(dataFactory);\n    return new QuerySourceQpf(\n      this.mediatorMetadata,\n      this.mediatorMetadataExtract,\n      this.mediatorDereferenceRdf,\n      dataFactory,\n      algebraFactory,\n      await BindingsFactory.create(this.mediatorMergeBindingsContext, context, dataFactory),\n      this.subjectUri,\n      this.predicateUri,\n      this.objectUri,\n      this.graphUri,\n      url,\n      metadata,\n      bindingsRestricted,\n      quads,\n    );\n  }\n}\n\nexport interface IActorQuerySourceIdentifyHypermediaQpfArgs extends IActorQuerySourceIdentifyHypermediaArgs {\n  /**\n   * The metadata mediator\n   */\n  mediatorMetadata: MediatorRdfMetadata;\n  /**\n   * The metadata extract mediator\n   */\n  mediatorMetadataExtract: MediatorRdfMetadataExtract;\n  /**\n   * The RDF dereference mediator\n   */\n  mediatorDereferenceRdf: MediatorDereferenceRdf;\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n  /**\n   * The URI that should be interpreted as subject URI\n   * @default {http://www.w3.org/1999/02/22-rdf-syntax-ns#subject}\n   */\n  subjectUri: string;\n  /**\n   * The URI that should be interpreted as predicate URI\n   * @default {http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate}\n   */\n  predicateUri: string;\n  /**\n   * The URI that should be interpreted as object URI\n   * @default {http://www.w3.org/1999/02/22-rdf-syntax-ns#object}\n   */\n  objectUri: string;\n  /**\n   * The URI that should be interpreted as graph URI\n   * @default {http://www.w3.org/ns/sparql-service-description#graph}\n   */\n  graphUri?: string;\n}\n"]}