{"version":3,"file":"ActorQueryOperationReducedHash.js","sourceRoot":"","sources":["ActorQueryOperationReducedHash.ts"],"names":[],"mappings":";;;AAEA,uEAAiF;AAEjF,yCAA8C;AAQ9C,2EAAkE;AAElE,yCAAqC;AAGrC;;GAEG;AACH,MAAa,8BAA+B,SAAQ,sDAAiD;IAInG,YAAmB,IAAyC;QAC1D,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAA2B,EAAE,QAAwB;QAC9E,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAA0B,EAAE,OAAuB;QAC3E,MAAM,MAAM,GAAkC,IAAA,uCAAe,EAC3D,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC,CACnF,CAAC;QACF,MAAM,SAAS,GAAG,CAAC,MAAM,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC3E,MAAM,cAAc,GAAmB,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;QAClH,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,QAAQ,EAAE,MAAM,CAAC,QAAQ;SAC1B,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,aAAa,CACxB,OAAuB,EACvB,SAAyB;QAEzB,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC9E,MAAM,MAAM,GAAG,IAAI,oBAAQ,CAAkB,EAAE,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QACtE,OAAO,CAAC,QAAkB,EAAE,EAAE;YAC5B,MAAM,IAAI,GAAW,YAAY,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACvD,IAAI,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACrB,OAAO,KAAK,CAAC;YACf,CAAC;YACD,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACvB,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;IACJ,CAAC;CACF;AA/CD,wEA+CC","sourcesContent":["import type { MediatorHashBindings } from '@comunica/bus-hash-bindings';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type {\n  Bindings,\n  BindingsStream,\n  IActionContext,\n  IQueryOperationResult,\n  IQueryOperationResultBindings,\n} from '@comunica/types';\nimport { getSafeBindings } from '@comunica/utils-query-operation';\nimport type * as RDF from '@rdfjs/types';\nimport { LRUCache } from 'lru-cache';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica Reduced Hash Query Operation Actor.\n */\nexport class ActorQueryOperationReducedHash extends ActorQueryOperationTypedMediated<Algebra.Reduced> {\n  public readonly mediatorHashBindings: MediatorHashBindings;\n  public readonly cacheSize: number;\n\n  public constructor(args: IActorQueryOperationReducedHashArgs) {\n    super(args, 'reduced');\n  }\n\n  public async testOperation(_operation: Algebra.Reduced, _context: IActionContext): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async runOperation(operation: Algebra.Reduced, context: IActionContext): Promise<IQueryOperationResult> {\n    const output: IQueryOperationResultBindings = getSafeBindings(\n      await this.mediatorQueryOperation.mediate({ operation: operation.input, context }),\n    );\n    const variables = (await output.metadata()).variables.map(v => v.variable);\n    const bindingsStream: BindingsStream = output.bindingsStream.filter(await this.newHashFilter(context, variables));\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata: output.metadata,\n    };\n  }\n\n  /**\n   * Create a new distinct filter function.\n   * This will maintain an internal hash datastructure so that every bindings object only returns true once.\n   * @param context The action context.\n   * @param variables The variables to take into account while hashing.\n   * @return {(bindings: Bindings) => boolean} A distinct filter for bindings.\n   */\n  public async newHashFilter(\n    context: IActionContext,\n    variables: RDF.Variable[],\n  ): Promise<(bindings: Bindings) => boolean> {\n    const { hashFunction } = await this.mediatorHashBindings.mediate({ context });\n    const hashes = new LRUCache<number, boolean>({ max: this.cacheSize });\n    return (bindings: Bindings) => {\n      const hash: number = hashFunction(bindings, variables);\n      if (hashes.has(hash)) {\n        return false;\n      }\n      hashes.set(hash, true);\n      return true;\n    };\n  }\n}\n\nexport interface IActorQueryOperationReducedHashArgs extends IActorQueryOperationTypedMediatedArgs {\n  mediatorHashBindings: MediatorHashBindings;\n  /**\n   * @range {integer}\n   * @default {100}\n   */\n  cacheSize: number;\n}\n"]}