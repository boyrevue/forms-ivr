{"version":3,"file":"ActorContextPreprocessSetDefaults.js","sourceRoot":"","sources":["ActorContextPreprocessSetDefaults.ts"],"names":[],"mappings":";;;AAKA,6EAA0E;AAC1E,+DAA6F;AAE7F,yCAA8C;AAG9C,uDAA+C;AAE/C;;GAEG;AACH,MAAa,iCAAkC,SAAQ,+CAAsB;IAI3E,YAAmB,IAA4C;QAC7D,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,6BAA6B,GAAG,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAAgB;QAChC,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAgC;QAC/C,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAE7B,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;YACtB,qBAAqB;YACrB,OAAO,GAAG,OAAO;iBACd,UAAU,CAAC,+BAAa,CAAC,cAAc,EAAE,IAAI,IAAI,EAAE,CAAC;iBACpD,UAAU,CAAC,+BAAa,CAAC,4BAA4B,EAAE,WAAW,CAAC,GAAG,EAAE,CAAC;iBACzE,UAAU,CAAC,yCAAuB,CAAC,SAAS,EAAE,IAAI,GAAG,EAAE,CAAC;iBACxD,UAAU,CAAC,0BAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC;iBACrC,UAAU,CAAC,+BAAa,CAAC,sBAAsB,EAAE,IAAI,CAAC,6BAA6B,CAAC;iBACpF,UAAU,CAAC,yCAAuB,CAAC,iCAAiC,EAAE,IAAI,GAAG,EAAE,CAAC;iBAChF,UAAU,CAAC,+BAAa,CAAC,WAAW,EAAE,IAAI,8BAAW,EAAE,CAAC,CAAC;YAE5D,8BAA8B;YAC9B,IAAI,WAAW,GAAoB,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;YAC1E,IAAI,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,WAAW,CAAC,EAAE,CAAC;gBAC3C,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,WAAW,CAAE,CAAC;gBACtD,IAAI,WAAW,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;oBACvC,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,+BAAa,CAAC,2BAA2B,EAAE,EAAE,CAAC,CAAC;gBAC9E,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;YAChE,CAAC;QACH,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,CAAC;IACrB,CAAC;CACF;AAzCD,8EAyCC","sourcesContent":["import type {\n  IActorContextPreprocessOutput,\n  IActorContextPreprocessArgs,\n  IActionContextPreprocess,\n} from '@comunica/bus-context-preprocess';\nimport { ActorContextPreprocess } from '@comunica/bus-context-preprocess';\nimport { KeysCore, KeysInitQuery, KeysQuerySourceIdentify } from '@comunica/context-entries';\nimport type { IAction, IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { FunctionArgumentsCache, Logger } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\n\n/**\n * A comunica Set Defaults Context Preprocess Actor.\n */\nexport class ActorContextPreprocessSetDefaults extends ActorContextPreprocess {\n  private readonly defaultFunctionArgumentsCache: FunctionArgumentsCache;\n  public readonly logger: Logger;\n\n  public constructor(args: IActorContextPreprocessSetDefaultsArgs) {\n    super(args);\n    this.defaultFunctionArgumentsCache = {};\n  }\n\n  public async test(_action: IAction): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async run(action: IActionContextPreprocess): Promise<IActorContextPreprocessOutput> {\n    let context = action.context;\n\n    if (action.initialize) {\n      // Set default values\n      context = context\n        .setDefault(KeysInitQuery.queryTimestamp, new Date())\n        .setDefault(KeysInitQuery.queryTimestampHighResolution, performance.now())\n        .setDefault(KeysQuerySourceIdentify.sourceIds, new Map())\n        .setDefault(KeysCore.log, this.logger)\n        .setDefault(KeysInitQuery.functionArgumentsCache, this.defaultFunctionArgumentsCache)\n        .setDefault(KeysQuerySourceIdentify.hypermediaSourcesAggregatedStores, new Map())\n        .setDefault(KeysInitQuery.dataFactory, new DataFactory());\n\n      // Handle default query format\n      let queryFormat: RDF.QueryFormat = { language: 'sparql', version: '1.1' };\n      if (context.has(KeysInitQuery.queryFormat)) {\n        queryFormat = context.get(KeysInitQuery.queryFormat)!;\n        if (queryFormat.language === 'graphql') {\n          context = context.setDefault(KeysInitQuery.graphqlSingularizeVariables, {});\n        }\n      } else {\n        context = context.set(KeysInitQuery.queryFormat, queryFormat);\n      }\n    }\n\n    return { context };\n  }\n}\n\nexport interface IActorContextPreprocessSetDefaultsArgs extends IActorContextPreprocessArgs {\n  /**\n   * The logger of this actor\n   * @default {a <npmd:@comunica/logger-void/^4.0.0/components/LoggerVoid.jsonld#LoggerVoid>}\n   */\n  logger: Logger;\n}\n"]}