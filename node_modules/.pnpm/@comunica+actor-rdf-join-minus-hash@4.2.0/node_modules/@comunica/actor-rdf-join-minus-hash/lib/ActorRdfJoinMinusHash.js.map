{"version":3,"file":"ActorRdfJoinMinusHash.js","sourceRoot":"","sources":["ActorRdfJoinMinusHash.ts"],"names":[],"mappings":";;;AAMA,yDAEgC;AAEhC,yCAAsD;AAGtD,6EAA2E;AAE3E,yEAAsF;AACtF,6DAAqE;AAErE,2CAA0C;AAE1C;;GAEG;AACH,MAAa,qBAAsB,SAAQ,2BAAY;IACrD,YAAmB,IAAgC;QACjD,KAAK,CAAC,IAAI,EAAE;YACV,WAAW,EAAE,OAAO;YACpB,YAAY,EAAE,QAAQ,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,EAAE;YAC9D,YAAY,EAAE,CAAC;YACf,eAAe,EAAE,IAAI,CAAC,eAAe;SACtC,CAAC,CAAC;IACL,CAAC;IAEM,MAAM,CAAC,cAAc,CAAI,KAAc,EAAE,eAAmC;QACjF,OAAO,KAAK,CAAC,CAAC;YACZ,IAAI,yCAAkB,CACpB,eAAe,EACf,CAAC,IAA0B,EAAE,EAAE,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,IAAA,yBAAY,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAC9F,KAAK,CACN,CAAC,CAAC;YACH,IAAI,uCAAgB,CAAC,eAAe,EAAE,gDAAuB,CAAC,CAAC;IACnE,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,MAAsB;QAC3C,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QACxC,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QAExC,MAAM,SAAS,GAAG,MAAM,2BAAY,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAClE,MAAM,eAAe,GAAG,2BAAY,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;QAErE,wDAAwD;QACxD,iCAAiC;QACjC,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;YAChC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QAC5B,CAAC;QAED,MAAM,cAAc,GAAmB,IAAI,0CAAyB,CAAC,KAAK,IAAG,EAAE;YAC7E,6EAA6E;YAC7E,MAAM,KAAK,GAA4B,qBAAqB;iBACzD,cAAc,CAAC,IAAI,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;YACzD,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBAC5B,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;gBACxE,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;gBACzC,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;YAClF,CAAC,CAAC,CAAC;YAEH,kEAAkE;YAClE,OAAO,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC;QACnF,CAAC,EAAE;YACD,SAAS,EAAE,KAAK;YAChB,OAAO;gBACL,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;gBAChC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;YAClC,CAAC;SACF,CAAC,CAAC;QAEH,OAAO;YACL,MAAM,EAAE;gBACN,IAAI,EAAE,UAAU;gBAChB,cAAc;gBACd,QAAQ,EAAE,MAAM,CAAC,QAAQ;aAC1B;SACF,CAAC;IACJ,CAAC;IAES,KAAK,CAAC,mBAAmB,CACjC,MAAsB,EACtB,QAAmC;QAEnC,MAAM,EAAE,SAAS,EAAE,GAAG,QAAQ,CAAC;QAC/B,MAAM,mBAAmB,GAAG,2BAAY,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC;QAC3E,MAAM,gBAAgB,GAAG,2BAAY,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC;QACrE,IAAI,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC;QACjF,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;YAC1B,4DAA4D;YAC5D,UAAU,IAAI,GAAG,CAAC;QACpB,CAAC;QACD,OAAO,IAAA,2BAAoB,EAAC;YAC1B,UAAU;YACV,cAAc,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK;YAC9C,aAAa,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK;YAC7C,WAAW,EAAE,mBAAmB,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC;gBACxF,mBAAmB,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC;SAChF,EAAE,QAAQ,CAAC,CAAC;IACf,CAAC;CACF;AAnFD,sDAmFC","sourcesContent":["import type {\n  IActionRdfJoin,\n  IActorRdfJoinOutputInner,\n  IActorRdfJoinArgs,\n  IActorRdfJoinTestSideData,\n} from '@comunica/bus-rdf-join';\nimport {\n  ActorRdfJoin,\n} from '@comunica/bus-rdf-join';\nimport type { TestResult } from '@comunica/core';\nimport { passTestWithSideData } from '@comunica/core';\nimport type { IMediatorTypeJoinCoefficients } from '@comunica/mediatortype-join-coefficients';\nimport type { BindingsStream, MetadataVariable } from '@comunica/types';\nimport { bindingsToCompactString } from '@comunica/utils-bindings-factory';\nimport type { IBindingsIndex } from '@comunica/utils-bindings-index';\nimport { BindingsIndexDef, BindingsIndexUndef } from '@comunica/utils-bindings-index';\nimport { ClosableTransformIterator } from '@comunica/utils-iterator';\nimport type * as RDF from '@rdfjs/types';\nimport { termToString } from 'rdf-string';\n\n/**\n * A comunica Minus Hash RDF Join Actor.\n */\nexport class ActorRdfJoinMinusHash extends ActorRdfJoin {\n  public constructor(args: IActorRdfJoinMinusHashArgs) {\n    super(args, {\n      logicalType: 'minus',\n      physicalName: `hash-${args.canHandleUndefs ? 'undef' : 'def'}`,\n      limitEntries: 2,\n      canHandleUndefs: args.canHandleUndefs,\n    });\n  }\n\n  public static constructIndex<V>(undef: boolean, commonVariables: MetadataVariable[]): IBindingsIndex<V> {\n    return undef ?\n      new BindingsIndexUndef(\n        commonVariables,\n        (term: RDF.Term | undefined) => term && term.termType !== 'Variable' ? termToString(term) : '',\n        false,\n      ) :\n      new BindingsIndexDef(commonVariables, bindingsToCompactString);\n  }\n\n  public async getOutput(action: IActionRdfJoin): Promise<IActorRdfJoinOutputInner> {\n    const buffer = action.entries[1].output;\n    const output = action.entries[0].output;\n\n    const metadatas = await ActorRdfJoin.getMetadatas(action.entries);\n    const commonVariables = ActorRdfJoin.overlappingVariables(metadatas);\n\n    // Destroy the buffer stream since it is not needed when\n    // there are no common variables.\n    if (commonVariables.length === 0) {\n      buffer.bindingsStream.destroy();\n      return { result: output };\n    }\n\n    const bindingsStream: BindingsStream = new ClosableTransformIterator(async() => {\n      // We index all bindings from the buffer iterator first in a blocking manner.\n      const index: IBindingsIndex<boolean> = ActorRdfJoinMinusHash\n        .constructIndex(this.canHandleUndefs, commonVariables);\n      await new Promise((resolve) => {\n        buffer.bindingsStream.on('data', bindings => index.put(bindings, true));\n        buffer.bindingsStream.on('end', resolve);\n        buffer.bindingsStream.on('error', error => bindingsStream.emit('error', error));\n      });\n\n      // From the left-hand iterator filter out all entries of the index\n      return output.bindingsStream.filter(bindings => !index.getFirst(bindings, true));\n    }, {\n      autoStart: false,\n      onClose() {\n        buffer.bindingsStream.destroy();\n        output.bindingsStream.destroy();\n      },\n    });\n\n    return {\n      result: {\n        type: 'bindings',\n        bindingsStream,\n        metadata: output.metadata,\n      },\n    };\n  }\n\n  protected async getJoinCoefficients(\n    action: IActionRdfJoin,\n    sideData: IActorRdfJoinTestSideData,\n  ): Promise<TestResult<IMediatorTypeJoinCoefficients, IActorRdfJoinTestSideData>> {\n    const { metadatas } = sideData;\n    const requestInitialTimes = ActorRdfJoin.getRequestInitialTimes(metadatas);\n    const requestItemTimes = ActorRdfJoin.getRequestItemTimes(metadatas);\n    let iterations = metadatas[0].cardinality.value + metadatas[1].cardinality.value;\n    if (!this.canHandleUndefs) {\n      // Our non-undef implementation is slightly more performant.\n      iterations *= 0.8;\n    }\n    return passTestWithSideData({\n      iterations,\n      persistedItems: metadatas[0].cardinality.value,\n      blockingItems: metadatas[0].cardinality.value,\n      requestTime: requestInitialTimes[0] + metadatas[0].cardinality.value * requestItemTimes[0] +\n        requestInitialTimes[1] + metadatas[1].cardinality.value * requestItemTimes[1],\n    }, sideData);\n  }\n}\n\nexport interface IActorRdfJoinMinusHashArgs extends IActorRdfJoinArgs {\n  /**\n   * If this actor can handle undefined values.\n   * If false, performance will be slightly better.\n   */\n  canHandleUndefs: boolean;\n}\n"]}