{"version":3,"file":"ActorExpressionEvaluatorFactory.js","sourceRoot":"","sources":["ActorExpressionEvaluatorFactory.ts"],"names":[],"mappings":";;;AAIA,yCAAuC;AAIvC;;;;;;;;;;GAUG;AACH,MAAsB,+BAAgD,SACpE,YAAgG;IAKhG;;;;OAIG;IACH,YAAmB,IAA8C;QAC/D,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC;QAC1D,IAAI,CAAC,uBAAuB,GAA6B,IAAI,CAAC,uBAAuB,CAAC;QACtF,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,4BAA4B,CAAC;IACxE,CAAC;CACF;AAjBD,0EAiBC","sourcesContent":["import type { MediatorFunctionFactory, MediatorFunctionFactoryUnsafe } from '@comunica/bus-function-factory';\nimport type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { MediatorQueryOperation } from '@comunica/bus-query-operation';\nimport type { IAction, IActorArgs, IActorOutput, IActorTest, Mediate } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type { IExpressionEvaluator } from '@comunica/types';\nimport type { Algebra as Alg } from 'sparqlalgebrajs';\n\n/**\n * A comunica actor for utils-expression-evaluator-factory events.\n *\n * Actor types:\n * * Input:  IActionExpressionEvaluatorFactory: The Query Operation and Function factory mediators.\n * * Test:   <none>\n * * Output: IActorExpressionEvaluatorFactoryOutput: TODO: fill in.\n *\n * @see IActionExpressionEvaluatorFactory\n * @see IActorExpressionEvaluatorFactoryOutput\n */\nexport abstract class ActorExpressionEvaluatorFactory<TS = undefined> extends\n  Actor<IActionExpressionEvaluatorFactory, IActorTest, IActorExpressionEvaluatorFactoryOutput, TS> {\n  protected mediatorQueryOperation: MediatorQueryOperation;\n  protected mediatorFunctionFactory: MediatorFunctionFactory;\n  protected mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  /**\n   * @param args -\n   * \\ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   * \\ @defaultNested {Creation of Expression Evaluator failed} busFailMessage\n   */\n  public constructor(args: IActorExpressionEvaluatorFactoryArgs<TS>) {\n    super(args);\n    this.mediatorQueryOperation = args.mediatorQueryOperation;\n    this.mediatorFunctionFactory = <MediatorFunctionFactory> args.mediatorFunctionFactory;\n    this.mediatorMergeBindingsContext = args.mediatorMergeBindingsContext;\n  }\n}\n\nexport interface IActionExpressionEvaluatorFactory extends IAction {\n  algExpr: Alg.Expression;\n}\n\nexport interface IActorExpressionEvaluatorFactoryOutput extends IActorOutput, IExpressionEvaluator {}\n\nexport interface IActorExpressionEvaluatorFactoryArgs<TS = undefined> extends IActorArgs<\nIActionExpressionEvaluatorFactory,\nIActorTest,\nIActorExpressionEvaluatorFactoryOutput,\nTS\n> {\n  mediatorQueryOperation: MediatorQueryOperation;\n  mediatorFunctionFactory: MediatorFunctionFactoryUnsafe;\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n\nexport type MediatorExpressionEvaluatorFactory = Mediate<\nIActionExpressionEvaluatorFactory,\nIActorExpressionEvaluatorFactoryOutput\n>;\n"]}