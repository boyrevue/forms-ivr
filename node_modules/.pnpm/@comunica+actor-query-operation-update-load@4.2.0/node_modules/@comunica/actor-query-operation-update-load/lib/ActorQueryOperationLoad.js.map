{"version":3,"file":"ActorQueryOperationLoad.js","sourceRoot":"","sources":["ActorQueryOperationLoad.ts"],"names":[],"mappings":";;;AACA,uEAAiF;AAGjF,+DAA0D;AAG1D,2EAAoG;AAEpG,qDAA0C;AAE1C;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,sDAA8C;IAIzF,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAAuB,EAAE,OAAuB;QACzE,OAAO,IAAA,oCAAY,EAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAuB,EAAE,OAAuB;QAExE,MAAM,WAAW,GAAwB,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QACpF,MAAM,cAAc,GAAG,IAAI,yBAAO,CAAC,WAAW,CAAC,CAAC;QAEhD,yBAAyB;QACzB,IAAI,UAAU,GAAG,OAAO,CAAC;QACzB,IAAI,SAAS,CAAC,MAAM,EAAE,CAAC;YACrB,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,+BAAa,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC3D,CAAC;QACD,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC;YACrE,uBAAuB,EAAE,EAAE,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE;YAC1D,OAAO,EAAE,UAAU;SACpB,CAAC,CAAC;QAEH,6CAA6C;QAC7C,MAAM,MAAM,GAAG,IAAA,oCAAY,EAAC,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;YACpE,SAAS,EAAE,cAAc,CAAC,eAAe,CACvC,IAAA,6CAAqB,EACnB,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAC7G,WAAW,CACZ,EACD,CAAE,cAAc;qBACb,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAE,CACpG;YACD,OAAO,EAAE,UAAU;SACpB,CAAC,CAAC,CAAC;QAEJ,kCAAkC;QAClC,IAAI,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;QACnC,IAAI,SAAS,CAAC,WAAW,EAAE,CAAC;YAC1B,UAAU,GAAG,UAAU;iBACpB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;QACrG,CAAC;QAED,qBAAqB;QACrB,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;YACzD,gBAAgB,EAAE,UAAU;YAC5B,OAAO;SACR,CAAC,CAAC;QAEH,OAAO;YACL,IAAI,EAAE,MAAM;YACZ,OAAO;SACR,CAAC;IACJ,CAAC;CACF;AA1DD,0DA0DC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { MediatorQuerySourceIdentify } from '@comunica/bus-query-source-identify';\nimport type { MediatorRdfUpdateQuads } from '@comunica/bus-rdf-update-quads';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport type { ComunicaDataFactory, IActionContext, IQueryOperationResult } from '@comunica/types';\nimport { assignOperationSource, getSafeQuads, testReadOnly } from '@comunica/utils-query-operation';\nimport type { Algebra } from 'sparqlalgebrajs';\nimport { Factory } from 'sparqlalgebrajs';\n\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL load operations.\n */\nexport class ActorQueryOperationLoad extends ActorQueryOperationTypedMediated<Algebra.Load> {\n  public readonly mediatorUpdateQuads: MediatorRdfUpdateQuads;\n  public readonly mediatorQuerySourceIdentify: MediatorQuerySourceIdentify;\n\n  public constructor(args: IActorQueryOperationLoadArgs) {\n    super(args, 'load');\n  }\n\n  public async testOperation(operation: Algebra.Load, context: IActionContext): Promise<TestResult<IActorTest>> {\n    return testReadOnly(context);\n  }\n\n  public async runOperation(operation: Algebra.Load, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    const dataFactory: ComunicaDataFactory = context.getSafe(KeysInitQuery.dataFactory);\n    const algebraFactory = new Factory(dataFactory);\n\n    // Determine query source\n    let subContext = context;\n    if (operation.silent) {\n      subContext = subContext.set(KeysInitQuery.lenient, true);\n    }\n    const { querySource } = await this.mediatorQuerySourceIdentify.mediate({\n      querySourceUnidentified: { value: operation.source.value },\n      context: subContext,\n    });\n\n    // Create CONSTRUCT query on the given source\n    const output = getSafeQuads(await this.mediatorQueryOperation.mediate({\n      operation: algebraFactory.createConstruct(\n        assignOperationSource(\n          algebraFactory.createPattern(dataFactory.variable('s'), dataFactory.variable('p'), dataFactory.variable('o')),\n          querySource,\n        ),\n        [ algebraFactory\n          .createPattern(dataFactory.variable('s'), dataFactory.variable('p'), dataFactory.variable('o')) ],\n      ),\n      context: subContext,\n    }));\n\n    // Determine quad stream to insert\n    let quadStream = output.quadStream;\n    if (operation.destination) {\n      quadStream = quadStream\n        .map(quad => dataFactory.quad(quad.subject, quad.predicate, quad.object, operation.destination));\n    }\n\n    // Insert quad stream\n    const { execute } = await this.mediatorUpdateQuads.mediate({\n      quadStreamInsert: quadStream,\n      context,\n    });\n\n    return {\n      type: 'void',\n      execute,\n    };\n  }\n}\n\nexport interface IActorQueryOperationLoadArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * The RDF Update Quads mediator\n   */\n  mediatorUpdateQuads: MediatorRdfUpdateQuads;\n  /**\n   * Mediator for identifying load sources.\n   */\n  mediatorQuerySourceIdentify: MediatorQuerySourceIdentify;\n}\n"]}