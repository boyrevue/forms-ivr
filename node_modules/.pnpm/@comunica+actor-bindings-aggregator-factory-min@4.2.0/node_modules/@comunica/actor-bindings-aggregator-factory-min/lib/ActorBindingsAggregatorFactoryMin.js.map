{"version":3,"file":"ActorBindingsAggregatorFactoryMin.js","sourceRoot":"","sources":["ActorBindingsAggregatorFactoryMin.ts"],"names":[],"mappings":";;;AAKA,+FAEmD;AAGnD,yCAAwD;AACxD,mDAAgD;AAMhD;;GAEG;AACH,MAAa,iCAAkC,SAAQ,gEAA8B;IAGnF,YAAmB,IAA4C;QAC7D,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,6BAA6B,GAAG,IAAI,CAAC,6BAA6B,CAAC;IAC1E,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAwC;QACxD,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,KAAK,KAAK,EAAE,CAAC;YACrC,OAAO,IAAA,eAAQ,EAAC,kDAAkD,CAAC,CAAC;QACtE,CAAC;QACD,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,IAAI,EAAoC;QAElE,OAAO,IAAI,6BAAa,CACtB,MAAM,IAAI,CAAC,kCAAkC,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC,EAC5F,IAAI,CAAC,QAAQ,EACb,MAAM,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC,CAC9D,CAAC;IACJ,CAAC;CACF;AAvBD,8EAuBC","sourcesContent":["import type {\n  IActionBindingsAggregatorFactory,\n  IActorBindingsAggregatorFactoryArgs,\n  IActorBindingsAggregatorFactoryOutput,\n} from '@comunica/bus-bindings-aggregator-factory';\nimport {\n  ActorBindingsAggregatorFactory,\n} from '@comunica/bus-bindings-aggregator-factory';\nimport type { MediatorTermComparatorFactory } from '@comunica/bus-term-comparator-factory';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { failTest, passTestVoid } from '@comunica/core';\nimport { MinAggregator } from './MinAggregator';\n\nexport interface IActorBindingsAggregatorFactoryMinArgs extends IActorBindingsAggregatorFactoryArgs {\n  mediatorTermComparatorFactory: MediatorTermComparatorFactory;\n}\n\n/**\n * A comunica Min Expression Evaluator Aggregate Actor.\n */\nexport class ActorBindingsAggregatorFactoryMin extends ActorBindingsAggregatorFactory {\n  private readonly mediatorTermComparatorFactory: MediatorTermComparatorFactory;\n\n  public constructor(args: IActorBindingsAggregatorFactoryMinArgs) {\n    super(args);\n    this.mediatorTermComparatorFactory = args.mediatorTermComparatorFactory;\n  }\n\n  public async test(action: IActionBindingsAggregatorFactory): Promise<TestResult<IActorTest>> {\n    if (action.expr.aggregator !== 'min') {\n      return failTest('This actor only supports the \\'min\\' aggregator.');\n    }\n    return passTestVoid();\n  }\n\n  public async run({ context, expr }: IActionBindingsAggregatorFactory):\n  Promise<IActorBindingsAggregatorFactoryOutput> {\n    return new MinAggregator(\n      await this.mediatorExpressionEvaluatorFactory.mediate({ algExpr: expr.expression, context }),\n      expr.distinct,\n      await this.mediatorTermComparatorFactory.mediate({ context }),\n    );\n  }\n}\n"]}