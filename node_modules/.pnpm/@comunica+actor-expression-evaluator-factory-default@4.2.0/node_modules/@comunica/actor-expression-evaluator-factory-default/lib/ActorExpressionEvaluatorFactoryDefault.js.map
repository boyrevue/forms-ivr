{"version":3,"file":"ActorExpressionEvaluatorFactoryDefault.js","sourceRoot":"","sources":["ActorExpressionEvaluatorFactoryDefault.ts"],"names":[],"mappings":";;;AAKA,iGAA6F;AAC7F,+DAA0D;AAE1D,yCAA8C;AAC9C,6EAAmE;AACnE,qFAAqF;AACrF,6DAA0D;AAC1D,+DAA4D;AAE5D;;GAEG;AACH,MAAa,sCAAuC,SAAQ,kEAA+B;IACzF,YAAmB,IAA0C;QAC3D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAA0C;QAC1D,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAyC;QACxD,MAAM,WAAW,GAAG,IAAA,0DAA6B,EAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAClE,OAAO,IAAI,yCAAmB,CAC5B,WAAW,EACX,MAAM,IAAI,uCAAkB,CAC1B,WAAW,EACX,IAAI,CAAC,uBAAuB,CAC7B,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,EAClC,IAAI,CAAC,uBAAuB,EAC5B,IAAI,CAAC,sBAAsB,EAC3B,MAAM,wCAAe,CAAC,MAAM,CAC1B,IAAI,CAAC,4BAA4B,EACjC,MAAM,CAAC,OAAO,EACd,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAClD,CACF,CAAC;IACJ,CAAC;CACF;AA1BD,wFA0BC","sourcesContent":["import type {\n  IActionExpressionEvaluatorFactory,\n  IActorExpressionEvaluatorFactoryArgs,\n  IActorExpressionEvaluatorFactoryOutput,\n} from '@comunica/bus-expression-evaluator-factory';\nimport { ActorExpressionEvaluatorFactory } from '@comunica/bus-expression-evaluator-factory';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport { BindingsFactory } from '@comunica/utils-bindings-factory';\nimport { prepareEvaluatorActionContext } from '@comunica/utils-expression-evaluator';\nimport { AlgebraTransformer } from './AlgebraTransformer';\nimport { ExpressionEvaluator } from './ExpressionEvaluator';\n\n/**\n * A comunica Default Expression Evaluator Factory Actor.\n */\nexport class ActorExpressionEvaluatorFactoryDefault extends ActorExpressionEvaluatorFactory {\n  public constructor(args: IActorExpressionEvaluatorFactoryArgs) {\n    super(args);\n  }\n\n  public async test(_action: IActionExpressionEvaluatorFactory): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async run(action: IActionExpressionEvaluatorFactory): Promise<IActorExpressionEvaluatorFactoryOutput> {\n    const fullContext = prepareEvaluatorActionContext(action.context);\n    return new ExpressionEvaluator(\n      fullContext,\n      await new AlgebraTransformer(\n        fullContext,\n        this.mediatorFunctionFactory,\n      ).transformAlgebra(action.algExpr),\n      this.mediatorFunctionFactory,\n      this.mediatorQueryOperation,\n      await BindingsFactory.create(\n        this.mediatorMergeBindingsContext,\n        action.context,\n        action.context.getSafe(KeysInitQuery.dataFactory),\n      ),\n    );\n  }\n}\n"]}