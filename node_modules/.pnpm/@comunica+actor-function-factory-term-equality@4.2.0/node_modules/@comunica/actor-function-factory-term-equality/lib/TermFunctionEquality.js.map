{"version":3,"file":"TermFunctionEquality.js","sourceRoot":"","sources":["TermFunctionEquality.ts"],"names":[],"mappings":"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","sourcesContent":["import { TermFunctionBase } from '@comunica/bus-function-factory';\nimport { KeysExpressionEvaluator, KeysInitQuery } from '@comunica/context-entries';\nimport type {\n  BooleanLiteral,\n\n  DurationLiteral,\n  LangStringLiteral,\n  Quad,\n  TimeLiteral,\n} from '@comunica/utils-expression-evaluator';\nimport {\n  bool,\n  dayTimeDurationsToSeconds,\n  declare,\n  defaultedDateTimeRepresentation,\n  defaultedDayTimeDurationRepresentation,\n  defaultedYearMonthDurationRepresentation,\n  RDFEqualTypeError,\n  SparqlOperator,\n  toUTCDate,\n  TypeAlias,\n  TypeURL,\n  yearMonthDurationsToMonths,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-RDFterm-equal\n */\nexport class TermFunctionEquality extends TermFunctionBase {\n  public constructor() {\n    super({\n      arity: 2,\n      operator: SparqlOperator.EQUAL,\n      overloads: declare(SparqlOperator.EQUAL)\n        .numberTest(() => (left, right) => left === right)\n        .stringTest(() => (left, right) => left.localeCompare(right) === 0)\n        .set(\n          [ TypeURL.RDF_LANG_STRING, TypeURL.RDF_LANG_STRING ],\n          () => ([ left, right ]: LangStringLiteral[]) => bool(left.str() === right.str() &&\n        left.language === right.language),\n        )\n      // Fall through: a TypeURL.XSD_STRING is never equal to a TypeURL.RDF_LANG_STRING.\n        .set([ TypeAlias.SPARQL_STRINGLY, TypeAlias.SPARQL_STRINGLY ], () => () => bool(false))\n        .booleanTest(() => (left, right) => left === right)\n        .dateTimeTest(exprEval => (left, right) =>\n          toUTCDate(\n            left,\n            exprEval.context.getSafe(KeysExpressionEvaluator.defaultTimeZone),\n          ).getTime() === toUTCDate(right, exprEval.context.getSafe(KeysExpressionEvaluator.defaultTimeZone)).getTime())\n        .copy({\n          // https://www.w3.org/TR/xpath-functions/#func-date-equal\n          from: [ TypeURL.XSD_DATE_TIME, TypeURL.XSD_DATE_TIME ],\n          to: [ TypeURL.XSD_DATE, TypeURL.XSD_DATE ],\n        })\n        .set(\n          [ 'quad', 'quad' ],\n          exprEval => ([ left, right ]) =>\n            bool(\n              (<BooleanLiteral> this.applyOnTerms([ (<Quad> left).subject, (<Quad> right).subject ], exprEval))\n                .coerceEBV() &&\n          (<BooleanLiteral> this.applyOnTerms([ (<Quad> left).predicate, (<Quad> right).predicate ], exprEval))\n            .coerceEBV() &&\n          (<BooleanLiteral> this.applyOnTerms([ (<Quad> left).object, (<Quad> right).object ], exprEval))\n            .coerceEBV() &&\n          (<BooleanLiteral> this.applyOnTerms([ (<Quad> left).graph, (<Quad> right).graph ], exprEval))\n            .coerceEBV(),\n            )\n          ,\n          false,\n        )\n        .set(\n          [ 'term', 'term' ],\n          exprEval => ([ _left, _right ]) => {\n            const left = _left.toRDF(exprEval.context.getSafe(KeysInitQuery.dataFactory));\n            const right = _right.toRDF(exprEval.context.getSafe(KeysInitQuery.dataFactory));\n            const val = left.equals(right);\n            if (!val && (left.termType === 'Literal') && (right.termType === 'Literal')) {\n              throw new RDFEqualTypeError([ _left, _right ]);\n            }\n            return bool(val);\n          },\n          false,\n        )\n        .set([ TypeURL.XSD_DURATION, TypeURL.XSD_DURATION ], () =>\n          ([ dur1, dur2 ]: [ DurationLiteral, DurationLiteral ]) =>\n            bool(yearMonthDurationsToMonths(defaultedYearMonthDurationRepresentation(dur1.typedValue)) ===\n          yearMonthDurationsToMonths(defaultedYearMonthDurationRepresentation(dur2.typedValue)) &&\n          dayTimeDurationsToSeconds(defaultedDayTimeDurationRepresentation(dur1.typedValue)) ===\n          dayTimeDurationsToSeconds(defaultedDayTimeDurationRepresentation(dur2.typedValue))))\n        .set([ TypeURL.XSD_TIME, TypeURL.XSD_TIME ], exprEval =>\n          ([ time1, time2 ]: [TimeLiteral, TimeLiteral]) =>\n          // https://www.w3.org/TR/xpath-functions/#func-time-equal\n            bool(\n              toUTCDate(\n                defaultedDateTimeRepresentation(time1.typedValue),\n                exprEval.context.getSafe(KeysExpressionEvaluator.defaultTimeZone),\n              ).getTime() ===\n          toUTCDate(\n            defaultedDateTimeRepresentation(time2.typedValue),\n            exprEval.context.getSafe(KeysExpressionEvaluator.defaultTimeZone),\n          ).getTime(),\n            ))\n        .collect(),\n    });\n  }\n}\n"]}