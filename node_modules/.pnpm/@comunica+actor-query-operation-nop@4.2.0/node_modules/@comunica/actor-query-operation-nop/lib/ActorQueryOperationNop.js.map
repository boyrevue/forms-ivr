{"version":3,"file":"ActorQueryOperationNop.js","sourceRoot":"","sources":["ActorQueryOperationNop.ts"],"names":[],"mappings":";;;AAEA,uEAAiF;AACjF,+DAA0D;AAE1D,yCAA8C;AAE9C,6EAAmE;AACnE,6DAAmE;AAEnE,iDAAkD;AAGlD;;;GAGG;AACH,MAAa,sBAAuB,SAAQ,sDAA6C;IAGvF,YAAmB,IAAiC;QAClD,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAAuB,EAAE,QAAwB;QAC1E,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAsB,EAAE,OAAuB;QACvE,MAAM,WAAW,GAAwB,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QACpF,MAAM,eAAe,GAAG,MAAM,wCAAe,CAAC,MAAM,CAClD,IAAI,CAAC,4BAA4B,EACjC,OAAO,EACP,WAAW,CACZ,CAAC;QAEF,OAAO;YACL,cAAc,EAAE,IAAI,iCAAiB,CAAe,eAAe,CAAC,QAAQ,EAAE,CAAC;YAC/E,QAAQ,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC;gBAC9B,KAAK,EAAE,IAAI,wCAAuB,EAAE;gBACpC,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE;gBACxC,SAAS,EAAE,EAAE;aACd,CAAC;YACF,IAAI,EAAE,UAAU;SACjB,CAAC;IACJ,CAAC;CACF;AA7BD,wDA6BC","sourcesContent":["import type { MediatorMergeBindingsContext } from '@comunica/bus-merge-bindings-context';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { ComunicaDataFactory, IActionContext, IQueryOperationResult } from '@comunica/types';\nimport { BindingsFactory } from '@comunica/utils-bindings-factory';\nimport { MetadataValidationState } from '@comunica/utils-metadata';\nimport type * as RDF from '@rdfjs/types';\nimport { SingletonIterator } from 'asynciterator';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation)\n * actor that handles SPARQL nop operations.\n */\nexport class ActorQueryOperationNop extends ActorQueryOperationTypedMediated<Algebra.Nop> {\n  public readonly mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n\n  public constructor(args: IActorQueryOperationNopArgs) {\n    super(args, 'nop');\n  }\n\n  public async testOperation(_operation: Algebra.Nop, _context: IActionContext): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async runOperation(operation: Algebra.Nop, context: IActionContext): Promise<IQueryOperationResult> {\n    const dataFactory: ComunicaDataFactory = context.getSafe(KeysInitQuery.dataFactory);\n    const bindingsFactory = await BindingsFactory.create(\n      this.mediatorMergeBindingsContext,\n      context,\n      dataFactory,\n    );\n\n    return {\n      bindingsStream: new SingletonIterator<RDF.Bindings>(bindingsFactory.bindings()),\n      metadata: () => Promise.resolve({\n        state: new MetadataValidationState(),\n        cardinality: { type: 'exact', value: 1 },\n        variables: [],\n      }),\n      type: 'bindings',\n    };\n  }\n}\n\nexport interface IActorQueryOperationNopArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * A mediator for creating binding context merge handlers\n   */\n  mediatorMergeBindingsContext: MediatorMergeBindingsContext;\n}\n"]}