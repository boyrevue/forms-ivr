{"version":3,"file":"ActorQueryOperationPathNps.js","sourceRoot":"","sources":["ActorQueryOperationPathNps.ts"],"names":[],"mappings":";;;AAAA,uEAAkE;AAGlE,+DAA0D;AAE1D,2EAAkE;AAClE,qDAAmD;AAEnD;;GAEG;AACH,MAAa,0BAA2B,SAAQ,uCAAiB;IAC/D,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,yBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAuB,EAAE,OAAuB;QACxE,MAAM,WAAW,GAAwB,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QACpF,MAAM,cAAc,GAAG,IAAI,yBAAO,CAAC,WAAW,CAAC,CAAC;QAEhD,MAAM,SAAS,GAAiB,SAAS,CAAC,SAAS,CAAC;QACpD,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAE5D,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc;aACzC,aAAa,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,EAAE,EAAE,QAAQ,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjH,MAAM,MAAM,GAAG,IAAA,uCAAe,EAC5B,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAC3E,CAAC;QAEF,qDAAqD;QACrD,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc;aACzC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAEhH,OAAO;YACL,IAAI,EAAE,UAAU;YAChB,cAAc;YACd,QAAQ,EAAE,MAAM,CAAC,QAAQ;SAC1B,CAAC;IACJ,CAAC;CACF;AA5BD,gEA4BC","sourcesContent":["import { ActorAbstractPath } from '@comunica/actor-abstract-path';\nimport type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\n\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { ComunicaDataFactory, IActionContext, IQueryOperationResult } from '@comunica/types';\nimport { getSafeBindings } from '@comunica/utils-query-operation';\nimport { Algebra, Factory } from 'sparqlalgebrajs';\n\n/**\n * A comunica Path Nps Query Operation Actor.\n */\nexport class ActorQueryOperationPathNps extends ActorAbstractPath {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, Algebra.types.NPS);\n  }\n\n  public async runOperation(operation: Algebra.Path, context: IActionContext): Promise<IQueryOperationResult> {\n    const dataFactory: ComunicaDataFactory = context.getSafe(KeysInitQuery.dataFactory);\n    const algebraFactory = new Factory(dataFactory);\n\n    const predicate = <Algebra.Nps> operation.predicate;\n    const blank = this.generateVariable(dataFactory, operation);\n\n    const pattern = Object.assign(algebraFactory\n      .createPattern(operation.subject, blank, operation.object, operation.graph), { metadata: predicate.metadata });\n    const output = getSafeBindings(\n      await this.mediatorQueryOperation.mediate({ operation: pattern, context }),\n    );\n\n    // Remove the generated blank nodes from the bindings\n    const bindingsStream = output.bindingsStream\n      .map(bindings => predicate.iris.some(iri => iri.equals(bindings.get(blank))) ? null : bindings.delete(blank));\n\n    return {\n      type: 'bindings',\n      bindingsStream,\n      metadata: output.metadata,\n    };\n  }\n}\n"]}