{"version":3,"file":"ActorFunctionFactoryTermFloor.js","sourceRoot":"","sources":["ActorFunctionFactoryTermFloor.ts"],"names":[],"mappings":";;;AAMA,yEAEwC;AAExC,qFAAsE;AACtE,2DAAwD;AAExD;;GAEG;AACH,MAAa,6BAA8B,SAAQ,oDAA6B;IAC9E,YAAmB,IAA+B;QAChD,KAAK,CAAC;YACJ,GAAG,IAAI;YACP,aAAa,EAAE,CAAE,2CAAc,CAAC,KAAK,CAAE;YACvC,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,GAAG,CAAmC,CAAI;QAErD,OAAO,IAAI,qCAAiB,EAAE,CAAC;IACjC,CAAC;CACF;AAbD,sEAaC","sourcesContent":["import type {\n  IActionFunctionFactory,\n  IActorFunctionFactoryArgs,\n  IActorFunctionFactoryOutput,\n  IActorFunctionFactoryOutputTerm,\n} from '@comunica/bus-function-factory';\nimport {\n  ActorFunctionFactoryDedicated,\n} from '@comunica/bus-function-factory';\n\nimport { SparqlOperator } from '@comunica/utils-expression-evaluator';\nimport { TermFunctionFloor } from './TermFunctionFloor';\n\n/**\n * A comunica TermFunctionFloor Function Factory Actor.\n */\nexport class ActorFunctionFactoryTermFloor extends ActorFunctionFactoryDedicated {\n  public constructor(args: IActorFunctionFactoryArgs) {\n    super({\n      ...args,\n      functionNames: [ SparqlOperator.FLOOR ],\n      termFunction: true,\n    });\n  }\n\n  public async run<T extends IActionFunctionFactory>(_: T):\n  Promise<T extends { requireTermExpression: true } ? IActorFunctionFactoryOutputTerm : IActorFunctionFactoryOutput> {\n    return new TermFunctionFloor();\n  }\n}\n"]}