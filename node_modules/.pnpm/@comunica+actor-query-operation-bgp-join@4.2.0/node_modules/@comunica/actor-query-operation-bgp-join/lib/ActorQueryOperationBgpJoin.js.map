{"version":3,"file":"ActorQueryOperationBgpJoin.js","sourceRoot":"","sources":["ActorQueryOperationBgpJoin.ts"],"names":[],"mappings":";;;AACA,uEAAiF;AACjF,+DAA0D;AAE1D,yCAA8C;AAE9C,qDAA0C;AAG1C;;;GAGG;AACH,MAAa,0BAA2B,SAAQ,sDAA6C;IAC3F,YAAmB,IAA2C;QAC5D,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,UAAuB,EAAE,QAAwB;QAC1E,OAAO,IAAA,mBAAY,GAAE,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAsB,EAAE,OAAuB;QAEvE,MAAM,WAAW,GAAwB,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QACpF,MAAM,cAAc,GAAG,IAAI,yBAAO,CAAC,WAAW,CAAC,CAAC;QAEhD,OAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC;YACzC,SAAS,EAAE,cAAc,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC;YACxD,OAAO;SACR,CAAC,CAAC;IACL,CAAC;CACF;AAnBD,gEAmBC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport { passTestVoid } from '@comunica/core';\nimport type { ComunicaDataFactory, IActionContext, IQueryOperationResult } from '@comunica/types';\nimport { Factory } from 'sparqlalgebrajs';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL BGP operations by rewriting it as a join operator.\n */\nexport class ActorQueryOperationBgpJoin extends ActorQueryOperationTypedMediated<Algebra.Bgp> {\n  public constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'bgp');\n  }\n\n  public async testOperation(_operation: Algebra.Bgp, _context: IActionContext): Promise<TestResult<IActorTest>> {\n    return passTestVoid();\n  }\n\n  public async runOperation(operation: Algebra.Bgp, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    const dataFactory: ComunicaDataFactory = context.getSafe(KeysInitQuery.dataFactory);\n    const algebraFactory = new Factory(dataFactory);\n\n    return this.mediatorQueryOperation.mediate({\n      operation: algebraFactory.createJoin(operation.patterns),\n      context,\n    });\n  }\n}\n"]}