{"version":3,"file":"ActorQueryProcess.js","sourceRoot":"","sources":["ActorQueryProcess.ts"],"names":[],"mappings":";;;AACA,yCAAuC;AAIvC;;;;;;;;;;GAUG;AACH,MAAsB,iBACpB,SAAQ,YAAoE;IAC5E,4BAA4B;IAC5B;;;;OAIG;IACH,2BAA2B;IAC3B,YAAmB,IAAgC;QACjD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;CACF;AAZD,8CAYC","sourcesContent":["import type { IAction, IActorArgs, IActorOutput, IActorTest, Mediate } from '@comunica/core';\nimport { Actor } from '@comunica/core';\nimport type { QueryFormatType, IQueryExplained, IActionContext, IQueryOperationResult } from '@comunica/types';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A comunica actor for query-process events.\n *\n * Actor types:\n * * Input:  IActionQueryProcess:      The input query to process.\n * * Test:   <none>\n * * Output: IActorQueryProcessOutput: Output of the query processing.\n *\n * @see IActionQueryProcess\n * @see IActorQueryProcessOutput\n */\nexport abstract class ActorQueryProcess<TS = undefined>\n  extends Actor<IActionQueryProcess, IActorTest, IActorQueryProcessOutput, TS> {\n  /* eslint-disable max-len */\n  /**\n   * @param args -\n   *   \\ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   *   \\ @defaultNested {Query processing failed: none of the configured actor were process to the query \"${action.query}\"} busFailMessage\n   */\n  /* eslint-enable max-len */\n  public constructor(args: IActorQueryProcessArgs<TS>) {\n    super(args);\n  }\n}\n\nexport interface IActionQueryProcess extends IAction {\n  /**\n   * The query to process.\n   */\n  query: QueryFormatType;\n}\n\nexport interface IActorQueryProcessOutput extends IActorOutput {\n  /**\n   * Result of the query processing.\n   */\n  result: IQueryOperationResult | IQueryExplained;\n}\n\nexport type IActorQueryProcessArgs<TS = undefined> = IActorArgs<\nIActionQueryProcess,\nIActorTest,\nIActorQueryProcessOutput,\nTS\n>;\n\nexport type MediatorQueryProcess = Mediate<\nIActionQueryProcess,\nIActorQueryProcessOutput\n>;\n\nexport interface IQueryProcessSequential {\n  parse: (query: QueryFormatType, context: IActionContext) => Promise<IQueryProcessSequentialOutput>;\n  optimize: (operation: Algebra.Operation, context: IActionContext) => Promise<IQueryProcessSequentialOutput>;\n  evaluate: (operation: Algebra.Operation, context: IActionContext) => Promise<IQueryOperationResult>;\n}\n\nexport interface IQueryProcessSequentialOutput {\n  operation: Algebra.Operation;\n  context: IActionContext;\n}\n"]}