{"version":3,"file":"ActorQueryOperationDrop.js","sourceRoot":"","sources":["ActorQueryOperationDrop.ts"],"names":[],"mappings":";;;AACA,uEAAiF;AAEjF,+DAA0D;AAG1D,2EAA+D;AAI/D;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,sDAA8C;IAGzF,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,SAAuB,EAAE,OAAuB;QACzE,OAAO,IAAA,oCAAY,EAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,SAAuB,EAAE,OAAuB;QAExE,MAAM,WAAW,GAAwB,OAAO,CAAC,OAAO,CAAC,+BAAa,CAAC,WAAW,CAAC,CAAC;QAEpF,+BAA+B;QAC/B,IAAI,MAA4D,CAAC;QACjE,IAAI,SAAS,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;YACnC,MAAM,GAAG,WAAW,CAAC,YAAY,EAAE,CAAC;QACtC,CAAC;aAAM,IAAI,OAAO,SAAS,CAAC,MAAM,KAAK,QAAQ,EAAE,CAAC;YAChD,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;QAC5B,CAAC;aAAM,CAAC;YACN,MAAM,GAAG,CAAE,SAAS,CAAC,MAAM,CAAE,CAAC;QAChC,CAAC;QACD,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;YACzD,YAAY,EAAE;gBACZ,MAAM;gBACN,gBAAgB,EAAE,CAAC,SAAS,CAAC,MAAM;gBACnC,UAAU,EAAE,IAAI;aACjB;YACD,OAAO;SACR,CAAC,CAAC;QAEH,OAAO;YACL,IAAI,EAAE,MAAM;YACZ,OAAO;SACR,CAAC;IACJ,CAAC;CACF;AAtCD,0DAsCC","sourcesContent":["import type { IActorQueryOperationTypedMediatedArgs } from '@comunica/bus-query-operation';\nimport { ActorQueryOperationTypedMediated } from '@comunica/bus-query-operation';\nimport type { MediatorRdfUpdateQuads } from '@comunica/bus-rdf-update-quads';\nimport { KeysInitQuery } from '@comunica/context-entries';\nimport type { IActorTest, TestResult } from '@comunica/core';\nimport type { ComunicaDataFactory, IActionContext, IQueryOperationResult } from '@comunica/types';\nimport { testReadOnly } from '@comunica/utils-query-operation';\nimport type * as RDF from '@rdfjs/types';\nimport type { Algebra } from 'sparqlalgebrajs';\n\n/**\n * A [Query Operation](https://github.com/comunica/comunica/tree/master/packages/bus-query-operation) actor\n * that handles SPARQL drop operations.\n */\nexport class ActorQueryOperationDrop extends ActorQueryOperationTypedMediated<Algebra.Drop> {\n  public readonly mediatorUpdateQuads: MediatorRdfUpdateQuads;\n\n  public constructor(args: IActorQueryOperationDropArgs) {\n    super(args, 'drop');\n  }\n\n  public async testOperation(operation: Algebra.Drop, context: IActionContext): Promise<TestResult<IActorTest>> {\n    return testReadOnly(context);\n  }\n\n  public async runOperation(operation: Algebra.Drop, context: IActionContext):\n  Promise<IQueryOperationResult> {\n    const dataFactory: ComunicaDataFactory = context.getSafe(KeysInitQuery.dataFactory);\n\n    // Delegate to update-quads bus\n    let graphs: RDF.DefaultGraph | 'NAMED' | 'ALL' | RDF.NamedNode[];\n    if (operation.source === 'DEFAULT') {\n      graphs = dataFactory.defaultGraph();\n    } else if (typeof operation.source === 'string') {\n      graphs = operation.source;\n    } else {\n      graphs = [ operation.source ];\n    }\n    const { execute } = await this.mediatorUpdateQuads.mediate({\n      deleteGraphs: {\n        graphs,\n        requireExistence: !operation.silent,\n        dropGraphs: true,\n      },\n      context,\n    });\n\n    return {\n      type: 'void',\n      execute,\n    };\n  }\n}\n\nexport interface IActorQueryOperationDropArgs extends IActorQueryOperationTypedMediatedArgs {\n  /**\n   * The RDF Update Quads mediator\n   */\n  mediatorUpdateQuads: MediatorRdfUpdateQuads;\n}\n"]}