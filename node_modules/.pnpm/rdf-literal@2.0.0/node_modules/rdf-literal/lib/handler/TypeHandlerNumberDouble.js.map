{"version":3,"file":"TypeHandlerNumberDouble.js","sourceRoot":"","sources":["TypeHandlerNumberDouble.ts"],"names":[],"mappings":";;;AAEA,8CAAyC;AAEzC;;GAEG;AACH,MAAa,uBAAuB;IAQ3B,OAAO,CAAC,OAAoB,EAAE,QAAkB;QACrD,MAAM,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,QAAQ,EAAE,CAAC;YACb,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;gBAClB,uBAAU,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;YAC3C,CAAC;YACD,sBAAsB;QACxB,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEM,KAAK,CAAC,KAAU,EAAE,EAAE,QAAQ,EAAE,WAAW,EAAiB;QAC/D,QAAQ,GAAG,QAAQ,IAAI,WAAY,CAAC,SAAS,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAChF,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC;YACjB,OAAO,WAAY,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAC/C,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YACrB,OAAO,WAAY,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACpE,CAAC;QACD,IAAI,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YACpB,OAAO,IAAK,CAAC,CAAC,4CAA4C;QAC5D,CAAC;QACD,OAAO,WAAY,CAAC,OAAO,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC9F,CAAC;;AA/BH,0DAiCC;AA/BwB,6BAAK,GAAa;IACvC,yCAAyC;IACzC,0CAA0C;IAC1C,wCAAwC;CACzC,CAAC","sourcesContent":["import * as RDF from \"@rdfjs/types\";\nimport {IToRdfOptions, ITypeHandler} from \"../ITypeHandler\";\nimport {Translator} from \"../Translator\";\n\n/**\n * Translates double numbers.\n */\nexport class TypeHandlerNumberDouble implements ITypeHandler {\n\n  public static readonly TYPES: string[] = [\n    'http://www.w3.org/2001/XMLSchema#double',\n    'http://www.w3.org/2001/XMLSchema#decimal',\n    'http://www.w3.org/2001/XMLSchema#float',\n  ];\n\n  public fromRdf(literal: RDF.Literal, validate?: boolean): any {\n    const parsed = parseFloat(literal.value);\n    if (validate) {\n      if (isNaN(parsed)) {\n        Translator.incorrectRdfDataType(literal);\n      }\n      // TODO: validate more\n    }\n    return parsed;\n  }\n\n  public toRdf(value: any, { datatype, dataFactory }: IToRdfOptions): RDF.Literal {\n    datatype = datatype || dataFactory!.namedNode(TypeHandlerNumberDouble.TYPES[0]);\n    if (isNaN(value)) {\n      return dataFactory!.literal('NaN', datatype);\n    }\n    if (!isFinite(value)) {\n      return dataFactory!.literal(value > 0 ? 'INF' : '-INF', datatype);\n    }\n    if (value % 1 === 0) {\n      return null!; // TODO: throw error in next breaking change\n    }\n    return dataFactory!.literal(value.toExponential(15).replace(/(\\d)0*e\\+?/, '$1E'), datatype);\n  }\n\n}\n"]}