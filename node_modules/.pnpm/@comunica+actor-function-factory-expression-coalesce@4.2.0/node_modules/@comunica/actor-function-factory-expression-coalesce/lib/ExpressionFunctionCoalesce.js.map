{"version":3,"file":"ExpressionFunctionCoalesce.js","sourceRoot":"","sources":["ExpressionFunctionCoalesce.ts"],"names":[],"mappings":";;;AAAA,yEAAwE;AAExE,qFAG8C;AAE9C;;;GAGG;AACH,MAAa,0BAA2B,SAAQ,6CAAsB;IACpE;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,MAAM,CAAC,iBAAiB;YAC/B,QAAQ,EAAE,2CAAc,CAAC,QAAQ;YACjC,KAAK,EAAE,KAAK,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAgB,EAA2B,EAAE;gBACjF,MAAM,MAAM,GAAY,EAAE,CAAC;gBAC3B,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE,CAAC;oBACxB,IAAI,CAAC;wBACH,OAAO,MAAM,QAAQ,CAAC,6BAA6B,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;oBACrE,CAAC;oBAAC,OAAO,KAAc,EAAE,CAAC;wBACxB,MAAM,CAAC,IAAI,CAAS,KAAK,CAAC,CAAC;oBAC7B,CAAC;gBACH,CAAC;gBACD,MAAM,IAAI,0CAAa,CAAC,MAAM,CAAC,CAAC;YAClC,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AAlBD,gEAkBC","sourcesContent":["import { ExpressionFunctionBase } from '@comunica/bus-function-factory';\nimport type { IEvalContext, TermExpression } from '@comunica/types';\nimport {\n  CoalesceError,\n  SparqlOperator,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-coalesce\n * This function doesn't require type promotion or subtype-substitution, everything works on TermExpression\n */\nexport class ExpressionFunctionCoalesce extends ExpressionFunctionBase {\n  public constructor() {\n    super({\n      arity: Number.POSITIVE_INFINITY,\n      operator: SparqlOperator.COALESCE,\n      apply: async({ args, mapping, exprEval }: IEvalContext): Promise<TermExpression> => {\n        const errors: Error[] = [];\n        for (const expr of args) {\n          try {\n            return await exprEval.evaluatorExpressionEvaluation(expr, mapping);\n          } catch (error: unknown) {\n            errors.push(<Error> error);\n          }\n        }\n        throw new CoalesceError(errors);\n      },\n    });\n  }\n}\n"]}