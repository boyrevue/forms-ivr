{"version":3,"file":"ActorRdfJoinEntriesSortCardinality.js","sourceRoot":"","sources":["ActorRdfJoinEntriesSortCardinality.ts"],"names":[],"mappings":";;;AAAA,mFAE6C;AAQ7C,yCAA0C;AAE1C;;GAEG;AACH,MAAa,kCAAmC,SAAQ,mDAAuB;IAC7E,YAAmB,IAAkC;QACnD,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAiC;QACjD,OAAO,IAAA,eAAQ,EAAC;YACd,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;gBACrC,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,OAAO;qBACX,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;oBAC/F,MAAM,CAAC,OAAO,CAAC,MAAM;SACxB,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAiC;QAChD,MAAM,OAAO,GAAG,CAAE,GAAG,MAAM,CAAC,OAAO,CAAE;aAClC,IAAI,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,GAAG,UAAU,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACjH,OAAO,EAAE,OAAO,EAAE,CAAC;IACrB,CAAC;CACF;AApBD,gFAoBC","sourcesContent":["import {\n  ActorRdfJoinEntriesSort,\n} from '@comunica/bus-rdf-join-entries-sort';\nimport type {\n  IActionRdfJoinEntriesSort,\n  IActorRdfJoinEntriesSortArgs,\n  IActorRdfJoinEntriesSortOutput,\n  IActorRdfJoinEntriesSortTest,\n} from '@comunica/bus-rdf-join-entries-sort';\nimport type { TestResult } from '@comunica/core';\nimport { passTest } from '@comunica/core';\n\n/**\n * An actor that sorts join entries by increasing cardinality.\n */\nexport class ActorRdfJoinEntriesSortCardinality extends ActorRdfJoinEntriesSort {\n  public constructor(args: IActorRdfJoinEntriesSortArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionRdfJoinEntriesSort): Promise<TestResult<IActorRdfJoinEntriesSortTest>> {\n    return passTest({\n      accuracy: action.entries.length === 0 ?\n        1 :\n        action.entries\n          .reduce((sum, entry) => sum + (Number.isFinite(entry.metadata.cardinality.value) ? 1 : 0), 0) /\n        action.entries.length,\n    });\n  }\n\n  public async run(action: IActionRdfJoinEntriesSort): Promise<IActorRdfJoinEntriesSortOutput> {\n    const entries = [ ...action.entries ]\n      .sort((entryLeft, entryRight) => entryLeft.metadata.cardinality.value - entryRight.metadata.cardinality.value);\n    return { entries };\n  }\n}\n"]}