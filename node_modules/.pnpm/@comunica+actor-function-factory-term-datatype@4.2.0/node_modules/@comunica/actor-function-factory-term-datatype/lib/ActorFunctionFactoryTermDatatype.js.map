{"version":3,"file":"ActorFunctionFactoryTermDatatype.js","sourceRoot":"","sources":["ActorFunctionFactoryTermDatatype.ts"],"names":[],"mappings":";;;AAMA,yEAEwC;AAExC,qFAAsE;AACtE,iEAA8D;AAE9D;;GAEG;AACH,MAAa,gCAAiC,SAAQ,oDAA6B;IACjF,YAAmB,IAA+B;QAChD,KAAK,CAAC;YACJ,GAAG,IAAI;YACP,aAAa,EAAE,CAAE,2CAAc,CAAC,QAAQ,CAAE;YAC1C,YAAY,EAAE,IAAI;SACnB,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,GAAG,CAAmC,CAAI;QAErD,OAAO,IAAI,2CAAoB,EAAE,CAAC;IACpC,CAAC;CACF;AAbD,4EAaC","sourcesContent":["import type {\n  IActionFunctionFactory,\n  IActorFunctionFactoryArgs,\n  IActorFunctionFactoryOutput,\n  IActorFunctionFactoryOutputTerm,\n} from '@comunica/bus-function-factory';\nimport {\n  ActorFunctionFactoryDedicated,\n} from '@comunica/bus-function-factory';\n\nimport { SparqlOperator } from '@comunica/utils-expression-evaluator';\nimport { TermFunctionDatatype } from './TermFunctionDatatype';\n\n/**\n * A comunica TermFunctionDatatype Function Factory Actor.\n */\nexport class ActorFunctionFactoryTermDatatype extends ActorFunctionFactoryDedicated {\n  public constructor(args: IActorFunctionFactoryArgs) {\n    super({\n      ...args,\n      functionNames: [ SparqlOperator.DATATYPE ],\n      termFunction: true,\n    });\n  }\n\n  public async run<T extends IActionFunctionFactory>(_: T):\n  Promise<T extends { requireTermExpression: true } ? IActorFunctionFactoryOutputTerm : IActorFunctionFactoryOutput> {\n    return new TermFunctionDatatype();\n  }\n}\n"]}