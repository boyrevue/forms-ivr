{"version":3,"file":"ExpressionFunctionIf.js","sourceRoot":"","sources":["ExpressionFunctionIf.ts"],"names":[],"mappings":";;;AAAA,yEAAwE;AAExE,qFAE8C;AAE9C;;;GAGG;AACH,MAAa,oBAAqB,SAAQ,6CAAsB;IAC9D;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,2CAAc,CAAC,EAAE;YAC3B,KAAK,EAAE,KAAK,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAgB,EAA2B,EAAE;gBACjF,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,6BAA6B,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;gBAChF,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,EAAE,CAAC;gBACjC,OAAO,GAAG,CAAC,CAAC;oBACV,QAAQ,CAAC,6BAA6B,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;oBAC1D,QAAQ,CAAC,6BAA6B,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YAC7D,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF;AAdD,oDAcC","sourcesContent":["import { ExpressionFunctionBase } from '@comunica/bus-function-factory';\nimport type { IEvalContext, TermExpression } from '@comunica/types';\nimport {\n  SparqlOperator,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-if\n * This function doesn't require type promotion or subtype-substitution, everything works on TermExpression\n */\nexport class ExpressionFunctionIf extends ExpressionFunctionBase {\n  public constructor() {\n    super({\n      arity: 3,\n      operator: SparqlOperator.IF,\n      apply: async({ args, mapping, exprEval }: IEvalContext): Promise<TermExpression> => {\n        const valFirst = await exprEval.evaluatorExpressionEvaluation(args[0], mapping);\n        const ebv = valFirst.coerceEBV();\n        return ebv ?\n          exprEval.evaluatorExpressionEvaluation(args[1], mapping) :\n          exprEval.evaluatorExpressionEvaluation(args[2], mapping);\n      },\n    });\n  }\n}\n"]}