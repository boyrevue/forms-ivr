{"version":3,"file":"ActorFunctionFactoryExpressionConcat.js","sourceRoot":"","sources":["ActorFunctionFactoryExpressionConcat.ts"],"names":[],"mappings":";;;AAOA,yEAEwC;AAExC,qFAAsE;AACtE,yEAAsE;AAEtE;;GAEG;AACH,MAAa,oCAAqC,SAAQ,oDAA6B;IACrF,YAAmB,IAA+B;QAChD,KAAK,CAAC;YACJ,GAAG,IAAI;YACP,aAAa,EAAE,CAAE,2CAAc,CAAC,MAAM,CAAE;YACxC,YAAY,EAAE,KAAK;SACpB,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,GAAG,CAAmC,CAAI;QAErD,OAGwB,IAAI,mDAAwB,EAAE,CAAC;IACzD,CAAC;CACF;AAhBD,oFAgBC","sourcesContent":["import type {\n  IActionFunctionFactory,\n  IActorFunctionFactoryArgs,\n  IActorFunctionFactoryOutput,\n  IActorFunctionFactoryOutputTerm,\n  IExpressionFunction,\n} from '@comunica/bus-function-factory';\nimport {\n  ActorFunctionFactoryDedicated,\n} from '@comunica/bus-function-factory';\n\nimport { SparqlOperator } from '@comunica/utils-expression-evaluator';\nimport { ExpressionFunctionConcat } from './ExpressionFunctionConcat';\n\n/**\n * A comunica ExpressionFunctionConcat Function Factory Actor.\n */\nexport class ActorFunctionFactoryExpressionConcat extends ActorFunctionFactoryDedicated {\n  public constructor(args: IActorFunctionFactoryArgs) {\n    super({\n      ...args,\n      functionNames: [ SparqlOperator.CONCAT ],\n      termFunction: false,\n    });\n  }\n\n  public async run<T extends IActionFunctionFactory>(_: T):\n  Promise<T extends { requireTermExpression: true } ? IActorFunctionFactoryOutputTerm : IActorFunctionFactoryOutput> {\n    return <T extends { requireTermExpression: true } ?\n      IActorFunctionFactoryOutputTerm :\n      IActorFunctionFactoryOutput>\n      <IExpressionFunction> new ExpressionFunctionConcat();\n  }\n}\n"]}