{"version":3,"file":"ActorRdfUpdateHypermedia.js","sourceRoot":"","sources":["ActorRdfUpdateHypermedia.ts"],"names":[],"mappings":";;;AAEA,yCAAiD;AAEjD;;;;;;;;;;GAUG;AACH,MAAsB,wBACpB,SAAQ,YAAkF;IAG1F,4BAA4B;IAC5B;;;;;OAKG;IACH,2BAA2B;IAC3B,YAAmB,IAAuC,EAAE,eAAuB;QACjF,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAkC;QAClD,IAAI,MAAM,CAAC,oBAAoB,IAAI,IAAI,CAAC,eAAe,KAAK,MAAM,CAAC,oBAAoB,EAAE,CAAC;YACxF,OAAO,IAAA,eAAQ,EAAC,SAAS,IAAI,CAAC,IAAI,2CAA2C,MAAM,CAAC,oBAAoB,GAAG,CAAC,CAAC;QAC/G,CAAC;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;CAGF;AAzBD,4DAyBC","sourcesContent":["import type { IQuadDestination } from '@comunica/bus-rdf-update-quads';\nimport type { IAction, IActorArgs, IActorOutput, IActorTest, Mediate, TestResult } from '@comunica/core';\nimport { failTest, Actor } from '@comunica/core';\n\n/**\n * A comunica actor for rdf-update-hypermedia events.\n *\n * Actor types:\n * * Input:  IActionRdfUpdateHypermedia:      The metadata in the document.\n * * Test:   <none>\n * * Output: IActorRdfUpdateHypermediaOutput: An RDF destination.\n *\n * @see IActionRdfUpdateHypermedia\n * @see IActorRdfUpdateHypermediaOutput\n */\nexport abstract class ActorRdfUpdateHypermedia<TS = undefined>\n  extends Actor<IActionRdfUpdateHypermedia, IActorTest, IActorRdfUpdateHypermediaOutput, TS> {\n  protected readonly destinationType: string;\n\n  /* eslint-disable max-len */\n  /**\n   * @param args -\n   *   \\ @defaultNested {<default_bus> a <cc:components/Bus.jsonld#Bus>} bus\n   *   \\ @defaultNested {RDF hypermedia updating failed: none of the configured actors were able to handle an update for ${action.url}} busFailMessage\n   * @param destinationType - The destination type.\n   */\n  /* eslint-enable max-len */\n  public constructor(args: IActorRdfUpdateHypermediaArgs<TS>, destinationType: string) {\n    super(args);\n    this.destinationType = destinationType;\n  }\n\n  public async test(action: IActionRdfUpdateHypermedia): Promise<TestResult<IActorTest, TS>> {\n    if (action.forceDestinationType && this.destinationType !== action.forceDestinationType) {\n      return failTest(`Actor ${this.name} is not able to handle destination type ${action.forceDestinationType}.`);\n    }\n    return this.testMetadata(action);\n  }\n\n  public abstract testMetadata(action: IActionRdfUpdateHypermedia): Promise<TestResult<IActorTest, TS>>;\n}\n\nexport interface IActionRdfUpdateHypermedia extends IAction {\n  /**\n   * The URL of the destination that was fetched.\n   */\n  url: string;\n  /**\n   * A metadata key-value mapping.\n   */\n  metadata: Record<string, any>;\n  /**\n   * If the destination already exists.\n   */\n  exists: boolean;\n  /**\n   * The explicitly requested destination type.\n   * If set, the destination type of the actor MUST explicitly match the given forced type.\n   */\n  forceDestinationType?: string;\n}\n\nexport interface IActorRdfUpdateHypermediaOutput extends IActorOutput {\n  /**\n   * The destination for quads.\n   */\n  destination: IQuadDestination;\n}\n\nexport type IActorRdfUpdateHypermediaArgs<TS = undefined> = IActorArgs<\nIActionRdfUpdateHypermedia,\nIActorTest,\nIActorRdfUpdateHypermediaOutput,\nTS\n>;\n\nexport type MediatorRdfUpdateHypermedia = Mediate<IActionRdfUpdateHypermedia, IActorRdfUpdateHypermediaOutput>;\n"]}