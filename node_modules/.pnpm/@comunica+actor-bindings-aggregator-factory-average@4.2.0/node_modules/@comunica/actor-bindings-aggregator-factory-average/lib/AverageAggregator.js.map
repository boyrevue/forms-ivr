{"version":3,"file":"AverageAggregator.js","sourceRoot":"","sources":["AverageAggregator.ts"],"names":[],"mappings":";;;AACA,+FAA+E;AAG/E,6DAA6D;AAQ7D,MAAa,iBAAkB,SAAQ,oDAAkB;IAGvD,YACE,SAA+B,EAC/B,QAAiB,EACA,WAAgC,EAChC,gBAA+B,EAC/B,gBAA+B,EAChD,UAAoB;QAEpB,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QALtB,gBAAW,GAAX,WAAW,CAAqB;QAChC,qBAAgB,GAAhB,gBAAgB,CAAe;QAC/B,qBAAgB,GAAhB,gBAAgB,CAAe;QAP1C,UAAK,GAA8B,SAAS,CAAC;IAWrD,CAAC;IAEe,cAAc;QAC5B,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC1D,CAAC;IAEM,OAAO,CAAC,IAAc;QAC3B,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,MAAM,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAC5C,IAAI,CAAC,KAAK,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QACjC,CAAC;aAAM,CAAC;YACN,MAAM,YAAY,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YACrD,IAAI,CAAC,KAAK,CAAC,GAAG,GAAyB,IAAI,CAAC,gBAAgB;iBACzD,YAAY,CAAC,CAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,YAAY,CAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YAClE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC;IACH,CAAC;IAEM,UAAU;QACf,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;QAC3B,CAAC;QACD,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACxD,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAE,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAE,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7F,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxC,CAAC;CACF;AAtCD,8CAsCC","sourcesContent":["import type { IBindingsAggregator } from '@comunica/bus-bindings-aggregator-factory';\nimport { AggregateEvaluator } from '@comunica/bus-bindings-aggregator-factory';\nimport type { ITermFunction } from '@comunica/bus-function-factory';\nimport type { ComunicaDataFactory, IExpressionEvaluator } from '@comunica/types';\nimport * as Eval from '@comunica/utils-expression-evaluator';\nimport type * as RDF from '@rdfjs/types';\n\ninterface IAverageState {\n  sum: Eval.NumericLiteral;\n  count: number;\n}\n\nexport class AverageAggregator extends AggregateEvaluator implements IBindingsAggregator {\n  private state: IAverageState | undefined = undefined;\n\n  public constructor(\n    evaluator: IExpressionEvaluator,\n    distinct: boolean,\n    private readonly dataFactory: ComunicaDataFactory,\n    private readonly additionFunction: ITermFunction,\n    private readonly divisionFunction: ITermFunction,\n    throwError?: boolean,\n  ) {\n    super(evaluator, distinct, throwError);\n  }\n\n  public override emptyValueTerm(): RDF.Term {\n    return Eval.typedLiteral('0', Eval.TypeURL.XSD_INTEGER);\n  }\n\n  public putTerm(term: RDF.Term): void {\n    if (this.state === undefined) {\n      const sum = this.termToNumericOrError(term);\n      this.state = { sum, count: 1 };\n    } else {\n      const internalTerm = this.termToNumericOrError(term);\n      this.state.sum = <Eval.NumericLiteral> this.additionFunction\n        .applyOnTerms([ this.state.sum, internalTerm ], this.evaluator);\n      this.state.count++;\n    }\n  }\n\n  public termResult(): RDF.Term | undefined {\n    if (this.state === undefined) {\n      return this.emptyValue();\n    }\n    const count = new Eval.IntegerLiteral(this.state.count);\n    const result = this.divisionFunction.applyOnTerms([ this.state.sum, count ], this.evaluator);\n    return result.toRDF(this.dataFactory);\n  }\n}\n"]}