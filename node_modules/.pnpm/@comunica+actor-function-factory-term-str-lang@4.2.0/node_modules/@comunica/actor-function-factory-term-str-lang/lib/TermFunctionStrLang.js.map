{"version":3,"file":"TermFunctionStrLang.js","sourceRoot":"","sources":["TermFunctionStrLang.ts"],"names":[],"mappings":";;;AAAA,yEAAkE;AAElE,qFAK8C;AAE9C;;GAEG;AACH,MAAa,mBAAoB,SAAQ,uCAAgB;IACvD;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,2CAAc,CAAC,OAAO;YAChC,SAAS,EAAE,IAAA,oCAAO,EAAC,2CAAc,CAAC,OAAO,CAAC;iBACvC,aAAa,CACZ,CAAE,oCAAO,CAAC,UAAU,EAAE,oCAAO,CAAC,UAAU,CAAE,EAC1C,GAAG,EAAE,CAAC,CAAC,GAAW,EAAE,QAAgB,EAAE,EAAE,CAAC,IAAI,8CAAiB,CAAC,GAAG,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAC,CAC5F;iBACA,OAAO,EAAE;SACb,CAAC,CAAC;IACL,CAAC;CACF;AAbD,kDAaC","sourcesContent":["import { TermFunctionBase } from '@comunica/bus-function-factory';\n\nimport {\n  declare,\n  LangStringLiteral,\n  SparqlOperator,\n  TypeURL,\n} from '@comunica/utils-expression-evaluator';\n\n/**\n * https://www.w3.org/TR/sparql11-query/#func-strlang\n */\nexport class TermFunctionStrLang extends TermFunctionBase {\n  public constructor() {\n    super({\n      arity: 2,\n      operator: SparqlOperator.STRLANG,\n      overloads: declare(SparqlOperator.STRLANG)\n        .onBinaryTyped(\n          [ TypeURL.XSD_STRING, TypeURL.XSD_STRING ],\n          () => (val: string, language: string) => new LangStringLiteral(val, language.toLowerCase()),\n        )\n        .collect(),\n    });\n  }\n}\n"]}