{"version":3,"file":"ActorRdfJoinEntriesSortSelectivity.js","sourceRoot":"","sources":["ActorRdfJoinEntriesSortSelectivity.ts"],"names":[],"mappings":";;;AAMA,mFAA8E;AAG9E,yCAA0C;AAG1C;;GAEG;AACH,MAAa,kCAAmC,SAAQ,mDAAuB;IAG7E,YAAmB,IAA6C;QAC9D,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,OAAkC;QAClD,OAAO,IAAA,eAAQ,EAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAiC;QAChD,MAAM,gBAAgB,GAAG,CAAE,GAAG,MAAM,CAAC,OAAO,CAAE,CAAC;QAC/C,MAAM,YAAY,GAA6B,EAAE,CAAC;QAElD,OAAO,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACnC,IAAI,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC;YACtC,IAAI,aAAa,GAAG,CAAC,CAAC,CAAC;YACvB,KAAK,MAAM,CAAE,mBAAmB,EAAE,cAAc,CAAE,IAAI,gBAAgB,CAAC,OAAO,EAAE,EAAE,CAAC;gBACjF,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC;oBACjE,OAAO,EAAE,CAAE,cAAc,EAAE,GAAG,YAAY,CAAE;oBAC5C,OAAO,EAAE,MAAM,CAAC,OAAO;iBACxB,CAAC,CAAC;gBACH,IAAI,WAAW,GAAG,cAAc,EAAE,CAAC;oBACjC,cAAc,GAAG,WAAW,CAAC;oBAC7B,aAAa,GAAG,mBAAmB,CAAC;gBACtC,CAAC;YACH,CAAC;YACD,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC;YACnD,gBAAgB,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;QAC5C,CAAC;QAED,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;IACnC,CAAC;CACF;AAlCD,gFAkCC","sourcesContent":["import type {\n  IActionRdfJoinEntriesSort,\n  IActorRdfJoinEntriesSortOutput,\n  IActorRdfJoinEntriesSortArgs,\n  IActorRdfJoinEntriesSortTest,\n} from '@comunica/bus-rdf-join-entries-sort';\nimport { ActorRdfJoinEntriesSort } from '@comunica/bus-rdf-join-entries-sort';\nimport type { MediatorRdfJoinSelectivity } from '@comunica/bus-rdf-join-selectivity';\nimport type { TestResult } from '@comunica/core';\nimport { passTest } from '@comunica/core';\nimport type { IJoinEntryWithMetadata } from '@comunica/types';\n\n/**\n * A comunica Selectivity RDF Join Entries Sort Actor.\n */\nexport class ActorRdfJoinEntriesSortSelectivity extends ActorRdfJoinEntriesSort {\n  public readonly mediatorJoinSelectivity: MediatorRdfJoinSelectivity;\n\n  public constructor(args: IActorRdfJoinEntriesSortSelectivityArgs) {\n    super(args);\n  }\n\n  public async test(_action: IActionRdfJoinEntriesSort): Promise<TestResult<IActorRdfJoinEntriesSortTest>> {\n    return passTest({ accuracy: 0.501 });\n  }\n\n  public async run(action: IActionRdfJoinEntriesSort): Promise<IActorRdfJoinEntriesSortOutput> {\n    const remainingEntries = [ ...action.entries ];\n    const finalEntries: IJoinEntryWithMetadata[] = [];\n\n    while (remainingEntries.length > 0) {\n      let minSelectivity = Number.MAX_VALUE;\n      let minEntryIndex = -1;\n      for (const [ remainingEntryIndex, remainingEntry ] of remainingEntries.entries()) {\n        const { selectivity } = await this.mediatorJoinSelectivity.mediate({\n          entries: [ remainingEntry, ...finalEntries ],\n          context: action.context,\n        });\n        if (selectivity < minSelectivity) {\n          minSelectivity = selectivity;\n          minEntryIndex = remainingEntryIndex;\n        }\n      }\n      finalEntries.push(remainingEntries[minEntryIndex]);\n      remainingEntries.splice(minEntryIndex, 1);\n    }\n\n    return { entries: finalEntries };\n  }\n}\n\nexport interface IActorRdfJoinEntriesSortSelectivityArgs extends IActorRdfJoinEntriesSortArgs {\n  mediatorJoinSelectivity: MediatorRdfJoinSelectivity;\n}\n"]}