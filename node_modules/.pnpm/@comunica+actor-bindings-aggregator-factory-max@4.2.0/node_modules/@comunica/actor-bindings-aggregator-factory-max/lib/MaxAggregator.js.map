{"version":3,"file":"MaxAggregator.js","sourceRoot":"","sources":["MaxAggregator.ts"],"names":[],"mappings":";;;AACA,+FAA+E;AAK/E,MAAa,aAAc,SAAQ,oDAAkB;IAEnD,YACE,SAA+B,EAC/B,QAAiB,EACA,gBAAiC,EAClD,UAAoB;QAEpB,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAHtB,qBAAgB,GAAhB,gBAAgB,CAAiB;QAJ5C,UAAK,GAAyB,SAAS,CAAC;IAQhD,CAAC;IAEM,OAAO,CAAC,IAAc;QAC3B,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAC,KAAK,aAAa,IAAI,CAAC,QAAQ,uBAAuB,CAAC,CAAC;QAClG,CAAC;QACD,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;aAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YACrE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,CAAC;IACH,CAAC;IAEM,UAAU;QACf,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;QAC3B,CAAC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;CACF;AA5BD,sCA4BC","sourcesContent":["import type { IBindingsAggregator } from '@comunica/bus-bindings-aggregator-factory';\nimport { AggregateEvaluator } from '@comunica/bus-bindings-aggregator-factory';\nimport type { ITermComparator } from '@comunica/bus-term-comparator-factory';\nimport type { IExpressionEvaluator } from '@comunica/types';\nimport type * as RDF from '@rdfjs/types';\n\nexport class MaxAggregator extends AggregateEvaluator implements IBindingsAggregator {\n  private state: RDF.Term | undefined = undefined;\n  public constructor(\n    evaluator: IExpressionEvaluator,\n    distinct: boolean,\n    private readonly orderByEvaluator: ITermComparator,\n    throwError?: boolean,\n  ) {\n    super(evaluator, distinct, throwError);\n  }\n\n  public putTerm(term: RDF.Term): void {\n    if (term.termType !== 'Literal') {\n      throw new Error(`Term with value ${term.value} has type ${term.termType} and is not a literal`);\n    }\n    if (this.state === undefined) {\n      this.state = term;\n    } else if (this.orderByEvaluator.orderTypes(this.state, term) === -1) {\n      this.state = term;\n    }\n  }\n\n  public termResult(): RDF.Term | undefined {\n    if (this.state === undefined) {\n      return this.emptyValue();\n    }\n    return this.state;\n  }\n}\n"]}