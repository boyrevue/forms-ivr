{"version":3,"file":"Consts.js","sourceRoot":"","sources":["Consts.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\n\nexport type KnownLiteralTypes = TypeAlias | TypeURL;\n\nexport enum TypeAlias {\n  // Numeric is everything defined in https://www.w3.org/TR/sparql11-query/#operandDataTypes\n  SPARQL_NUMERIC = 'SPARQL_NUMERIC',\n  /**\n   * Stringly is everything defined in https://www.w3.org/TR/sparql11-query/#func-strings\n   * In other words it is a simple literal, a plain literal with language tag, or a literal with datatype xsd:string\n   * In other words, since utils-expression-evaluator transforms a simple literal to xsd_string.\n   * It is RDF_LANG_STRING or XSD_STRING.\n   * Reasons for this are mentioned here: w3c/sparql-12#112\n   */\n  SPARQL_STRINGLY = 'SPARQL_STRINGLY',\n}\n\nconst DF = new DataFactory();\n\nexport function typedLiteral(value: string, type: TypeURL): RDF.Literal {\n  return DF.literal(value, DF.namedNode(type));\n}\n\nexport enum TypeURL {\n  XSD_ANY_URI = 'http://www.w3.org/2001/XMLSchema#anyURI',\n  XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string',\n  RDF_LANG_STRING = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString',\n\n  XSD_BOOLEAN = 'http://www.w3.org/2001/XMLSchema#boolean',\n\n  XSD_DATE_TIME = 'http://www.w3.org/2001/XMLSchema#dateTime',\n  XSD_DATE_TIME_STAMP = 'http://www.w3.org/2001/XMLSchema#dateTimeStamp',\n  XSD_DATE = 'http://www.w3.org/2001/XMLSchema#date',\n\n  XSD_G_MONTH = 'http://www.w3.org/2001/XMLSchema#gMonth',\n  XSD_G_MONTHDAY = 'http://www.w3.org/2001/XMLSchema#gMonthDay',\n  XSD_G_YEAR = 'http://www.w3.org/2001/XMLSchema#gYear',\n  XSD_G_YEAR_MONTH = 'http://www.w3.org/2001/XMLSchema#gYearMonth',\n  XSD_TIME = 'http://www.w3.org/2001/XMLSchema#time',\n  XSD_G_DAY = 'http://www.w3.org/2001/XMLSchema#gDay',\n\n  // Numeric types\n  XSD_DECIMAL = 'http://www.w3.org/2001/XMLSchema#decimal',\n  XSD_FLOAT = 'http://www.w3.org/2001/XMLSchema#float',\n  XSD_DOUBLE = 'http://www.w3.org/2001/XMLSchema#double',\n\n  // Derived numeric types\n  XSD_INTEGER = 'http://www.w3.org/2001/XMLSchema#integer',\n\n  XSD_NON_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger',\n  XSD_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#negativeInteger',\n\n  XSD_LONG = 'http://www.w3.org/2001/XMLSchema#long',\n  XSD_INT = 'http://www.w3.org/2001/XMLSchema#int',\n  XSD_SHORT = 'http://www.w3.org/2001/XMLSchema#short',\n  XSD_BYTE = 'http://www.w3.org/2001/XMLSchema#byte',\n\n  XSD_NON_NEGATIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger',\n  XSD_POSITIVE_INTEGER = 'http://www.w3.org/2001/XMLSchema#positiveInteger',\n  XSD_UNSIGNED_LONG = 'http://www.w3.org/2001/XMLSchema#unsignedLong',\n  XSD_UNSIGNED_INT = 'http://www.w3.org/2001/XMLSchema#unsignedInt',\n  XSD_UNSIGNED_SHORT = 'http://www.w3.org/2001/XMLSchema#unsignedShort',\n  XSD_UNSIGNED_BYTE = 'http://www.w3.org/2001/XMLSchema#unsignedByte',\n\n  // Derived String Type\n  XSD_NORMALIZED_STRING = 'http://www.w3.org/2001/XMLSchema#normalizedString',\n  XSD_TOKEN = 'http://www.w3.org/2001/XMLSchema#token',\n  XSD_LANGUAGE = 'http://www.w3.org/2001/XMLSchema#language',\n  XSD_NM_TOKEN = 'http://www.w3.org/2001/XMLSchema#NMTOKEN',\n\n  XSD_NAME = 'http://www.w3.org/2001/XMLSchema#name',\n  XSD_NC_NAME = 'http://www.w3.org/2001/XMLSchema#NCName',\n  XSD_ENTITY = 'http://www.w3.org/2001/XMLSchema#ENTITY',\n  XSD_ID = 'http://www.w3.org/2001/XMLSchema#ID',\n  XSD_ID_REF = 'http://www.w3.org/2001/XMLSchema#IDREF',\n\n  // Other types\n  XSD_DURATION = 'http://www.w3.org/2001/XMLSchema#duration',\n  XSD_YEAR_MONTH_DURATION = 'http://www.w3.org/2001/XMLSchema#yearMonthDuration',\n  XSD_DAY_TIME_DURATION = 'http://www.w3.org/2001/XMLSchema#dayTimeDuration',\n}\n\n// ----------------------------------------------------------------------------\n// Operators\n// ----------------------------------------------------------------------------\n\nexport type GeneralOperator = KnownOperator | string;\n\nexport type KnownOperator = SparqlOperator | NamedOperator;\n\n// TODO: Remove unneeded double typing\nexport enum SparqlOperator {\n  // Operator mapping\n  // https://www.w3.org/TR/sparql11-query/#OperatorMapping\n  NOT = '!',\n  UMINUS = 'uminus',\n  UPLUS = 'uplus',\n  LOGICAL_OR = '||',\n  LOGICAL_AND = '&&',\n\n  EQUAL = '=',\n  NOT_EQUAL = '!=',\n  LT = '<',\n  GT = '>',\n  LTE = '<=',\n  GTE = '>=',\n  SAME_TERM = 'sameterm',\n  IN = 'in',\n  NOT_IN = 'notin',\n\n  MULTIPLICATION = '*',\n  DIVISION = '/',\n  ADDITION = '+',\n  SUBTRACTION = '-',\n\n  // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  // See SpecialOperators\n\n  // Functions on RDF Terms\n  // https://www.w3.org/TR/sparql11-query/#func-rdfTerms\n  IS_IRI = 'isiri',\n  IS_URI = 'isuri',\n  IS_BLANK = 'isblank',\n  IS_LITERAL = 'isliteral',\n  IS_NUMERIC = 'isnumeric',\n  STR = 'str',\n  LANG = 'lang',\n  DATATYPE = 'datatype',\n  IRI = 'iri',\n  URI = 'uri',\n  BNODE = 'bnode',\n  STRDT = 'strdt',\n  STRLANG = 'strlang',\n  UUID = 'uuid',\n  STRUUID = 'struuid',\n\n  // Functions on strings\n  // https://www.w3.org/TR/sparql11-query/#func-strings\n  STRLEN = 'strlen',\n  SUBSTR = 'substr',\n  UCASE = 'ucase',\n  LCASE = 'lcase',\n  STRSTARTS = 'strstarts',\n  STRENDS = 'strends',\n  CONTAINS = 'contains',\n  STRBEFORE = 'strbefore',\n  STRAFTER = 'strafter',\n  ENCODE_FOR_URI = 'encode_for_uri',\n  CONCAT = 'concat',\n  LANG_MATCHES = 'langmatches',\n  REGEX = 'regex',\n  REPLACE = 'replace',\n\n  // Functions on numerics\n  // https://www.w3.org/TR/sparql11-query/#func-numerics\n  ABS = 'abs',\n  ROUND = 'round',\n  CEIL = 'ceil',\n  FLOOR = 'floor',\n  RAND = 'rand',\n\n  // Functions on Dates and Times\n  // https://www.w3.org/TR/sparql11-query/#func-date-time\n  NOW = 'now',\n  YEAR = 'year',\n  MONTH = 'month',\n  DAY = 'day',\n  HOURS = 'hours',\n  MINUTES = 'minutes',\n  SECONDS = 'seconds',\n  TIMEZONE = 'timezone',\n  TZ = 'tz',\n  // Hash functions\n  // https://www.w3.org/TR/sparql11-query/#func-hash\n  MD5 = 'md5',\n  SHA1 = 'sha1',\n  SHA256 = 'sha256',\n  SHA384 = 'sha384',\n  SHA512 = 'sha512',\n\n  // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  // See Named Operators\n\n  // Functions for quoted triples\n  // https://w3c.github.io/rdf-star/cg-spec/editors_draft.html#triple-function\n  TRIPLE = 'triple',\n  SUBJECT = 'subject',\n  PREDICATE = 'predicate',\n  OBJECT = 'object',\n  IS_TRIPLE = 'istriple',\n\n  // Functional Forms\n  // https://www.w3.org/TR/sparql11-query/#func-forms\n  BOUND = 'bound',\n  IF = 'if',\n  COALESCE = 'coalesce',\n}\n\nexport type NamedOperator =\n  // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  TypeURL.XSD_STRING\n  | TypeURL.XSD_FLOAT\n  | TypeURL.XSD_DOUBLE\n  | TypeURL.XSD_DECIMAL\n  | TypeURL.XSD_INTEGER\n  | TypeURL.XSD_DATE_TIME\n  | TypeURL.XSD_DATE\n  | TypeURL.XSD_BOOLEAN\n  | TypeURL.XSD_TIME\n  | TypeURL.XSD_DURATION\n  | TypeURL.XSD_DAY_TIME_DURATION\n  | TypeURL.XSD_YEAR_MONTH_DURATION;\n"]}