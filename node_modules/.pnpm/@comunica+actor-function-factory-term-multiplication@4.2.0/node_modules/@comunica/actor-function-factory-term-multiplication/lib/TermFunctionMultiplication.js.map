{"version":3,"file":"TermFunctionMultiplication.js","sourceRoot":"","sources":["TermFunctionMultiplication.ts"],"names":[],"mappings":";;;AAAA,yEAAkE;AAElE,qFAG8C;AAC9C,+CAAyC;AAEzC,MAAa,0BAA2B,SAAQ,uCAAgB;IAC9D;QACE,KAAK,CAAC;YACJ,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,2CAAc,CAAC,cAAc;YACvC,SAAS,EAAE,IAAA,oCAAO,EAAC,2CAAc,CAAC,cAAc,CAAC;iBAC9C,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,wBAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;iBAC9E,OAAO,EAAE;SACb,CAAC,CAAC;IACL,CAAC;CACF;AAVD,gEAUC","sourcesContent":["import { TermFunctionBase } from '@comunica/bus-function-factory';\n\nimport {\n  declare,\n  SparqlOperator,\n} from '@comunica/utils-expression-evaluator';\nimport { BigNumber } from 'bignumber.js';\n\nexport class TermFunctionMultiplication extends TermFunctionBase {\n  public constructor() {\n    super({\n      arity: 2,\n      operator: SparqlOperator.MULTIPLICATION,\n      overloads: declare(SparqlOperator.MULTIPLICATION)\n        .arithmetic(() => (left, right) => new BigNumber(left).times(right).toNumber())\n        .collect(),\n    });\n  }\n}\n"]}