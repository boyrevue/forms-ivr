{"version":3,"file":"fetch-sparql-endpoint.js","sourceRoot":"","sources":["fetch-sparql-endpoint.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport { readFileSync } from 'node:fs';\nimport { StreamWriter } from 'n3';\nimport { termToString } from 'rdf-string';\nimport * as streamToString from 'stream-to-string';\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\nimport { SparqlEndpointFetcher, type IBindings } from '..';\n\nasync function getQuery(query?: string, file?: string): Promise<string> {\n  if (query) {\n    return query;\n  }\n  if (file) {\n    return readFileSync(file, { encoding: 'utf-8' });\n  }\n  return streamToString(process.stdin);\n}\n\nfunction querySelect(endpoint: string, fetcher: SparqlEndpointFetcher, query: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fetcher.fetchBindings(endpoint, query).then(bindingsStream => bindingsStream\n      .on('data', (bindings: IBindings) => {\n        process.stdout.write(`${JSON.stringify(Object.fromEntries(Object.entries(bindings).map(([ key, value ]) => [\n          key,\n          termToString(value),\n        ])))}\\n`);\n      })\n      .on('error', reject)\n      .on('end', resolve)).catch(reject);\n  });\n}\n\nfunction queryAsk(endpoint: string, fetcher: SparqlEndpointFetcher, query: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fetcher.fetchAsk(endpoint, query)\n      .then((answer) => {\n        process.stdout.write(`${answer}\\n`);\n        resolve();\n      })\n      .catch(reject);\n  });\n}\n\nfunction queryConstruct(endpoint: string, fetcher: SparqlEndpointFetcher, query: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fetcher.fetchTriples(endpoint, query)\n      .then(tripleStream => tripleStream\n        .on('error', reject)\n        .pipe(new StreamWriter(SparqlEndpointFetcher.CONTENTTYPE_TURTLE))\n        .pipe(process.stdout)\n        .on('end', resolve)).catch(reject);\n  });\n}\n\nfunction update(endpoint: string, fetcher: SparqlEndpointFetcher, query: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fetcher.fetchUpdate(endpoint, query).then(() => {\n      process.stdout.write('OK\\n');\n      resolve();\n    }).catch(reject);\n  });\n}\n\nasync function run(argv: string[]): Promise<void> {\n  const args = await yargs(hideBin(argv), 'Sends a query to a SPARQL endpoint')\n    .example(\n      '$0 --endpoint https://dbpedia.org/sparql --query \\'SELECT * WHERE { ?s ?p ?o } LIMIT 100\\'',\n      'Fetch 100 triples from the DBPedia SPARQL endpoint',\n    )\n    .example(\n      '$0 --endpoint https://dbpedia.org/sparql --file query.rq',\n      'Run the SPARQL query from query.rq against the DBPedia SPARQL endpoint',\n    )\n    .example(\n      'cat query.rq | $0 --endpoint https://dbpedia.org/sparql',\n      'Run the SPARQL query from query.rq against the DBPedia SPARQL endpoint',\n    )\n    .options({\n      endpoint: { type: 'string', describe: 'Send the query to this SPARQL endpoint', demandOption: true },\n      query: { type: 'string', describe: 'Evaluate the given SPARQL query string' },\n      file: { type: 'string', describe: 'Evaluate the SPARQL query in the given file' },\n      get: { type: 'boolean', describe: 'Send query via HTTP GET instead of POST', default: false },\n      timeout: { type: 'number', describe: 'The timeout value in seconds to finish the query' },\n      auth: { choices: [ 'basic' ], describe: 'The type of authentication to use' },\n    })\n    .check((arg) => {\n      if (arg.auth === 'basic' && (!process.env.SPARQL_USERNAME || !process.env.SPARQL_PASSWORD)) {\n        throw new Error('Basic authentication requires the SPARQL_USERNAME and SPARQL_PASSWORD environment variables.');\n      }\n      return true;\n    })\n    .version()\n    .help('help')\n    .parse();\n  const queryString = await getQuery(args.query, args.file);\n  let defaultHeaders: Headers | undefined;\n  if (args.auth === 'basic') {\n    defaultHeaders = new Headers({\n      authorization: `Basic ${Buffer.from(`${process.env.SPARQL_USERNAME}:${process.env.SPARQL_PASSWORD}`, 'binary').toString('base64')}`,\n    });\n  }\n  const fetcher = new SparqlEndpointFetcher({\n    method: args.get ? 'GET' : 'POST',\n    timeout: args.timeout ? args.timeout * 1_000 : undefined,\n    defaultHeaders,\n  });\n  const queryType = fetcher.getQueryType(queryString);\n  switch (queryType) {\n    case 'SELECT':\n      await querySelect(args.endpoint, fetcher, queryString);\n      break;\n    case 'ASK':\n      await queryAsk(args.endpoint, fetcher, queryString);\n      break;\n    case 'CONSTRUCT':\n      await queryConstruct(args.endpoint, fetcher, queryString);\n      break;\n    case 'UNKNOWN':\n      if (fetcher.getUpdateTypes(queryString) !== 'UNKNOWN') {\n        await update(args.endpoint, fetcher, queryString);\n      }\n      break;\n  }\n}\n\nrun(process.argv).then().catch((error: Error) => process.stderr.write(`${error.name}: ${error.message}\\n${error.stack}`));\n"]}