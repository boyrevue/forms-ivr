import type { Validator } from './validation-engine.js';
declare const _default: {
    validateAnd: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateClass: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateClosed: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateDatatype: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateDisjoint: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateEquals: Validator;
    validateHasValue: Validator;
    validateIn: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateLanguageIn: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateLessThan: import("./validation-engine.js").PropertyValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateLessThanOrEquals: import("./validation-engine.js").PropertyValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateMaxCount: import("./validation-engine.js").PropertyValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateMaxExclusive: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateMaxInclusive: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateMaxLength: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateMinCount: import("./validation-engine.js").PropertyValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateMinExclusive: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateMinInclusive: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateMinLength: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateNode: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateNodeKind: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateNot: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateOr: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validatePattern: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateQualifiedMaxCount: import("./validation-engine.js").PropertyValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateQualifiedMinCount: import("./validation-engine.js").PropertyValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateUniqueLang: import("./validation-engine.js").PropertyValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
    validateXone: import("./validation-engine.js").GenericValidator & {
        prepareParam?(param: import("@rdfjs/types").NamedNode, value: import("clownface").GraphPointer, allParams: Map<import("@rdfjs/types").NamedNode, import("clownface").GraphPointer>): unknown | void;
    };
};
export default _default;
