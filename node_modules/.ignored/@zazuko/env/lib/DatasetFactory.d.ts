import type { BaseQuad, Quad } from '@rdfjs/types';
import type { Environment } from '@rdfjs/environment/Environment.js';
import type { FormatsFactory } from '@rdfjs/formats/Factory.js';
import type DatasetCore from '@rdfjs/dataset/DatasetCore.js';
import equals from 'rdf-dataset-ext/equals.js';
import type { TermMapFactory } from '@rdfjs/term-map/Factory.js';
import type DataFactory from '@rdfjs/data-model/Factory.js';
import type { Dataset, DatasetCtor } from './Dataset.js';
export interface FactoryMethod<D extends DatasetCore> {
    addAll(dataset: D, iterable: Iterable<BaseQuad>): D;
    deleteMatch(dataset: D, ...arg: Parameters<DatasetCore['match']>): D;
    equals: typeof equals;
    (quads?: Iterable<Quad>): D;
    Class: DatasetCtor<D>;
}
export interface DatasetFactory<D extends DatasetCore = Dataset> {
    dataset: FactoryMethod<D>;
}
declare const _default: <D extends DatasetCore<Quad>>(createConstructor: (env: Environment<FormatsFactory | DataFactory | TermMapFactory>) => DatasetCtor<D>) => {
    new (): {
        dataset: FactoryMethod<D>;
        init(this: Environment<DataFactory | FormatsFactory | TermMapFactory | DatasetFactory<D>>): void;
    };
};
export default _default;
//# sourceMappingURL=DatasetFactory.d.ts.map